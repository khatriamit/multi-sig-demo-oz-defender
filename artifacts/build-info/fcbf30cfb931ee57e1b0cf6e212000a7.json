{"id":"fcbf30cfb931ee57e1b0cf6e212000a7","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {AccessControlBase} from \"./base/AccessControlBase.sol\";\nimport {ContractOwnership} from \"./ContractOwnership.sol\";\n\n/// @title Access control via roles management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when a role is granted.\n    /// @param role the granted role.\n    /// @param account the account granted with the role.\n    /// @param operator the initiator of the grant.\n    event RoleGranted(bytes32 role, address account, address operator);\n\n    /// @notice Emitted when a role is revoked or renounced.\n    /// @param role the revoked or renounced role.\n    /// @param account the account losing the role.\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\n    event RoleRevoked(bytes32 role, address account, address operator);\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if the sender does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is Context, IERC173 {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual override returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual override {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC-173 Contract Ownership Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {Bytes32} from \"./../../utils/libraries/Bytes32.sol\";\n\nlibrary AccessControlStorage {\n    using Bytes32 for bytes32;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    event RoleGranted(bytes32 role, address account, address operator);\n    event RoleRevoked(bytes32 role, address account, address operator);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) {\n            revert(string(abi.encodePacked(\"AccessControl: missing '\", role.toASCIIString(), \"' role\")));\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        require(sender == previousOwner, \"Ownership: not the owner\");\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        require(account == s.contractOwner, \"Ownership: not the owner\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \"InterfaceDetection: wrong value\");\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {PauseStorage} from \"./../libraries/PauseStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Pausing mechanism (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract PauseBase is Context {\n    using PauseStorage for PauseStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when the pause is triggered.\n    event Paused();\n\n    /// @notice Emitted when the pause is lifted.\n    event Unpaused();\n\n    /// @notice Pauses the contract.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if the contract is paused.\n    /// @dev Emits a {Paused} event.\n    function pause() external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PauseStorage.layout().pause();\n    }\n\n    /// @notice Unpauses the contract.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if the contract is not paused.\n    /// @dev Emits an {Unpaused} event.\n    function unpause() external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PauseStorage.layout().unpause();\n    }\n\n    /// @notice Gets the paused state of the contract.\n    /// @return isPaused The paused state of the contract.\n    function paused() external view returns (bool) {\n        return PauseStorage.layout().paused();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary PauseStorage {\n    using PauseStorage for PauseStorage.Layout;\n\n    struct Layout {\n        bool isPaused;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.lifecycle.Pause.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.lifecycle.Pause.phase\")) - 1);\n\n    event Paused();\n    event Unpaused();\n\n    /// @notice Initializes the storage with an initial pause state (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    function constructorInit(Layout storage s, bool isPaused) internal {\n        if (isPaused) {\n            s.isPaused = true;\n            emit Paused();\n        }\n    }\n\n    /// @notice Initializes the storage with an initial pause state (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    function proxyInit(Layout storage s, bool isPaused) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(isPaused);\n    }\n\n    /// @notice Pauses the contract.\n    /// @dev Reverts if the contract is paused.\n    /// @dev Emits a {Paused} event.\n    function pause(Layout storage s) internal {\n        s.enforceIsNotPaused();\n        s.isPaused = true;\n        emit Paused();\n    }\n\n    /// @notice Unpauses the contract.\n    /// @dev Reverts if the contract is not paused.\n    /// @dev Emits an {Unpaused} event.\n    function unpause(Layout storage s) internal {\n        s.enforceIsPaused();\n        s.isPaused = false;\n        emit Unpaused();\n    }\n\n    /// @notice Gets the paused state of the contract.\n    /// @return isPaused The paused state of the contract.\n    function paused(Layout storage s) internal view returns (bool isPaused) {\n        return s.isPaused;\n    }\n\n    /// @notice Ensures that the contract is paused.\n    /// @dev Reverts if the contract is not paused.\n    function enforceIsPaused(Layout storage s) internal view {\n        require(s.isPaused, \"Pause: not paused\");\n    }\n\n    /// @notice Ensures that the contract is not paused.\n    /// @dev Reverts if the contract is paused.\n    function enforceIsNotPaused(Layout storage s) internal view {\n        require(!s.isPaused, \"Pause: paused\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {PauseStorage} from \"./libraries/PauseStorage.sol\";\nimport {PauseBase} from \"./base/PauseBase.sol\";\nimport {ContractOwnership} from \"../access/ContractOwnership.sol\";\n\n/// @title Pausing mechanism (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract Pause is PauseBase, ContractOwnership {\n    using PauseStorage for PauseStorage.Layout;\n\n    /// @notice Initializes the storage with an initial pause state.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    constructor(bool isPaused) {\n        PauseStorage.layout().constructorInit(isPaused);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        require(currentVersion.value < phase, \"Storage: phase reached\");\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155Base.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155} from \"./../interfaces/IERC1155.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ERC1155Base is Context, IERC1155 {\n    using ERC1155Storage for ERC1155Storage.Layout;\n\n    /// @inheritdoc IERC1155\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\n        ERC1155Storage.layout().safeTransferFrom(_msgSender(), from, to, id, value, data);\n    }\n\n    /// @inheritdoc IERC1155\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external virtual override {\n        ERC1155Storage.layout().safeBatchTransferFrom(_msgSender(), from, to, ids, values, data);\n    }\n\n    /// @inheritdoc IERC1155\n    function setApprovalForAll(address operator, bool approved) external virtual override {\n        ERC1155Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @inheritdoc IERC1155\n    function isApprovedForAll(address owner, address operator) external view override returns (bool approvedForAll) {\n        return ERC1155Storage.layout().isApprovedForAll(owner, operator);\n    }\n\n    /// @inheritdoc IERC1155\n    function balanceOf(address owner, uint256 id) external view virtual override returns (uint256 balance) {\n        return ERC1155Storage.layout().balanceOf(owner, id);\n    }\n\n    /// @inheritdoc IERC1155\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view virtual override returns (uint256[] memory balances) {\n        return ERC1155Storage.layout().balanceOfBatch(owners, ids);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155BurnableBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155Burnable} from \"./../interfaces/IERC1155Burnable.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\nabstract contract ERC1155BurnableBase is Context, IERC1155Burnable {\n    using ERC1155Storage for ERC1155Storage.Layout;\n\n    /// @inheritdoc IERC1155Burnable\n    function burnFrom(address from, uint256 id, uint256 value) external virtual override {\n        ERC1155Storage.layout().burnFrom(_msgSender(), from, id, value);\n    }\n\n    /// @inheritdoc IERC1155Burnable\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external virtual override {\n        ERC1155Storage.layout().batchBurnFrom(_msgSender(), from, ids, values);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155MetadataURI} from \"./../interfaces/IERC1155MetadataURI.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {TokenMetadataWithBaseURIStorage} from \"./../../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard (proxiable version), optional extension: Metadata URI (proxiable version).\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract ERC1155MetadataURIWithBaseURIBase is Context, IERC1155MetadataURI {\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when the base token metadata URI is updated.\n    /// @param baseMetadataURI The new base metadata URI.\n    event BaseMetadataURISet(string baseMetadataURI);\n\n    /// @notice Sets the base metadata URI.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits a {BaseMetadataURISet} event.\n    /// @param baseURI The base metadata URI.\n    function setBaseMetadataURI(string calldata baseURI) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenMetadataWithBaseURIStorage.layout().setBaseMetadataURI(baseURI);\n    }\n\n    /// @notice Gets the base metadata URI.\n    /// @return baseURI The base metadata URI.\n    function baseMetadataURI() external view returns (string memory baseURI) {\n        return TokenMetadataWithBaseURIStorage.layout().baseMetadataURI();\n    }\n\n    /// @inheritdoc IERC1155MetadataURI\n    function uri(uint256 id) external view override returns (string memory metadataURI) {\n        return TokenMetadataWithBaseURIStorage.layout().tokenMetadataURI(id);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MintableBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155Mintable} from \"./../interfaces/IERC1155Mintable.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC1155MintableBase is Context, IERC1155Mintable {\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC1155Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\n        address sender = _msgSender();\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\n        ERC1155Storage.layout().safeMint(sender, to, id, value, data);\n    }\n\n    /// @inheritdoc IERC1155Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external virtual override {\n        address sender = _msgSender();\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\n        ERC1155Storage.layout().safeBatchMint(sender, to, ids, values, data);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {ERC1155Base} from \"./base/ERC1155Base.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155 is ERC1155Base, InterfaceDetection {\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155.\n    constructor() {\n        ERC1155Storage.init();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {ERC1155BurnableBase} from \"./base/ERC1155BurnableBase.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155Burnable is ERC1155BurnableBase {\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Burnable\n    constructor() {\n        ERC1155Storage.initERC1155Burnable();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {TokenMetadataWithBaseURIStorage} from \"./../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\";\nimport {ERC1155MetadataURIWithBaseURIBase} from \"./base/ERC1155MetadataURIWithBaseURIBase.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: MetadataURIPerToken (immutable version).\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155MetadataURIWithBaseURI is ERC1155MetadataURIWithBaseURIBase, ContractOwnership {\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155MetadataURI\n    constructor() {\n        ERC1155Storage.initERC1155MetadataURI();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {ERC1155MintableBase} from \"./base/ERC1155MintableBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155Mintable is ERC1155MintableBase, AccessControl {\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Mintable\n    constructor() {\n        ERC1155Storage.initERC1155Mintable();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, basic interface.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\ninterface IERC1155 {\n    /// @notice Emitted when some token is transferred.\n    /// @param operator The initiator of the transfer.\n    /// @param from The previous token owner.\n    /// @param to The new token owner.\n    /// @param id The transferred token identifier.\n    /// @param value The amount of token.\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /// @notice Emitted when a batch of tokens is transferred.\n    /// @param operator The initiator of the transfer.\n    /// @param from The previous tokens owner.\n    /// @param to The new tokens owner.\n    /// @param ids The transferred tokens identifiers.\n    /// @param values The amounts of tokens.\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /// @notice Emitted when an approval for all tokens is set or unset.\n    /// @param owner The tokens owner.\n    /// @param operator The approved address.\n    /// @param approved True when then approval is set, false when it is unset.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /// @notice Emitted optionally when a token metadata URI is set.\n    /// @param value The token metadata URI.\n    /// @param id The token identifier.\n    event URI(string value, uint256 indexed id);\n\n    /// @notice Safely transfers some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param from Current token owner.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to transfer.\n    /// @param value Amount of token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely transfers a batch of tokens.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n    /// @dev Emits a {TransferBatch} event.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to transfer.\n    /// @param values Amounts of tokens to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n\n    /// @notice Enables or disables an operator's approval.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator Address of the operator.\n    /// @param approved True to approve the operator, false to revoke its approval.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Retrieves the approval status of an operator for a given owner.\n    /// @param owner Address of the authorisation giver.\n    /// @param operator Address of the operator.\n    /// @return approved True if the operator is approved, false if not.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\n\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\n    /// @param owner The account to retrieve the balance of.\n    /// @param id The identifier to retrieve the balance of.\n    /// @return balance The balance of `id` owned by account `owner`.\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\n\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\n    /// @dev Reverts if `owners` and `ids` have different lengths.\n    /// @param owners The addresses of the token holders\n    /// @param ids The identifiers to retrieve the balance of.\n    /// @return balances The balances of `ids` owned by accounts `owners`.\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\ninterface IERC1155Burnable {\n    /// @notice Burns some token.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(address from, uint256 id, uint256 value) external;\n\n    /// @notice Burns multiple tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\ninterface IERC1155Deliverable {\n    /// @notice Safely mints tokens to multiple recipients.\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `recipients` balance overflows.\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\ninterface IERC1155MetadataURI {\n    /// @notice Retrieves the URI for a given token.\n    /// @dev URIs are defined in RFC 3986.\n    /// @dev The URI MUST point to a JSON file that conforms to the \"ERC1155 Metadata URI JSON Schema\".\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\n    ///  an implementation to return a valid string even if the token does not exist.\n    /// @return metadataURI The URI associated to the token.\n    function uri(uint256 id) external view returns (string memory metadataURI);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\ninterface IERC1155Mintable {\n    /// @notice Safely mints some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely mints a batch of tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface IERC1155TokenReceiver {\n    /// @notice Handles the receipt of a single ERC1155 token type.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n    /// @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param id The ID of the token being transferred\n    /// @param value The amount of tokens being transferred\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n\n    /// @notice Handles the receipt of multiple ERC1155 token types.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n    /// @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155} from \"./../interfaces/IERC1155.sol\";\nimport {IERC1155MetadataURI} from \"./../interfaces/IERC1155MetadataURI.sol\";\nimport {IERC1155Mintable} from \"./../interfaces/IERC1155Mintable.sol\";\nimport {IERC1155Deliverable} from \"./../interfaces/IERC1155Deliverable.sol\";\nimport {IERC1155Burnable} from \"./../interfaces/IERC1155Burnable.sol\";\nimport {IERC1155TokenReceiver} from \"./../interfaces/IERC1155TokenReceiver.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC1155Storage {\n    using Address for address;\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(uint256 => mapping(address => uint256)) balances;\n        mapping(address => mapping(address => bool)) operators;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.ERC1155.ERC1155.storage\")) - 1);\n\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\n\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n    event URI(string value, uint256 indexed id);\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\n    function initERC1155MetadataURI() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\n    function initERC1155Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\n    function initERC1155Deliverable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\n    function initERC1155Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\n    }\n\n    /// @notice Safely transfers some token by a sender.\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param sender The message sender.\n    /// @param from Current token owner.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to transfer.\n    /// @param value Amount of token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\n        require(to != address(0), \"ERC1155: transfer to address(0)\");\n        require(_isOperatable(s, from, sender), \"ERC1155: non-approved sender\");\n\n        _transferToken(s, from, to, id, value);\n\n        emit TransferSingle(sender, from, to, id, value);\n\n        if (to.isContract()) {\n            _callOnERC1155Received(sender, from, to, id, value, data);\n        }\n    }\n\n    /// @notice Safely transfers a batch of tokens by a sender.\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n    /// @dev Emits a {TransferBatch} event.\n    /// @param sender The message sender.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to transfer.\n    /// @param values Amounts of tokens to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchTransferFrom(\n        Layout storage s,\n        address sender,\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) internal {\n        require(to != address(0), \"ERC1155: transfer to address(0)\");\n        uint256 length = ids.length;\n        require(length == values.length, \"ERC1155: inconsistent arrays\");\n\n        require(_isOperatable(s, from, sender), \"ERC1155: non-approved sender\");\n\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                _transferToken(s, from, to, ids[i], values[i]);\n            }\n        }\n\n        emit TransferBatch(sender, from, to, ids, values);\n\n        if (to.isContract()) {\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\n        }\n    }\n\n    /// @notice Safely mints some token by a sender.\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param sender The message sender.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\n        require(to != address(0), \"ERC1155: mint to address(0)\");\n\n        _mintToken(s, to, id, value);\n\n        emit TransferSingle(sender, address(0), to, id, value);\n\n        if (to.isContract()) {\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\n        }\n    }\n\n    /// @notice Safely mints a batch of tokens by a sender.\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits a {TransferBatch} event.\n    /// @param sender The message sender.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        require(to != address(0), \"ERC1155: mint to address(0)\");\n        uint256 length = ids.length;\n        require(length == values.length, \"ERC1155: inconsistent arrays\");\n\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                _mintToken(s, to, ids[i], values[i]);\n            }\n        }\n\n        emit TransferBatch(sender, address(0), to, ids, values);\n\n        if (to.isContract()) {\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\n        }\n    }\n\n    /// @notice Safely mints tokens to multiple recipients by a sender.\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `recipients` balance overflows.\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\n    /// @param sender The message sender.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeDeliver(\n        Layout storage s,\n        address sender,\n        address[] memory recipients,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        uint256 length = recipients.length;\n        require(length == ids.length && length == values.length, \"ERC1155: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\n            }\n        }\n    }\n\n    /// @notice Burns some token by a sender.\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param sender The message sender.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\n        require(_isOperatable(s, from, sender), \"ERC1155: non-approved sender\");\n        _burnToken(s, from, id, value);\n        emit TransferSingle(sender, from, address(0), id, value);\n    }\n\n    /// @notice Burns multiple tokens by a sender.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param sender The message sender.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\n        uint256 length = ids.length;\n        require(length == values.length, \"ERC1155: inconsistent arrays\");\n        require(_isOperatable(s, from, sender), \"ERC1155: non-approved sender\");\n\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                _burnToken(s, from, ids[i], values[i]);\n            }\n        }\n\n        emit TransferBatch(sender, from, address(0), ids, values);\n    }\n\n    /// @notice Enables or disables an operator's approval by a sender.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param sender The message sender.\n    /// @param operator Address of the operator.\n    /// @param approved True to approve the operator, false to revoke its approval.\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\n        require(operator != sender, \"ERC1155: self-approval for all\");\n        s.operators[sender][operator] = approved;\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /// @notice Retrieves the approval status of an operator for a given owner.\n    /// @param owner Address of the authorisation giver.\n    /// @param operator Address of the operator.\n    /// @return approved True if the operator is approved, false if not.\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\n        return s.operators[owner][operator];\n    }\n\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\n    /// @param owner The account to retrieve the balance of.\n    /// @param id The identifier to retrieve the balance of.\n    /// @return balance The balance of `id` owned by account `owner`.\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\n        require(owner != address(0), \"ERC1155: balance of address(0)\");\n        return s.balances[id][owner];\n    }\n\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\n    /// @dev Reverts if `owners` and `ids` have different lengths.\n    /// @param owners The addresses of the token holders\n    /// @param ids The identifiers to retrieve the balance of.\n    /// @return balances The balances of `ids` owned by accounts `owners`.\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\n        uint256 length = owners.length;\n        require(length == ids.length, \"ERC1155: inconsistent arrays\");\n\n        balances = new uint256[](owners.length);\n\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                balances[i] = s.balanceOf(owners[i], ids[i]);\n            }\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n    /// @param owner The token owner.\n    /// @param account The account to check the operatability of.\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\n        return (owner == account) || s.operators[owner][account];\n    }\n\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\n        if (value != 0) {\n            unchecked {\n                uint256 fromBalance = s.balances[id][from];\n                uint256 newFromBalance = fromBalance - value;\n                require(newFromBalance < fromBalance, \"ERC1155: insufficient balance\");\n                if (from != to) {\n                    uint256 toBalance = s.balances[id][to];\n                    uint256 newToBalance = toBalance + value;\n                    require(newToBalance > toBalance, \"ERC1155: balance overflow\");\n\n                    s.balances[id][from] = newFromBalance;\n                    s.balances[id][to] = newToBalance;\n                }\n            }\n        }\n    }\n\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\n        if (value != 0) {\n            unchecked {\n                uint256 balance = s.balances[id][to];\n                uint256 newBalance = balance + value;\n                require(newBalance > balance, \"ERC1155: balance overflow\");\n                s.balances[id][to] = newBalance;\n            }\n        }\n    }\n\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\n        if (value != 0) {\n            unchecked {\n                uint256 balance = s.balances[id][from];\n                uint256 newBalance = balance - value;\n                require(newBalance < balance, \"ERC1155: insufficient balance\");\n                s.balances[id][from] = newBalance;\n            }\n        }\n    }\n\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param id Identifier of the token transferred.\n    /// @param value Value transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \"ERC1155: transfer rejected\");\n    }\n\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param ids Identifiers of the tokens transferred.\n    /// @param values Values transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC1155BatchReceived(\n        address sender,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        require(\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\n            \"ERC1155: transfer rejected\"\n        );\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary TokenMetadataWithBaseURIStorage {\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n    using Strings for uint256;\n\n    struct Layout {\n        string baseURI;\n    }\n\n    bytes32 public constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.metadata.TokenMetadataWithBaseURI.storage\")) - 1);\n\n    event BaseMetadataURISet(string baseMetadataURI);\n\n    /// @notice Sets the base metadata URI.\n    /// @dev Emits a {BaseMetadataURISet} event.\n    /// @param baseURI The base metadata URI.\n    function setBaseMetadataURI(Layout storage s, string calldata baseURI) internal {\n        s.baseURI = baseURI;\n        emit BaseMetadataURISet(baseURI);\n    }\n\n    /// @notice Gets the base metadata URI.\n    /// @return baseURI The base metadata URI.\n    function baseMetadataURI(Layout storage s) internal view returns (string memory baseURI) {\n        return s.baseURI;\n    }\n\n    /// @notice Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identfier.\n    /// @param id The token identifier.\n    /// @return tokenURI The token metadata URI as the concatenation of the base metadata URI and the token identfier.\n    function tokenMetadataURI(Layout storage s, uint256 id) internal view returns (string memory tokenURI) {\n        return string(abi.encodePacked(s.baseURI, id.toString()));\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nlibrary Bytes32 {\n    /// @notice Converts bytes32 to base32 string.\n    /// @param value value to convert.\n    /// @return the converted base32 string.\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\n        unchecked {\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\n            uint256 i = uint256(value);\n            uint256 k = 52;\n            bytes memory bstr = new bytes(k);\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\n            i /= 8;\n            while (k > 0) {\n                bstr[--k] = base32Alphabet[i % 32];\n                i /= 32;\n            }\n            return string(bstr);\n        }\n    }\n\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\n    /// @param value value to convert.\n    /// @return the converted ASCII string.\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\n        unchecked {\n            if (value == 0x00) return \"\";\n            bytes memory bytesString = bytes(abi.encodePacked(value));\n            uint256 pos = 31;\n            while (true) {\n                if (bytesString[pos] != 0) break;\n                --pos;\n            }\n            bytes memory asciiString = new bytes(pos + 1);\n            for (uint256 i; i <= pos; ++i) {\n                asciiString[i] = bytesString[i];\n            }\n            return string(asciiString);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/DemoNFT.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ERC1155} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol\";\nimport {ERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol\";\nimport {ERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol\";\nimport {ERC1155MetadataURIWithBaseURI} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {AccessControlStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {Pause} from \"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol\";\nimport {PauseStorage} from \"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ERC1155Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\";\n\ncontract DemoNFT is\n    ERC1155,\n    ERC1155Mintable,\n    ERC1155Burnable,\n    Pause,\n    ERC1155MetadataURIWithBaseURI\n{\n    bytes32 public constant SUPER_ADMIN_ROLE = \"super_admin\";\n    bytes32 public constant ADMIN_ROLE = \"admin\";\n\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using PauseStorage for PauseStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    constructor() Pause(false) ContractOwnership(msg.sender) {\n        AccessControlStorage.layout().grantRole(\n            SUPER_ADMIN_ROLE,\n            _msgSender(),\n            _msgSender()\n        );\n        AccessControlStorage.layout().grantRole(\n            ADMIN_ROLE,\n            _msgSender(),\n            _msgSender()\n        );\n    }\n\n    function safeMint(\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external virtual override {\n        PauseStorage.layout().enforceIsNotPaused();\n        address sender = _msgSender();\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\n        ERC1155Storage.layout().safeMint(sender, to, id, value, data);\n    }\n\n    function transferOwnership(address newOwner) public virtual override {\n        require(\n            AccessControlStorage.layout().hasRole(\n                SUPER_ADMIN_ROLE,\n                _msgSender()\n            ),\n            \"ORNF: not super admin\"\n        );\n        ContractOwnershipStorage.layout().transferOwnership(\n            _msgSender(),\n            newOwner\n        );\n    }\n\n    function grantAdminRole(address account) external virtual {\n        address operator = _msgSender();\n        require(\n            AccessControlStorage.layout().hasRole(\n                SUPER_ADMIN_ROLE,\n                _msgSender()\n            ),\n            \"ORNF: not super admin\"\n        );\n        AccessControlStorage.layout().grantRole(ADMIN_ROLE, account, operator);\n    }\n\n    function grantMinterRole(address account) external virtual {\n        address operator = _msgSender();\n        require(\n            AccessControlStorage.layout().hasRole(ADMIN_ROLE, _msgSender()),\n            \"ORNF: not admin\"\n        );\n        AccessControlStorage.layout().grantRole(MINTER_ROLE, account, operator);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[11],"AccessControlBase":[182],"ContractOwnership":[44]},"id":12,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","file":"./base/AccessControlBase.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":12,"sourceUnit":183,"src":"57:63:0","symbolAliases":[{"foreign":{"id":2,"name":"AccessControlBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"65:17:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./ContractOwnership.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":12,"sourceUnit":45,"src":"121:58:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"129:17:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"AccessControlBase","nameLocations":["383:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":182,"src":"383:17:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"383:17:0"},{"baseName":{"id":9,"name":"ContractOwnership","nameLocations":["402:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"402:17:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"402:17:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"181:167:0","text":"@title Access control via roles management (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":11,"linearizedBaseContracts":[11,44,713,725,232,255,182,3701],"name":"AccessControl","nameLocation":"366:13:0","nodeType":"ContractDefinition","nodes":[],"scope":12,"src":"348:76:0","usedErrors":[]}],"src":"32:393:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[44],"ContractOwnershipBase":[232],"ContractOwnershipStorage":[682],"InterfaceDetection":[713]},"id":45,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":13,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":15,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":45,"sourceUnit":683,"src":"57:82:1","symbolAliases":[{"foreign":{"id":14,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"65:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":17,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":45,"sourceUnit":233,"src":"140:71:1","symbolAliases":[{"foreign":{"id":16,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"148:21:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":19,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":45,"sourceUnit":714,"src":"212:77:1","symbolAliases":[{"foreign":{"id":18,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"220:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":21,"name":"ContractOwnershipBase","nameLocations":["548:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":232,"src":"548:21:1"},"id":22,"nodeType":"InheritanceSpecifier","src":"548:21:1"},{"baseName":{"id":23,"name":"InterfaceDetection","nameLocations":["571:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":713,"src":"571:18:1"},"id":24,"nodeType":"InheritanceSpecifier","src":"571:18:1"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":20,"nodeType":"StructuredDocumentation","src":"291:218:1","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":44,"linearizedBaseContracts":[44,713,725,232,255,3701],"name":"ContractOwnership","nameLocation":"527:17:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":28,"libraryName":{"id":25,"name":"ContractOwnershipStorage","nameLocations":["602:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"602:24:1"},"nodeType":"UsingForDirective","src":"596:67:1","typeName":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"ContractOwnershipStorage.Layout","nameLocations":["631:24:1","656:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"631:31:1"},"referencedDeclaration":499,"src":"631:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":42,"nodeType":"Block","src":"997:80:1","statements":[{"expression":{"arguments":[{"id":39,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1057:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":34,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1007:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1032:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"1007:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":37,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":38,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1041:15:1","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":575,"src":"1007:49:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":40,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":41,"nodeType":"ExpressionStatement","src":"1007:63:1"}]},"documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"669:289:1","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":43,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"initialOwner","nameLocation":"983:12:1","nodeType":"VariableDeclaration","scope":43,"src":"975:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":30,"name":"address","nodeType":"ElementaryTypeName","src":"975:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"974:22:1"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"997:0:1"},"scope":44,"src":"963:114:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":45,"src":"509:570:1","usedErrors":[]}],"src":"32:1048:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","exportedSymbols":{"AccessControlBase":[182],"AccessControlStorage":[480],"Context":[3701],"ContractOwnershipStorage":[682]},"id":183,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":46,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../libraries/AccessControlStorage.sol","id":48,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":481,"src":"57:77:2","symbolAliases":[{"foreign":{"id":47,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"65:20:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":50,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":683,"src":"135:85:2","symbolAliases":[{"foreign":{"id":49,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"143:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":52,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":3702,"src":"221:66:2","symbolAliases":[{"foreign":{"id":51,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"229:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":54,"name":"Context","nameLocations":["554:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":3701,"src":"554:7:2"},"id":55,"nodeType":"InheritanceSpecifier","src":"554:7:2"}],"canonicalName":"AccessControlBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":53,"nodeType":"StructuredDocumentation","src":"289:226:2","text":"@title Access control via roles management (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":182,"linearizedBaseContracts":[182,3701],"name":"AccessControlBase","nameLocation":"533:17:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":59,"libraryName":{"id":56,"name":"AccessControlStorage","nameLocations":["574:20:2"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"574:20:2"},"nodeType":"UsingForDirective","src":"568:59:2","typeName":{"id":58,"nodeType":"UserDefinedTypeName","pathNode":{"id":57,"name":"AccessControlStorage.Layout","nameLocations":["599:20:2","620:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"599:27:2"},"referencedDeclaration":273,"src":"599:27:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":63,"libraryName":{"id":60,"name":"ContractOwnershipStorage","nameLocations":["638:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"638:24:2"},"nodeType":"UsingForDirective","src":"632:67:2","typeName":{"id":62,"nodeType":"UserDefinedTypeName","pathNode":{"id":61,"name":"ContractOwnershipStorage.Layout","nameLocations":["667:24:2","692:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"667:31:2"},"referencedDeclaration":499,"src":"667:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"anonymous":false,"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"705:191:2","text":"@notice Emitted when a role is granted.\n @param role the granted role.\n @param account the account granted with the role.\n @param operator the initiator of the grant."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":72,"name":"RoleGranted","nameLocation":"907:11:2","nodeType":"EventDefinition","parameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"927:4:2","nodeType":"VariableDeclaration","scope":72,"src":"919:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65,"name":"bytes32","nodeType":"ElementaryTypeName","src":"919:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":68,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"941:7:2","nodeType":"VariableDeclaration","scope":72,"src":"933:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67,"name":"address","nodeType":"ElementaryTypeName","src":"933:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":70,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"958:8:2","nodeType":"VariableDeclaration","scope":72,"src":"950:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":69,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"918:49:2"},"src":"901:67:2"},{"anonymous":false,"documentation":{"id":73,"nodeType":"StructuredDocumentation","src":"974:262:2","text":"@notice Emitted when a role is revoked or renounced.\n @param role the revoked or renounced role.\n @param account the account losing the role.\n @param operator the initiator of the revocation, or identical to `account` for a renouncement."},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":81,"name":"RoleRevoked","nameLocation":"1247:11:2","nodeType":"EventDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":75,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"1267:4:2","nodeType":"VariableDeclaration","scope":81,"src":"1259:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":74,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1259:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":77,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1281:7:2","nodeType":"VariableDeclaration","scope":81,"src":"1273:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":76,"name":"address","nodeType":"ElementaryTypeName","src":"1273:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":79,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"1298:8:2","nodeType":"VariableDeclaration","scope":81,"src":"1290:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"1290:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1258:49:2"},"src":"1241:67:2"},{"body":{"id":112,"nodeType":"Block","src":"1666:198:2","statements":[{"assignments":[90],"declarations":[{"constant":false,"id":90,"mutability":"mutable","name":"operator","nameLocation":"1684:8:2","nodeType":"VariableDeclaration","scope":112,"src":"1676:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"1676:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":93,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":91,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1695:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1695:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1676:31:2"},{"expression":{"arguments":[{"id":99,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"1774:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":94,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1717:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1742:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"1717:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1717:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":98,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1751:22:2","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"1717:56:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1717:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":101,"nodeType":"ExpressionStatement","src":"1717:66:2"},{"expression":{"arguments":[{"id":107,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1833:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":108,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"1839:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":109,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"1848:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":102,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"1793:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1814:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"1793:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1793:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":106,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1823:9:2","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":340,"src":"1793:39:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1793:64:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":111,"nodeType":"ExpressionStatement","src":"1793:64:2"}]},"documentation":{"id":82,"nodeType":"StructuredDocumentation","src":"1314:288:2","text":"@notice Grants a role to an account.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to."},"functionSelector":"2f2ff15d","id":113,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1616:9:2","nodeType":"FunctionDefinition","parameters":{"id":87,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"role","nameLocation":"1634:4:2","nodeType":"VariableDeclaration","scope":113,"src":"1626:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":83,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1626:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":86,"mutability":"mutable","name":"account","nameLocation":"1648:7:2","nodeType":"VariableDeclaration","scope":113,"src":"1640:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":85,"name":"address","nodeType":"ElementaryTypeName","src":"1640:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1625:31:2"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[],"src":"1666:0:2"},"scope":182,"src":"1607:257:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":144,"nodeType":"Block","src":"2221:199:2","statements":[{"assignments":[122],"declarations":[{"constant":false,"id":122,"mutability":"mutable","name":"operator","nameLocation":"2239:8:2","nodeType":"VariableDeclaration","scope":144,"src":"2231:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"2231:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":125,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":123,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"2250:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2250:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2231:31:2"},{"expression":{"arguments":[{"id":131,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"2329:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":126,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"2272:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2297:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"2272:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2272:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":130,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2306:22:2","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"2272:56:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2272:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":133,"nodeType":"ExpressionStatement","src":"2272:66:2"},{"expression":{"arguments":[{"id":139,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"2389:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":140,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"2395:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":141,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"2404:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":134,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2348:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2369:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"2348:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":138,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2378:10:2","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":377,"src":"2348:40:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"ExpressionStatement","src":"2348:65:2"}]},"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"1870:286:2","text":"@notice Revokes a role from an account.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from."},"functionSelector":"d547741f","id":145,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2170:10:2","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"role","nameLocation":"2189:4:2","nodeType":"VariableDeclaration","scope":145,"src":"2181:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2181:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":118,"mutability":"mutable","name":"account","nameLocation":"2203:7:2","nodeType":"VariableDeclaration","scope":145,"src":"2195:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"2195:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2180:31:2"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[],"src":"2221:0:2"},"scope":182,"src":"2161:259:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":161,"nodeType":"Block","src":"2660:79:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":156,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"2713:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2713:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":158,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"2727:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":151,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2670:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2691:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"2670:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2670:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":155,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2700:12:2","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":412,"src":"2670:42:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_address_$_t_bytes32_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,address,bytes32)"}},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2670:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":160,"nodeType":"ExpressionStatement","src":"2670:62:2"}]},"documentation":{"id":146,"nodeType":"StructuredDocumentation","src":"2426:184:2","text":"@notice Renounces a role by the sender.\n @dev Reverts if the sender does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param role The role to renounce."},"functionSelector":"8bb9c5bf","id":162,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2624:12:2","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"mutability":"mutable","name":"role","nameLocation":"2645:4:2","nodeType":"VariableDeclaration","scope":162,"src":"2637:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":147,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2637:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2636:14:2"},"returnParameters":{"id":150,"nodeType":"ParameterList","parameters":[],"src":"2660:0:2"},"scope":182,"src":"2615:124:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":180,"nodeType":"Block","src":"2991:76:2","statements":[{"expression":{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"3046:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":177,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"3052:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":172,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"3008:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3029:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"3008:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3008:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":175,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3038:7:2","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"3008:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3008:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":171,"id":179,"nodeType":"Return","src":"3001:59:2"}]},"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"2745:164:2","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return whether `account` has `role`."},"functionSelector":"91d14854","id":181,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2923:7:2","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":165,"mutability":"mutable","name":"role","nameLocation":"2939:4:2","nodeType":"VariableDeclaration","scope":181,"src":"2931:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2931:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"account","nameLocation":"2953:7:2","nodeType":"VariableDeclaration","scope":181,"src":"2945:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"2945:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2930:31:2"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":181,"src":"2985:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":169,"name":"bool","nodeType":"ElementaryTypeName","src":"2985:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2984:6:2"},"scope":182,"src":"2914:153:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":183,"src":"515:2554:2","usedErrors":[]}],"src":"32:3038:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[3701],"ContractOwnershipBase":[232],"ContractOwnershipStorage":[682],"IERC173":[255]},"id":233,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":184,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":186,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":233,"sourceUnit":256,"src":"57:52:3","symbolAliases":[{"foreign":{"id":185,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"65:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":188,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":233,"sourceUnit":683,"src":"110:85:3","symbolAliases":[{"foreign":{"id":187,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"118:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":190,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":233,"sourceUnit":3702,"src":"196:66:3","symbolAliases":[{"foreign":{"id":189,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"204:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":192,"name":"Context","nameLocations":["585:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":3701,"src":"585:7:3"},"id":193,"nodeType":"InheritanceSpecifier","src":"585:7:3"},{"baseName":{"id":194,"name":"IERC173","nameLocations":["594:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":255,"src":"594:7:3"},"id":195,"nodeType":"InheritanceSpecifier","src":"594:7:3"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"264:278:3","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":232,"linearizedBaseContracts":[232,255,3701],"name":"ContractOwnershipBase","nameLocation":"560:21:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":199,"libraryName":{"id":196,"name":"ContractOwnershipStorage","nameLocations":["614:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"614:24:3"},"nodeType":"UsingForDirective","src":"608:67:3","typeName":{"id":198,"nodeType":"UserDefinedTypeName","pathNode":{"id":197,"name":"ContractOwnershipStorage.Layout","nameLocations":["643:24:3","668:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"643:31:3"},"referencedDeclaration":499,"src":"643:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[254],"body":{"id":212,"nodeType":"Block","src":"773:65:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":206,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"790:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"815:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"790:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":209,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"824:5:3","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":651,"src":"790:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":205,"id":211,"nodeType":"Return","src":"783:48:3"}]},"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"681:23:3","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":213,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"718:5:3","nodeType":"FunctionDefinition","overrides":{"id":202,"nodeType":"OverrideSpecifier","overrides":[],"src":"746:8:3"},"parameters":{"id":201,"nodeType":"ParameterList","parameters":[],"src":"723:2:3"},"returnParameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":213,"src":"764:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"764:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"763:9:3"},"scope":232,"src":"709:129:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[248],"body":{"id":230,"nodeType":"Block","src":"941:92:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":225,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1003:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1003:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":227,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"1017:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":220,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"951:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"976:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"951:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":224,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"985:17:3","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":638,"src":"951:51:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$499_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":229,"nodeType":"ExpressionStatement","src":"951:75:3"}]},"documentation":{"id":214,"nodeType":"StructuredDocumentation","src":"844:23:3","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":231,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"881:17:3","nodeType":"FunctionDefinition","overrides":{"id":218,"nodeType":"OverrideSpecifier","overrides":[],"src":"932:8:3"},"parameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"newOwner","nameLocation":"907:8:3","nodeType":"VariableDeclaration","scope":231,"src":"899:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"899:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:18:3"},"returnParameters":{"id":219,"nodeType":"ParameterList","parameters":[],"src":"941:0:3"},"scope":232,"src":"872:161:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":233,"src":"542:493:3","usedErrors":[]}],"src":"32:1004:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[255]},"id":256,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":234,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":235,"nodeType":"StructuredDocumentation","src":"57:170:4","text":"@title ERC-173 Contract Ownership Standard\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":255,"linearizedBaseContracts":[255],"name":"IERC173","nameLocation":"237:7:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"251:162:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":242,"name":"OwnershipTransferred","nameLocation":"424:20:4","nodeType":"EventDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"461:13:4","nodeType":"VariableDeclaration","scope":242,"src":"445:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":237,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":240,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"492:8:4","nodeType":"VariableDeclaration","scope":242,"src":"476:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"476:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"444:57:4"},"src":"418:84:4"},{"documentation":{"id":243,"nodeType":"StructuredDocumentation","src":"508:342:4","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":248,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"864:17:4","nodeType":"FunctionDefinition","parameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"newOwner","nameLocation":"890:8:4","nodeType":"VariableDeclaration","scope":248,"src":"882:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":244,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"881:18:4"},"returnParameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"908:0:4"},"scope":255,"src":"855:54:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"915:116:4","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":254,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1045:5:4","nodeType":"FunctionDefinition","parameters":{"id":250,"nodeType":"ParameterList","parameters":[],"src":"1050:2:4"},"returnParameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"contractOwner","nameLocation":"1084:13:4","nodeType":"VariableDeclaration","scope":254,"src":"1076:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":251,"name":"address","nodeType":"ElementaryTypeName","src":"1076:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1075:23:4"},"scope":255,"src":"1036:63:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":256,"src":"227:874:4","usedErrors":[]}],"src":"32:1070:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","exportedSymbols":{"AccessControlStorage":[480],"Bytes32":[3349]},"id":481,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":257,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:5"},{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol","file":"./../../utils/libraries/Bytes32.sol","id":259,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":3350,"src":"57:60:5","symbolAliases":[{"foreign":{"id":258,"name":"Bytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"65:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccessControlStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":480,"linearizedBaseContracts":[480],"name":"AccessControlStorage","nameLocation":"127:20:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":262,"libraryName":{"id":260,"name":"Bytes32","nameLocations":["160:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":3349,"src":"160:7:5"},"nodeType":"UsingForDirective","src":"154:26:5","typeName":{"id":261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"172:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"global":false,"id":266,"libraryName":{"id":263,"name":"AccessControlStorage","nameLocations":["191:20:5"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"191:20:5"},"nodeType":"UsingForDirective","src":"185:59:5","typeName":{"id":265,"nodeType":"UserDefinedTypeName","pathNode":{"id":264,"name":"AccessControlStorage.Layout","nameLocations":["216:20:5","237:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"216:27:5"},"referencedDeclaration":273,"src":"216:27:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"AccessControlStorage.Layout","id":273,"members":[{"constant":false,"id":272,"mutability":"mutable","name":"roles","nameLocation":"319:5:5","nodeType":"VariableDeclaration","scope":273,"src":"274:50:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"typeName":{"id":271,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":267,"name":"bytes32","nodeType":"ElementaryTypeName","src":"282:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"274:44:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":270,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"301:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"293:24:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":269,"name":"bool","nodeType":"ElementaryTypeName","src":"312:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"257:6:5","nodeType":"StructDefinition","scope":480,"src":"250:81:5","visibility":"public"},{"constant":true,"id":286,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"363:19:5","nodeType":"VariableDeclaration","scope":480,"src":"337:124:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"337:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":284,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e416363657373436f6e74726f6c2e73746f72616765","id":280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"411:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""},"value":"animoca.core.access.AccessControl.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""}],"id":279,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"401:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"401:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"393:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"393:7:5","typeDescriptions":{}}},"id":282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"393:63:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"459:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"393:67:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"385:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"385:7:5","typeDescriptions":{}}},"id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"385:76:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":294,"name":"RoleGranted","nameLocation":"474:11:5","nodeType":"EventDefinition","parameters":{"id":293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"494:4:5","nodeType":"VariableDeclaration","scope":294,"src":"486:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"486:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":290,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"508:7:5","nodeType":"VariableDeclaration","scope":294,"src":"500:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":289,"name":"address","nodeType":"ElementaryTypeName","src":"500:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":292,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"525:8:5","nodeType":"VariableDeclaration","scope":294,"src":"517:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":291,"name":"address","nodeType":"ElementaryTypeName","src":"517:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"485:49:5"},"src":"468:67:5"},{"anonymous":false,"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":302,"name":"RoleRevoked","nameLocation":"546:11:5","nodeType":"EventDefinition","parameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"566:4:5","nodeType":"VariableDeclaration","scope":302,"src":"558:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"558:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":298,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"580:7:5","nodeType":"VariableDeclaration","scope":302,"src":"572:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"572:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":300,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"597:8:5","nodeType":"VariableDeclaration","scope":302,"src":"589:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":299,"name":"address","nodeType":"ElementaryTypeName","src":"589:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"557:49:5"},"src":"540:67:5"},{"body":{"id":339,"nodeType":"Block","src":"1082:156:5","statements":[{"condition":{"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1096:25:5","subExpression":{"arguments":[{"id":317,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"1107:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":318,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1113:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":315,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1097:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1099:7:5","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"1097:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1097:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":338,"nodeType":"IfStatement","src":"1092:140:5","trueBody":{"id":337,"nodeType":"Block","src":"1123:109:5","statements":[{"expression":{"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":321,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1137:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":325,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1139:5:5","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":272,"src":"1137:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":326,"indexExpression":{"id":323,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"1145:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1137:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":327,"indexExpression":{"id":324,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1151:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1137:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1137:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":330,"nodeType":"ExpressionStatement","src":"1137:29:5"},{"eventCall":{"arguments":[{"id":332,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"1197:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":333,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1203:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":334,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"1212:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":331,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"1185:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1185:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":336,"nodeType":"EmitStatement","src":"1180:41:5"}]}}]},"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"613:369:5","text":"@notice Grants a role to an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to.\n @param operator The account requesting the role change."},"id":340,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"996:9:5","nodeType":"FunctionDefinition","parameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":306,"mutability":"mutable","name":"s","nameLocation":"1021:1:5","nodeType":"VariableDeclaration","scope":340,"src":"1006:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":305,"nodeType":"UserDefinedTypeName","pathNode":{"id":304,"name":"Layout","nameLocations":["1006:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"1006:6:5"},"referencedDeclaration":273,"src":"1006:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":308,"mutability":"mutable","name":"role","nameLocation":"1032:4:5","nodeType":"VariableDeclaration","scope":340,"src":"1024:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1024:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":310,"mutability":"mutable","name":"account","nameLocation":"1046:7:5","nodeType":"VariableDeclaration","scope":340,"src":"1038:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":309,"name":"address","nodeType":"ElementaryTypeName","src":"1038:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":312,"mutability":"mutable","name":"operator","nameLocation":"1063:8:5","nodeType":"VariableDeclaration","scope":340,"src":"1055:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":311,"name":"address","nodeType":"ElementaryTypeName","src":"1055:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1005:67:5"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[],"src":"1082:0:5"},"scope":480,"src":"987:251:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":376,"nodeType":"Block","src":"1712:156:5","statements":[{"condition":{"arguments":[{"id":355,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"1736:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":356,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"1742:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":353,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"1726:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":354,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1728:7:5","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"1726:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1726:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":375,"nodeType":"IfStatement","src":"1722:140:5","trueBody":{"id":374,"nodeType":"Block","src":"1752:110:5","statements":[{"expression":{"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":358,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"1766:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":362,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1768:5:5","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":272,"src":"1766:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":363,"indexExpression":{"id":360,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"1774:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1766:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":364,"indexExpression":{"id":361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"1780:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1766:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1791:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1766:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":367,"nodeType":"ExpressionStatement","src":"1766:30:5"},{"eventCall":{"arguments":[{"id":369,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"1827:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":370,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"1833:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":371,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"1842:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":368,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"1815:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1815:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":373,"nodeType":"EmitStatement","src":"1810:41:5"}]}}]},"documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"1244:367:5","text":"@notice Revokes a role from an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from.\n @param operator The account requesting the role change."},"id":377,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1625:10:5","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"s","nameLocation":"1651:1:5","nodeType":"VariableDeclaration","scope":377,"src":"1636:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":343,"nodeType":"UserDefinedTypeName","pathNode":{"id":342,"name":"Layout","nameLocations":["1636:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"1636:6:5"},"referencedDeclaration":273,"src":"1636:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":346,"mutability":"mutable","name":"role","nameLocation":"1662:4:5","nodeType":"VariableDeclaration","scope":377,"src":"1654:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1654:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"account","nameLocation":"1676:7:5","nodeType":"VariableDeclaration","scope":377,"src":"1668:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"1668:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"operator","nameLocation":"1693:8:5","nodeType":"VariableDeclaration","scope":377,"src":"1685:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"1685:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1635:67:5"},"returnParameters":{"id":352,"nodeType":"ParameterList","parameters":[],"src":"1712:0:5"},"scope":480,"src":"1616:252:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":411,"nodeType":"Block","src":"2182:134:5","statements":[{"expression":{"arguments":[{"id":391,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"2209:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":392,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"2215:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":388,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2192:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":390,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2194:14:5","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":467,"src":"2192:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":394,"nodeType":"ExpressionStatement","src":"2192:30:5"},{"expression":{"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":395,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2232:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":399,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2234:5:5","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":272,"src":"2232:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":400,"indexExpression":{"id":397,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"2240:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2232:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":401,"indexExpression":{"id":398,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"2246:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2232:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2256:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2232:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":404,"nodeType":"ExpressionStatement","src":"2232:29:5"},{"eventCall":{"arguments":[{"id":406,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"2288:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":407,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"2294:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":408,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"2302:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":405,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"2276:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2276:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":410,"nodeType":"EmitStatement","src":"2271:38:5"}]},"documentation":{"id":378,"nodeType":"StructuredDocumentation","src":"1874:224:5","text":"@notice Renounces a role by the sender.\n @dev Reverts if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param sender The message sender.\n @param role The role to renounce."},"id":412,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2112:12:5","nodeType":"FunctionDefinition","parameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"s","nameLocation":"2140:1:5","nodeType":"VariableDeclaration","scope":412,"src":"2125:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":380,"nodeType":"UserDefinedTypeName","pathNode":{"id":379,"name":"Layout","nameLocations":["2125:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"2125:6:5"},"referencedDeclaration":273,"src":"2125:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"sender","nameLocation":"2151:6:5","nodeType":"VariableDeclaration","scope":412,"src":"2143:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"2143:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"role","nameLocation":"2167:4:5","nodeType":"VariableDeclaration","scope":412,"src":"2159:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":384,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2159:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2124:48:5"},"returnParameters":{"id":387,"nodeType":"ParameterList","parameters":[],"src":"2182:0:5"},"scope":480,"src":"2103:213:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":432,"nodeType":"Block","src":"2586:46:5","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":425,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"2603:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2605:5:5","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":272,"src":"2603:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":428,"indexExpression":{"id":427,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"2611:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2603:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":430,"indexExpression":{"id":429,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"2617:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2603:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":424,"id":431,"nodeType":"Return","src":"2596:29:5"}]},"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"2322:164:5","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return whether `account` has `role`."},"id":433,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2500:7:5","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"s","nameLocation":"2523:1:5","nodeType":"VariableDeclaration","scope":433,"src":"2508:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":415,"nodeType":"UserDefinedTypeName","pathNode":{"id":414,"name":"Layout","nameLocations":["2508:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"2508:6:5"},"referencedDeclaration":273,"src":"2508:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"role","nameLocation":"2534:4:5","nodeType":"VariableDeclaration","scope":433,"src":"2526:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2526:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"account","nameLocation":"2548:7:5","nodeType":"VariableDeclaration","scope":433,"src":"2540:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"2540:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2507:49:5"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":433,"src":"2580:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":422,"name":"bool","nodeType":"ElementaryTypeName","src":"2580:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2579:6:5"},"scope":480,"src":"2491:141:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":466,"nodeType":"Block","src":"2899:164:5","statements":[{"condition":{"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2913:25:5","subExpression":{"arguments":[{"id":446,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"2924:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":447,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"2930:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":444,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"2914:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":445,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2916:7:5","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"2914:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2914:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":465,"nodeType":"IfStatement","src":"2909:148:5","trueBody":{"id":464,"nodeType":"Block","src":"2940:117:5","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206d697373696e672027","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2985:26:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a","typeString":"literal_string \"AccessControl: missing '\""},"value":"AccessControl: missing '"},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":456,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3013:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:13:5","memberName":"toASCIIString","nodeType":"MemberAccess","referencedDeclaration":3348,"src":"3013:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_string_memory_ptr_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (string memory)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3013:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2720726f6c65","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3035:8:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223","typeString":"literal_string \"' role\""},"value":"' role"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a","typeString":"literal_string \"AccessControl: missing '\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223","typeString":"literal_string \"' role\""}],"expression":{"id":453,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2968:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2972:12:5","memberName":"encodePacked","nodeType":"MemberAccess","src":"2968:16:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2968:76:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2961:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":451,"name":"string","nodeType":"ElementaryTypeName","src":"2961:6:5","typeDescriptions":{}}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2961:84:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":450,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2954:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2954:92:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":463,"nodeType":"ExpressionStatement","src":"2954:92:5"}]}}]},"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"2638:169:5","text":"@notice Ensures that an account has a role.\n @dev Reverts if `account` does not have `role`.\n @param role The role.\n @param account The account."},"id":467,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasRole","nameLocation":"2821:14:5","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"s","nameLocation":"2851:1:5","nodeType":"VariableDeclaration","scope":467,"src":"2836:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":436,"nodeType":"UserDefinedTypeName","pathNode":{"id":435,"name":"Layout","nameLocations":["2836:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"2836:6:5"},"referencedDeclaration":273,"src":"2836:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"role","nameLocation":"2862:4:5","nodeType":"VariableDeclaration","scope":467,"src":"2854:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2854:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"account","nameLocation":"2876:7:5","nodeType":"VariableDeclaration","scope":467,"src":"2868:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":440,"name":"address","nodeType":"ElementaryTypeName","src":"2868:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2835:49:5"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[],"src":"2899:0:5"},"scope":480,"src":"2812:251:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":478,"nodeType":"Block","src":"3128:115:5","statements":[{"assignments":[474],"declarations":[{"constant":false,"id":474,"mutability":"mutable","name":"position","nameLocation":"3146:8:5","nodeType":"VariableDeclaration","scope":478,"src":"3138:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3138:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":476,"initialValue":{"id":475,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"3157:19:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3138:38:5"},{"AST":{"nodeType":"YulBlock","src":"3195:42:5","statements":[{"nodeType":"YulAssignment","src":"3209:18:5","value":{"name":"position","nodeType":"YulIdentifier","src":"3219:8:5"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"3209:6:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":474,"isOffset":false,"isSlot":false,"src":"3219:8:5","valueSize":1},{"declaration":471,"isOffset":false,"isSlot":true,"src":"3209:6:5","suffix":"slot","valueSize":1}],"id":477,"nodeType":"InlineAssembly","src":"3186:51:5"}]},"id":479,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3078:6:5","nodeType":"FunctionDefinition","parameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"3084:2:5"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"s","nameLocation":"3125:1:5","nodeType":"VariableDeclaration","scope":479,"src":"3110:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":470,"nodeType":"UserDefinedTypeName","pathNode":{"id":469,"name":"Layout","nameLocations":["3110:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"3110:6:5"},"referencedDeclaration":273,"src":"3110:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"}],"src":"3109:18:5"},"scope":480,"src":"3069:174:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":481,"src":"119:3126:5","usedErrors":[]}],"src":"32:3214:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"ContractOwnershipStorage":[682],"IERC173":[255],"InterfaceDetectionStorage":[824],"ProxyInitialization":[1162]},"id":683,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":482,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":484,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":683,"sourceUnit":256,"src":"57:52:6","symbolAliases":[{"foreign":{"id":483,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"65:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":486,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":683,"sourceUnit":1163,"src":"110:84:6","symbolAliases":[{"foreign":{"id":485,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"118:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":488,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":683,"sourceUnit":825,"src":"195:104:6","symbolAliases":[{"foreign":{"id":487,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"203:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":682,"linearizedBaseContracts":[682],"name":"ContractOwnershipStorage","nameLocation":"309:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":492,"libraryName":{"id":489,"name":"ContractOwnershipStorage","nameLocations":["346:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"346:24:6"},"nodeType":"UsingForDirective","src":"340:67:6","typeName":{"id":491,"nodeType":"UserDefinedTypeName","pathNode":{"id":490,"name":"ContractOwnershipStorage.Layout","nameLocations":["375:24:6","400:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"375:31:6"},"referencedDeclaration":499,"src":"375:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":496,"libraryName":{"id":493,"name":"InterfaceDetectionStorage","nameLocations":["418:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"418:25:6"},"nodeType":"UsingForDirective","src":"412:69:6","typeName":{"id":495,"nodeType":"UserDefinedTypeName","pathNode":{"id":494,"name":"InterfaceDetectionStorage.Layout","nameLocations":["448:25:6","474:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"448:32:6"},"referencedDeclaration":734,"src":"448:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":499,"members":[{"constant":false,"id":498,"mutability":"mutable","name":"contractOwner","nameLocation":"519:13:6","nodeType":"VariableDeclaration","scope":499,"src":"511:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":497,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"494:6:6","nodeType":"StructDefinition","scope":682,"src":"487:52:6","visibility":"public"},{"constant":true,"id":512,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"571:19:6","nodeType":"VariableDeclaration","scope":682,"src":"545:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"619:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":505,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"609:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"609:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"601:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":503,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:6","typeDescriptions":{}}},"id":508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"601:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"671:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"601:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"593:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:6","typeDescriptions":{}}},"id":511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"593:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":525,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"705:21:6","nodeType":"VariableDeclaration","scope":682,"src":"679:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":513,"name":"bytes32","nodeType":"ElementaryTypeName","src":"679:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"755:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":518,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"745:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"745:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"737:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":516,"name":"uint256","nodeType":"ElementaryTypeName","src":"737:7:6","typeDescriptions":{}}},"id":521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"737:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"805:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"737:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"729:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"729:7:6","typeDescriptions":{}}},"id":524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"729:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":531,"name":"OwnershipTransferred","nameLocation":"820:20:6","nodeType":"EventDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"857:13:6","nodeType":"VariableDeclaration","scope":531,"src":"841:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"841:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":529,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"888:8:6","nodeType":"VariableDeclaration","scope":531,"src":"872:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"840:57:6"},"src":"814:84:6"},{"body":{"id":574,"nodeType":"Block","src":"1406:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":540,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1420:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1444:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1436:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"1436:7:6","typeDescriptions":{}}},"id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1436:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1420:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":561,"nodeType":"IfStatement","src":"1416:152:6","trueBody":{"id":560,"nodeType":"Block","src":"1448:120:6","statements":[{"expression":{"id":550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":546,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"1462:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":548,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1464:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"1462:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":549,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1480:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1462:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":551,"nodeType":"ExpressionStatement","src":"1462:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1540:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1532:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"1532:7:6","typeDescriptions":{}}},"id":556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":557,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1544:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":552,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"1511:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1511:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":559,"nodeType":"EmitStatement","src":"1506:51:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":568,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"1639:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$255_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$255_$","typeString":"type(contract IERC173)"}],"id":567,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1634:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1634:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$255","typeString":"type(contract IERC173)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1648:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1634:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1661:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":562,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"1577:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1603:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"1577:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":566,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1612:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"1577:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":573,"nodeType":"ExpressionStatement","src":"1577:89:6"}]},"documentation":{"id":532,"nodeType":"StructuredDocumentation","src":"904:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":575,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1341:15:6","nodeType":"FunctionDefinition","parameters":{"id":538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"s","nameLocation":"1372:1:6","nodeType":"VariableDeclaration","scope":575,"src":"1357:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":534,"nodeType":"UserDefinedTypeName","pathNode":{"id":533,"name":"Layout","nameLocations":["1357:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"1357:6:6"},"referencedDeclaration":499,"src":"1357:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":537,"mutability":"mutable","name":"initialOwner","nameLocation":"1383:12:6","nodeType":"VariableDeclaration","scope":575,"src":"1375:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1356:40:6"},"returnParameters":{"id":539,"nodeType":"ParameterList","parameters":[],"src":"1406:0:6"},"scope":682,"src":"1332:341:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":597,"nodeType":"Block","src":"2297:112:6","statements":[{"expression":{"arguments":[{"id":587,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"2336:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2359:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":584,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"2307:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1162_$","typeString":"type(library ProxyInitialization)"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2327:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"2307:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2307:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":590,"nodeType":"ExpressionStatement","src":"2307:54:6"},{"expression":{"arguments":[{"id":594,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"2389:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":591,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"2371:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":593,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2373:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":575,"src":"2371:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2371:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":596,"nodeType":"ExpressionStatement","src":"2371:31:6"}]},"documentation":{"id":576,"nodeType":"StructuredDocumentation","src":"1679:545:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":598,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2238:9:6","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"s","nameLocation":"2263:1:6","nodeType":"VariableDeclaration","scope":598,"src":"2248:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":578,"nodeType":"UserDefinedTypeName","pathNode":{"id":577,"name":"Layout","nameLocations":["2248:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"2248:6:6"},"referencedDeclaration":499,"src":"2248:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"initialOwner","nameLocation":"2274:12:6","nodeType":"VariableDeclaration","scope":598,"src":"2266:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":580,"name":"address","nodeType":"ElementaryTypeName","src":"2266:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:40:6"},"returnParameters":{"id":583,"nodeType":"ParameterList","parameters":[],"src":"2297:0:6"},"scope":682,"src":"2229:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":637,"nodeType":"Block","src":"2848:281:6","statements":[{"assignments":[610],"declarations":[{"constant":false,"id":610,"mutability":"mutable","name":"previousOwner","nameLocation":"2866:13:6","nodeType":"VariableDeclaration","scope":637,"src":"2858:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"2858:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":613,"initialValue":{"expression":{"id":611,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"2882:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":612,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2884:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"2882:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2858:39:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":615,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2915:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":616,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"2925:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2915:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2940:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":614,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2907:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2907:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":620,"nodeType":"ExpressionStatement","src":"2907:60:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":621,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"2981:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":622,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"2998:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2981:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":636,"nodeType":"IfStatement","src":"2977:146:6","trueBody":{"id":635,"nodeType":"Block","src":"3008:115:6","statements":[{"expression":{"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":624,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"3022:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":626,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3024:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"3022:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":627,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"3040:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3022:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":629,"nodeType":"ExpressionStatement","src":"3022:26:6"},{"eventCall":{"arguments":[{"id":631,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"3088:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":632,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"3103:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":630,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"3067:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3067:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"EmitStatement","src":"3062:50:6"}]}}]},"documentation":{"id":599,"nodeType":"StructuredDocumentation","src":"2415:340:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":638,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"2769:17:6","nodeType":"FunctionDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"s","nameLocation":"2802:1:6","nodeType":"VariableDeclaration","scope":638,"src":"2787:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":601,"nodeType":"UserDefinedTypeName","pathNode":{"id":600,"name":"Layout","nameLocations":["2787:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"2787:6:6"},"referencedDeclaration":499,"src":"2787:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":604,"mutability":"mutable","name":"sender","nameLocation":"2813:6:6","nodeType":"VariableDeclaration","scope":638,"src":"2805:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":603,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"newOwner","nameLocation":"2829:8:6","nodeType":"VariableDeclaration","scope":638,"src":"2821:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"2821:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2786:52:6"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[],"src":"2848:0:6"},"scope":682,"src":"2760:369:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":650,"nodeType":"Block","src":"3335:39:6","statements":[{"expression":{"expression":{"id":647,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"3352:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":648,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3354:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"3352:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":646,"id":649,"nodeType":"Return","src":"3345:22:6"}]},"documentation":{"id":639,"nodeType":"StructuredDocumentation","src":"3135:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":651,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3265:5:6","nodeType":"FunctionDefinition","parameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"s","nameLocation":"3286:1:6","nodeType":"VariableDeclaration","scope":651,"src":"3271:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":641,"nodeType":"UserDefinedTypeName","pathNode":{"id":640,"name":"Layout","nameLocations":["3271:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"3271:6:6"},"referencedDeclaration":499,"src":"3271:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3270:18:6"},"returnParameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"contractOwner","nameLocation":"3320:13:6","nodeType":"VariableDeclaration","scope":651,"src":"3312:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"3312:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3311:23:6"},"scope":682,"src":"3256:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":668,"nodeType":"Block","src":"3621:80:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":661,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"3639:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":662,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"3650:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":663,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3652:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"3650:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3639:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3667:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":660,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3631:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3631:63:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"ExpressionStatement","src":"3631:63:6"}]},"documentation":{"id":652,"nodeType":"StructuredDocumentation","src":"3380:155:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts if `account` is not the contract owner.\n @param account The account."},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"3549:22:6","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"s","nameLocation":"3587:1:6","nodeType":"VariableDeclaration","scope":669,"src":"3572:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":654,"nodeType":"UserDefinedTypeName","pathNode":{"id":653,"name":"Layout","nameLocations":["3572:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"3572:6:6"},"referencedDeclaration":499,"src":"3572:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"account","nameLocation":"3598:7:6","nodeType":"VariableDeclaration","scope":669,"src":"3590:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":656,"name":"address","nodeType":"ElementaryTypeName","src":"3590:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3571:35:6"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[],"src":"3621:0:6"},"scope":682,"src":"3540:161:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":680,"nodeType":"Block","src":"3766:115:6","statements":[{"assignments":[676],"declarations":[{"constant":false,"id":676,"mutability":"mutable","name":"position","nameLocation":"3784:8:6","nodeType":"VariableDeclaration","scope":680,"src":"3776:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":675,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3776:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":678,"initialValue":{"id":677,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"3795:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3776:38:6"},{"AST":{"nodeType":"YulBlock","src":"3833:42:6","statements":[{"nodeType":"YulAssignment","src":"3847:18:6","value":{"name":"position","nodeType":"YulIdentifier","src":"3857:8:6"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"3847:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":676,"isOffset":false,"isSlot":false,"src":"3857:8:6","valueSize":1},{"declaration":673,"isOffset":false,"isSlot":true,"src":"3847:6:6","suffix":"slot","valueSize":1}],"id":679,"nodeType":"InlineAssembly","src":"3824:51:6"}]},"id":681,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3716:6:6","nodeType":"FunctionDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[],"src":"3722:2:6"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"s","nameLocation":"3763:1:6","nodeType":"VariableDeclaration","scope":681,"src":"3748:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":672,"nodeType":"UserDefinedTypeName","pathNode":{"id":671,"name":"Layout","nameLocations":["3748:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"3748:6:6"},"referencedDeclaration":499,"src":"3748:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3747:18:6"},"scope":682,"src":"3707:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":683,"src":"301:3582:6","usedErrors":[]}],"src":"32:3852:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[725],"InterfaceDetection":[713],"InterfaceDetectionStorage":[824]},"id":714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":684,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":686,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":714,"sourceUnit":726,"src":"57:49:7","symbolAliases":[{"foreign":{"id":685,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"65:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":688,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":714,"sourceUnit":825,"src":"107:84:7","symbolAliases":[{"foreign":{"id":687,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"115:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":690,"name":"IERC165","nameLocations":["424:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":725,"src":"424:7:7"},"id":691,"nodeType":"InheritanceSpecifier","src":"424:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":689,"nodeType":"StructuredDocumentation","src":"193:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":713,"linearizedBaseContracts":[713,725],"name":"InterfaceDetection","nameLocation":"402:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":695,"libraryName":{"id":692,"name":"InterfaceDetectionStorage","nameLocations":["444:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"444:25:7"},"nodeType":"UsingForDirective","src":"438:69:7","typeName":{"id":694,"nodeType":"UserDefinedTypeName","pathNode":{"id":693,"name":"InterfaceDetectionStorage.Layout","nameLocations":["474:25:7","500:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"474:32:7"},"referencedDeclaration":734,"src":"474:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[724],"body":{"id":711,"nodeType":"Block","src":"626:89:7","statements":[{"expression":{"arguments":[{"id":708,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"696:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":704,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"643:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"669:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"643:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":707,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"678:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":811,"src":"643:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":703,"id":710,"nodeType":"Return","src":"636:72:7"}]},"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"513:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":712,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"550:17:7","nodeType":"FunctionDefinition","overrides":{"id":700,"nodeType":"OverrideSpecifier","overrides":[],"src":"602:8:7"},"parameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"interfaceId","nameLocation":"575:11:7","nodeType":"VariableDeclaration","scope":712,"src":"568:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":697,"name":"bytes4","nodeType":"ElementaryTypeName","src":"568:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"567:20:7"},"returnParameters":{"id":703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"620:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":701,"name":"bool","nodeType":"ElementaryTypeName","src":"620:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"619:6:7"},"scope":713,"src":"541:174:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":714,"src":"384:333:7","usedErrors":[]}],"src":"32:686:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[725]},"id":726,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":715,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"57:173:8","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":725,"linearizedBaseContracts":[725],"name":"IERC165","nameLocation":"240:7:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"254:340:8","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":724,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"608:17:8","nodeType":"FunctionDefinition","parameters":{"id":720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"interfaceId","nameLocation":"633:11:8","nodeType":"VariableDeclaration","scope":724,"src":"626:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":718,"name":"bytes4","nodeType":"ElementaryTypeName","src":"626:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"625:20:8"},"returnParameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"supported","nameLocation":"674:9:8","nodeType":"VariableDeclaration","scope":724,"src":"669:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":721,"name":"bool","nodeType":"ElementaryTypeName","src":"669:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"668:16:8"},"scope":725,"src":"599:86:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":726,"src":"230:457:8","usedErrors":[]}],"src":"32:656:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[725],"InterfaceDetectionStorage":[824]},"id":825,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":727,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:9"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":729,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":825,"sourceUnit":726,"src":"57:52:9","symbolAliases":[{"foreign":{"id":728,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"65:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":824,"linearizedBaseContracts":[824],"name":"InterfaceDetectionStorage","nameLocation":"119:25:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":734,"members":[{"constant":false,"id":733,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"199:19:9","nodeType":"VariableDeclaration","scope":734,"src":"175:43:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":732,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":730,"name":"bytes4","nodeType":"ElementaryTypeName","src":"183:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"175:23:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":731,"name":"bool","nodeType":"ElementaryTypeName","src":"193:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"158:6:9","nodeType":"StructDefinition","scope":824,"src":"151:74:9","visibility":"public"},{"constant":true,"id":747,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"257:19:9","nodeType":"VariableDeclaration","scope":824,"src":"231:136:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"231:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"305:55:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":740,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"295:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"295:66:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"287:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":738,"name":"uint256","nodeType":"ElementaryTypeName","src":"287:7:9","typeDescriptions":{}}},"id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"287:75:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"365:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"287:79:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":737,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"279:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"279:7:9","typeDescriptions":{}}},"id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"279:88:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":750,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"399:20:9","nodeType":"VariableDeclaration","scope":824,"src":"374:58:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":748,"name":"bytes4","nodeType":"ElementaryTypeName","src":"374:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"422:10:9","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":776,"nodeType":"Block","src":"764:152:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":762,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"782:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":763,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"797:20:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"782:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"819:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""},"value":"InterfaceDetection: wrong value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""}],"id":761,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"774:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"774:79:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":767,"nodeType":"ExpressionStatement","src":"774:79:9"},{"expression":{"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":768,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"863:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":771,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"865:19:9","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":733,"src":"863:21:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":772,"indexExpression":{"id":770,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"885:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"863:34:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":773,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"900:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"863:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":775,"nodeType":"ExpressionStatement","src":"863:46:9"}]},"documentation":{"id":751,"nodeType":"StructuredDocumentation","src":"439:226:9","text":"@notice Sets or unsets an ERC165 interface.\n @dev Reverts if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":777,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"679:21:9","nodeType":"FunctionDefinition","parameters":{"id":759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":754,"mutability":"mutable","name":"s","nameLocation":"716:1:9","nodeType":"VariableDeclaration","scope":777,"src":"701:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":753,"nodeType":"UserDefinedTypeName","pathNode":{"id":752,"name":"Layout","nameLocations":["701:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"701:6:9"},"referencedDeclaration":734,"src":"701:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":756,"mutability":"mutable","name":"interfaceId","nameLocation":"726:11:9","nodeType":"VariableDeclaration","scope":777,"src":"719:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":755,"name":"bytes4","nodeType":"ElementaryTypeName","src":"719:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":758,"mutability":"mutable","name":"supported","nameLocation":"744:9:9","nodeType":"VariableDeclaration","scope":777,"src":"739:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":757,"name":"bool","nodeType":"ElementaryTypeName","src":"739:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"700:54:9"},"returnParameters":{"id":760,"nodeType":"ParameterList","parameters":[],"src":"764:0:9"},"scope":824,"src":"670:246:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":810,"nodeType":"Block","src":"1371:236:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":788,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"1385:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":789,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"1400:20:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1385:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":794,"nodeType":"IfStatement","src":"1381:78:9","trueBody":{"id":793,"nodeType":"Block","src":"1422:37:9","statements":[{"expression":{"hexValue":"66616c7365","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1443:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":787,"id":792,"nodeType":"Return","src":"1436:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":795,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"1472:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":797,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"1492:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$725_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$725_$","typeString":"type(contract IERC165)"}],"id":796,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1487:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1487:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$725","typeString":"type(contract IERC165)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1501:11:9","memberName":"interfaceId","nodeType":"MemberAccess","src":"1487:25:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1472:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":804,"nodeType":"IfStatement","src":"1468:82:9","trueBody":{"id":803,"nodeType":"Block","src":"1514:36:9","statements":[{"expression":{"hexValue":"74727565","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":787,"id":802,"nodeType":"Return","src":"1528:11:9"}]}},{"expression":{"baseExpression":{"expression":{"id":805,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"1566:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":806,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1568:19:9","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":733,"src":"1566:21:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":808,"indexExpression":{"id":807,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"1588:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1566:34:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":787,"id":809,"nodeType":"Return","src":"1559:41:9"}]},"documentation":{"id":778,"nodeType":"StructuredDocumentation","src":"922:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":811,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1276:17:9","nodeType":"FunctionDefinition","parameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":781,"mutability":"mutable","name":"s","nameLocation":"1309:1:9","nodeType":"VariableDeclaration","scope":811,"src":"1294:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":780,"nodeType":"UserDefinedTypeName","pathNode":{"id":779,"name":"Layout","nameLocations":["1294:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"1294:6:9"},"referencedDeclaration":734,"src":"1294:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":783,"mutability":"mutable","name":"interfaceId","nameLocation":"1319:11:9","nodeType":"VariableDeclaration","scope":811,"src":"1312:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":782,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1312:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1293:38:9"},"returnParameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"mutability":"mutable","name":"supported","nameLocation":"1360:9:9","nodeType":"VariableDeclaration","scope":811,"src":"1355:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":785,"name":"bool","nodeType":"ElementaryTypeName","src":"1355:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1354:16:9"},"scope":824,"src":"1267:340:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":822,"nodeType":"Block","src":"1672:115:9","statements":[{"assignments":[818],"declarations":[{"constant":false,"id":818,"mutability":"mutable","name":"position","nameLocation":"1690:8:9","nodeType":"VariableDeclaration","scope":822,"src":"1682:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":817,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1682:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":820,"initialValue":{"id":819,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"1701:19:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1682:38:9"},{"AST":{"nodeType":"YulBlock","src":"1739:42:9","statements":[{"nodeType":"YulAssignment","src":"1753:18:9","value":{"name":"position","nodeType":"YulIdentifier","src":"1763:8:9"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"1753:6:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":818,"isOffset":false,"isSlot":false,"src":"1763:8:9","valueSize":1},{"declaration":815,"isOffset":false,"isSlot":true,"src":"1753:6:9","suffix":"slot","valueSize":1}],"id":821,"nodeType":"InlineAssembly","src":"1730:51:9"}]},"id":823,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1622:6:9","nodeType":"FunctionDefinition","parameters":{"id":812,"nodeType":"ParameterList","parameters":[],"src":"1628:2:9"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"s","nameLocation":"1669:1:9","nodeType":"VariableDeclaration","scope":823,"src":"1654:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":814,"nodeType":"UserDefinedTypeName","pathNode":{"id":813,"name":"Layout","nameLocations":["1654:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"1654:6:9"},"referencedDeclaration":734,"src":"1654:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1653:18:9"},"scope":824,"src":"1613:174:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":825,"src":"111:1678:9","usedErrors":[]}],"src":"32:1758:9"},"id":9},"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol","exportedSymbols":{"ContractOwnership":[44],"Pause":[857],"PauseBase":[938],"PauseStorage":[1123]},"id":858,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":826,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","file":"./libraries/PauseStorage.sol","id":828,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":858,"sourceUnit":1124,"src":"57:58:10","symbolAliases":[{"foreign":{"id":827,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"65:12:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol","file":"./base/PauseBase.sol","id":830,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":858,"sourceUnit":939,"src":"116:47:10","symbolAliases":[{"foreign":{"id":829,"name":"PauseBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"124:9:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"../access/ContractOwnership.sol","id":832,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":858,"sourceUnit":45,"src":"164:66:10","symbolAliases":[{"foreign":{"id":831,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"172:17:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":834,"name":"PauseBase","nameLocations":["408:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"408:9:10"},"id":835,"nodeType":"InheritanceSpecifier","src":"408:9:10"},{"baseName":{"id":836,"name":"ContractOwnership","nameLocations":["419:17:10"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"419:17:10"},"id":837,"nodeType":"InheritanceSpecifier","src":"419:17:10"}],"canonicalName":"Pause","contractDependencies":[],"contractKind":"contract","documentation":{"id":833,"nodeType":"StructuredDocumentation","src":"232:149:10","text":"@title Pausing mechanism (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":857,"linearizedBaseContracts":[857,44,713,725,232,255,938,3701],"name":"Pause","nameLocation":"399:5:10","nodeType":"ContractDefinition","nodes":[{"global":false,"id":841,"libraryName":{"id":838,"name":"PauseStorage","nameLocations":["449:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":1123,"src":"449:12:10"},"nodeType":"UsingForDirective","src":"443:43:10","typeName":{"id":840,"nodeType":"UserDefinedTypeName","pathNode":{"id":839,"name":"PauseStorage.Layout","nameLocations":["466:12:10","479:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"466:19:10"},"referencedDeclaration":949,"src":"466:19:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"body":{"id":855,"nodeType":"Block","src":"696:64:10","statements":[{"expression":{"arguments":[{"id":852,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"744:8:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":847,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"706:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$1123_$","typeString":"type(library PauseStorage)"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"719:6:10","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1122,"src":"706:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"706:21:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":851,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"728:15:10","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":1001,"src":"706:37:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$949_storage_ptr_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer,bool)"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"706:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":854,"nodeType":"ExpressionStatement","src":"706:47:10"}]},"documentation":{"id":842,"nodeType":"StructuredDocumentation","src":"492:172:10","text":"@notice Initializes the storage with an initial pause state.\n @dev Emits a {Paused} event if `isPaused` is true.\n @param isPaused The initial pause state."},"id":856,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":844,"mutability":"mutable","name":"isPaused","nameLocation":"686:8:10","nodeType":"VariableDeclaration","scope":856,"src":"681:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":843,"name":"bool","nodeType":"ElementaryTypeName","src":"681:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"680:15:10"},"returnParameters":{"id":846,"nodeType":"ParameterList","parameters":[],"src":"696:0:10"},"scope":857,"src":"669:91:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":858,"src":"381:381:10","usedErrors":[]}],"src":"32:731:10"},"id":10},"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol","exportedSymbols":{"Context":[3701],"ContractOwnershipStorage":[682],"PauseBase":[938],"PauseStorage":[1123]},"id":939,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":859,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","file":"./../libraries/PauseStorage.sol","id":861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":939,"sourceUnit":1124,"src":"57:61:11","symbolAliases":[{"foreign":{"id":860,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"65:12:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":863,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":939,"sourceUnit":683,"src":"119:95:11","symbolAliases":[{"foreign":{"id":862,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"127:24:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":865,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":939,"sourceUnit":3702,"src":"215:66:11","symbolAliases":[{"foreign":{"id":864,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"223:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":867,"name":"Context","nameLocations":["522:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":3701,"src":"522:7:11"},"id":868,"nodeType":"InheritanceSpecifier","src":"522:7:11"}],"canonicalName":"PauseBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"283:208:11","text":"@title Pausing mechanism (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":938,"linearizedBaseContracts":[938,3701],"name":"PauseBase","nameLocation":"509:9:11","nodeType":"ContractDefinition","nodes":[{"global":false,"id":872,"libraryName":{"id":869,"name":"PauseStorage","nameLocations":["542:12:11"],"nodeType":"IdentifierPath","referencedDeclaration":1123,"src":"542:12:11"},"nodeType":"UsingForDirective","src":"536:43:11","typeName":{"id":871,"nodeType":"UserDefinedTypeName","pathNode":{"id":870,"name":"PauseStorage.Layout","nameLocations":["559:12:11","572:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"559:19:11"},"referencedDeclaration":949,"src":"559:19:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"global":false,"id":876,"libraryName":{"id":873,"name":"ContractOwnershipStorage","nameLocations":["590:24:11"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"590:24:11"},"nodeType":"UsingForDirective","src":"584:67:11","typeName":{"id":875,"nodeType":"UserDefinedTypeName","pathNode":{"id":874,"name":"ContractOwnershipStorage.Layout","nameLocations":["619:24:11","644:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"619:31:11"},"referencedDeclaration":499,"src":"619:31:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"anonymous":false,"documentation":{"id":877,"nodeType":"StructuredDocumentation","src":"657:48:11","text":"@notice Emitted when the pause is triggered."},"eventSelector":"9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752","id":879,"name":"Paused","nameLocation":"716:6:11","nodeType":"EventDefinition","parameters":{"id":878,"nodeType":"ParameterList","parameters":[],"src":"722:2:11"},"src":"710:15:11"},{"anonymous":false,"documentation":{"id":880,"nodeType":"StructuredDocumentation","src":"731:45:11","text":"@notice Emitted when the pause is lifted."},"eventSelector":"a45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933","id":882,"name":"Unpaused","nameLocation":"787:8:11","nodeType":"EventDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[],"src":"795:2:11"},"src":"781:17:11"},{"body":{"id":902,"nodeType":"Block","src":"1014:126:11","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":891,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1081:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1081:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":886,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1024:24:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1049:6:11","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"1024:31:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":890,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1058:22:11","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"1024:56:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:70:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":894,"nodeType":"ExpressionStatement","src":"1024:70:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":895,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"1104:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$1123_$","typeString":"type(library PauseStorage)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1117:6:11","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1122,"src":"1104:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1104:21:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":899,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1126:5:11","memberName":"pause","nodeType":"MemberAccess","referencedDeclaration":1046,"src":"1104:27:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$949_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer)"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1104:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":901,"nodeType":"ExpressionStatement","src":"1104:29:11"}]},"documentation":{"id":883,"nodeType":"StructuredDocumentation","src":"804:179:11","text":"@notice Pauses the contract.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if the contract is paused.\n @dev Emits a {Paused} event."},"functionSelector":"8456cb59","id":903,"implemented":true,"kind":"function","modifiers":[],"name":"pause","nameLocation":"997:5:11","nodeType":"FunctionDefinition","parameters":{"id":884,"nodeType":"ParameterList","parameters":[],"src":"1002:2:11"},"returnParameters":{"id":885,"nodeType":"ParameterList","parameters":[],"src":"1014:0:11"},"scope":938,"src":"988:152:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":923,"nodeType":"Block","src":"1367:128:11","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":912,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1434:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1434:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":907,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1377:24:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1402:6:11","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"1377:31:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1377:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":911,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1411:22:11","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"1377:56:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1377:70:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":915,"nodeType":"ExpressionStatement","src":"1377:70:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":916,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"1457:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$1123_$","typeString":"type(library PauseStorage)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1470:6:11","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1122,"src":"1457:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1457:21:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":920,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1479:7:11","memberName":"unpause","nodeType":"MemberAccess","referencedDeclaration":1068,"src":"1457:29:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$949_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1457:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":922,"nodeType":"ExpressionStatement","src":"1457:31:11"}]},"documentation":{"id":904,"nodeType":"StructuredDocumentation","src":"1146:188:11","text":"@notice Unpauses the contract.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if the contract is not paused.\n @dev Emits an {Unpaused} event."},"functionSelector":"3f4ba83a","id":924,"implemented":true,"kind":"function","modifiers":[],"name":"unpause","nameLocation":"1348:7:11","nodeType":"FunctionDefinition","parameters":{"id":905,"nodeType":"ParameterList","parameters":[],"src":"1355:2:11"},"returnParameters":{"id":906,"nodeType":"ParameterList","parameters":[],"src":"1367:0:11"},"scope":938,"src":"1339:156:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":936,"nodeType":"Block","src":"1662:54:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":930,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"1679:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$1123_$","typeString":"type(library PauseStorage)"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1692:6:11","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1122,"src":"1679:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:21:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":933,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1701:6:11","memberName":"paused","nodeType":"MemberAccess","referencedDeclaration":1081,"src":"1679:28:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$949_storage_ptr_$returns$_t_bool_$attached_to$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view returns (bool)"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:30:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":929,"id":935,"nodeType":"Return","src":"1672:37:11"}]},"documentation":{"id":925,"nodeType":"StructuredDocumentation","src":"1501:109:11","text":"@notice Gets the paused state of the contract.\n @return isPaused The paused state of the contract."},"functionSelector":"5c975abb","id":937,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1624:6:11","nodeType":"FunctionDefinition","parameters":{"id":926,"nodeType":"ParameterList","parameters":[],"src":"1630:2:11"},"returnParameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":937,"src":"1656:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":927,"name":"bool","nodeType":"ElementaryTypeName","src":"1656:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1655:6:11"},"scope":938,"src":"1615:101:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":939,"src":"491:1227:11","usedErrors":[]}],"src":"32:1687:11"},"id":11},"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","exportedSymbols":{"PauseStorage":[1123],"ProxyInitialization":[1162]},"id":1124,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":940,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":942,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1124,"sourceUnit":1163,"src":"57:84:12","symbolAliases":[{"foreign":{"id":941,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"65:19:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"PauseStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1123,"linearizedBaseContracts":[1123],"name":"PauseStorage","nameLocation":"151:12:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":946,"libraryName":{"id":943,"name":"PauseStorage","nameLocations":["176:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":1123,"src":"176:12:12"},"nodeType":"UsingForDirective","src":"170:43:12","typeName":{"id":945,"nodeType":"UserDefinedTypeName","pathNode":{"id":944,"name":"PauseStorage.Layout","nameLocations":["193:12:12","206:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"193:19:12"},"referencedDeclaration":949,"src":"193:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"canonicalName":"PauseStorage.Layout","id":949,"members":[{"constant":false,"id":948,"mutability":"mutable","name":"isPaused","nameLocation":"248:8:12","nodeType":"VariableDeclaration","scope":949,"src":"243:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":947,"name":"bool","nodeType":"ElementaryTypeName","src":"243:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Layout","nameLocation":"226:6:12","nodeType":"StructDefinition","scope":1123,"src":"219:44:12","visibility":"public"},{"constant":true,"id":962,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"295:19:12","nodeType":"VariableDeclaration","scope":1123,"src":"269:119:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":950,"name":"bytes32","nodeType":"ElementaryTypeName","src":"269:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6c6966656379636c652e50617573652e73746f72616765","id":956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"343:38:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f","typeString":"literal_string \"animoca.core.lifecycle.Pause.storage\""},"value":"animoca.core.lifecycle.Pause.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f","typeString":"literal_string \"animoca.core.lifecycle.Pause.storage\""}],"id":955,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"333:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"333:49:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"325:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"325:7:12","typeDescriptions":{}}},"id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"325:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"386:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"325:62:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"317:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":951,"name":"bytes32","nodeType":"ElementaryTypeName","src":"317:7:12","typeDescriptions":{}}},"id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"317:71:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":975,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"420:21:12","nodeType":"VariableDeclaration","scope":1123,"src":"394:119:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"394:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6c6966656379636c652e50617573652e7068617365","id":969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"470:36:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bee9ead429adf7e232b4f4b772a209623333b43e5466fc9b9a766da96c2ae0f","typeString":"literal_string \"animoca.core.lifecycle.Pause.phase\""},"value":"animoca.core.lifecycle.Pause.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3bee9ead429adf7e232b4f4b772a209623333b43e5466fc9b9a766da96c2ae0f","typeString":"literal_string \"animoca.core.lifecycle.Pause.phase\""}],"id":968,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"460:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"460:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"452:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":966,"name":"uint256","nodeType":"ElementaryTypeName","src":"452:7:12","typeDescriptions":{}}},"id":971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"452:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"511:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"452:60:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"444:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":964,"name":"bytes32","nodeType":"ElementaryTypeName","src":"444:7:12","typeDescriptions":{}}},"id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"444:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752","id":977,"name":"Paused","nameLocation":"526:6:12","nodeType":"EventDefinition","parameters":{"id":976,"nodeType":"ParameterList","parameters":[],"src":"532:2:12"},"src":"520:15:12"},{"anonymous":false,"eventSelector":"a45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933","id":979,"name":"Unpaused","nameLocation":"546:8:12","nodeType":"EventDefinition","parameters":{"id":978,"nodeType":"ParameterList","parameters":[],"src":"554:2:12"},"src":"540:17:12"},{"body":{"id":1000,"nodeType":"Block","src":"941:99:12","statements":[{"condition":{"id":988,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"955:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":999,"nodeType":"IfStatement","src":"951:83:12","trueBody":{"id":998,"nodeType":"Block","src":"965:69:12","statements":[{"expression":{"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":989,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"979:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":991,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"981:8:12","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":948,"src":"979:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"992:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"979:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":994,"nodeType":"ExpressionStatement","src":"979:17:12"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":995,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"1015:6:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1015:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":997,"nodeType":"EmitStatement","src":"1010:13:12"}]}}]},"documentation":{"id":980,"nodeType":"StructuredDocumentation","src":"563:306:12","text":"@notice Initializes the storage with an initial pause state (immutable version).\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits a {Paused} event if `isPaused` is true.\n @param isPaused The initial pause state."},"id":1001,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"883:15:12","nodeType":"FunctionDefinition","parameters":{"id":986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"s","nameLocation":"914:1:12","nodeType":"VariableDeclaration","scope":1001,"src":"899:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":982,"nodeType":"UserDefinedTypeName","pathNode":{"id":981,"name":"Layout","nameLocations":["899:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"899:6:12"},"referencedDeclaration":949,"src":"899:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"isPaused","nameLocation":"922:8:12","nodeType":"VariableDeclaration","scope":1001,"src":"917:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":984,"name":"bool","nodeType":"ElementaryTypeName","src":"917:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"898:33:12"},"returnParameters":{"id":987,"nodeType":"ParameterList","parameters":[],"src":"941:0:12"},"scope":1123,"src":"874:166:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1023,"nodeType":"Block","src":"1540:108:12","statements":[{"expression":{"arguments":[{"id":1013,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"1579:21:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1602:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":1010,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"1550:19:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1162_$","typeString":"type(library ProxyInitialization)"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1570:8:12","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"1550:28:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1550:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1016,"nodeType":"ExpressionStatement","src":"1550:54:12"},{"expression":{"arguments":[{"id":1020,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"1632:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1017,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"1614:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1019,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1616:15:12","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":1001,"src":"1614:17:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$949_storage_ptr_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer,bool)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1614:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1022,"nodeType":"ExpressionStatement","src":"1614:27:12"}]},"documentation":{"id":1002,"nodeType":"StructuredDocumentation","src":"1046:428:12","text":"@notice Initializes the storage with an initial pause state (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts if the proxy initialization phase is set to `1` or above.\n @dev Emits a {Paused} event if `isPaused` is true.\n @param isPaused The initial pause state."},"id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"1488:9:12","nodeType":"FunctionDefinition","parameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"mutability":"mutable","name":"s","nameLocation":"1513:1:12","nodeType":"VariableDeclaration","scope":1024,"src":"1498:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1004,"nodeType":"UserDefinedTypeName","pathNode":{"id":1003,"name":"Layout","nameLocations":["1498:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"1498:6:12"},"referencedDeclaration":949,"src":"1498:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"isPaused","nameLocation":"1521:8:12","nodeType":"VariableDeclaration","scope":1024,"src":"1516:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1006,"name":"bool","nodeType":"ElementaryTypeName","src":"1516:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1497:33:12"},"returnParameters":{"id":1009,"nodeType":"ParameterList","parameters":[],"src":"1540:0:12"},"scope":1123,"src":"1479:169:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1045,"nodeType":"Block","src":"1818:89:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1031,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"1828:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1033,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1830:18:12","memberName":"enforceIsNotPaused","nodeType":"MemberAccess","referencedDeclaration":1110,"src":"1828:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$949_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view"}},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1035,"nodeType":"ExpressionStatement","src":"1828:22:12"},{"expression":{"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1036,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"1860:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1038,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1862:8:12","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":948,"src":"1860:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1873:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1860:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1041,"nodeType":"ExpressionStatement","src":"1860:17:12"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1042,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"1892:6:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1892:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1044,"nodeType":"EmitStatement","src":"1887:13:12"}]},"documentation":{"id":1025,"nodeType":"StructuredDocumentation","src":"1654:117:12","text":"@notice Pauses the contract.\n @dev Reverts if the contract is paused.\n @dev Emits a {Paused} event."},"id":1046,"implemented":true,"kind":"function","modifiers":[],"name":"pause","nameLocation":"1785:5:12","nodeType":"FunctionDefinition","parameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"s","nameLocation":"1806:1:12","nodeType":"VariableDeclaration","scope":1046,"src":"1791:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1027,"nodeType":"UserDefinedTypeName","pathNode":{"id":1026,"name":"Layout","nameLocations":["1791:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"1791:6:12"},"referencedDeclaration":949,"src":"1791:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"1790:18:12"},"returnParameters":{"id":1030,"nodeType":"ParameterList","parameters":[],"src":"1818:0:12"},"scope":1123,"src":"1776:131:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1067,"nodeType":"Block","src":"2088:89:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1053,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"2098:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1055,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2100:15:12","memberName":"enforceIsPaused","nodeType":"MemberAccess","referencedDeclaration":1095,"src":"2098:17:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$949_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2098:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1057,"nodeType":"ExpressionStatement","src":"2098:19:12"},{"expression":{"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1058,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"2127:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1060,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2129:8:12","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":948,"src":"2127:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2140:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2127:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1063,"nodeType":"ExpressionStatement","src":"2127:18:12"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1064,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"2160:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2160:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1066,"nodeType":"EmitStatement","src":"2155:15:12"}]},"documentation":{"id":1047,"nodeType":"StructuredDocumentation","src":"1913:126:12","text":"@notice Unpauses the contract.\n @dev Reverts if the contract is not paused.\n @dev Emits an {Unpaused} event."},"id":1068,"implemented":true,"kind":"function","modifiers":[],"name":"unpause","nameLocation":"2053:7:12","nodeType":"FunctionDefinition","parameters":{"id":1051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1050,"mutability":"mutable","name":"s","nameLocation":"2076:1:12","nodeType":"VariableDeclaration","scope":1068,"src":"2061:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1049,"nodeType":"UserDefinedTypeName","pathNode":{"id":1048,"name":"Layout","nameLocations":["2061:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"2061:6:12"},"referencedDeclaration":949,"src":"2061:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2060:18:12"},"returnParameters":{"id":1052,"nodeType":"ParameterList","parameters":[],"src":"2088:0:12"},"scope":1123,"src":"2044:133:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1080,"nodeType":"Block","src":"2369:34:12","statements":[{"expression":{"expression":{"id":1077,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"2386:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1078,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2388:8:12","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":948,"src":"2386:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1076,"id":1079,"nodeType":"Return","src":"2379:17:12"}]},"documentation":{"id":1069,"nodeType":"StructuredDocumentation","src":"2183:109:12","text":"@notice Gets the paused state of the contract.\n @return isPaused The paused state of the contract."},"id":1081,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"2306:6:12","nodeType":"FunctionDefinition","parameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1072,"mutability":"mutable","name":"s","nameLocation":"2328:1:12","nodeType":"VariableDeclaration","scope":1081,"src":"2313:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1071,"nodeType":"UserDefinedTypeName","pathNode":{"id":1070,"name":"Layout","nameLocations":["2313:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"2313:6:12"},"referencedDeclaration":949,"src":"2313:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2312:18:12"},"returnParameters":{"id":1076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1075,"mutability":"mutable","name":"isPaused","nameLocation":"2359:8:12","nodeType":"VariableDeclaration","scope":1081,"src":"2354:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1074,"name":"bool","nodeType":"ElementaryTypeName","src":"2354:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2353:15:12"},"scope":1123,"src":"2297:106:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1094,"nodeType":"Block","src":"2571:57:12","statements":[{"expression":{"arguments":[{"expression":{"id":1089,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"2589:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1090,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2591:8:12","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":948,"src":"2589:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617573653a206e6f7420706175736564","id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2601:19:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2","typeString":"literal_string \"Pause: not paused\""},"value":"Pause: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2","typeString":"literal_string \"Pause: not paused\""}],"id":1088,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2581:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2581:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1093,"nodeType":"ExpressionStatement","src":"2581:40:12"}]},"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"2409:100:12","text":"@notice Ensures that the contract is paused.\n @dev Reverts if the contract is not paused."},"id":1095,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsPaused","nameLocation":"2523:15:12","nodeType":"FunctionDefinition","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"s","nameLocation":"2554:1:12","nodeType":"VariableDeclaration","scope":1095,"src":"2539:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1084,"nodeType":"UserDefinedTypeName","pathNode":{"id":1083,"name":"Layout","nameLocations":["2539:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"2539:6:12"},"referencedDeclaration":949,"src":"2539:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2538:18:12"},"returnParameters":{"id":1087,"nodeType":"ParameterList","parameters":[],"src":"2571:0:12"},"scope":1123,"src":"2514:114:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1109,"nodeType":"Block","src":"2799:54:12","statements":[{"expression":{"arguments":[{"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2817:11:12","subExpression":{"expression":{"id":1103,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"2818:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1104,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2820:8:12","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":948,"src":"2818:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617573653a20706175736564","id":1106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2830:15:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3","typeString":"literal_string \"Pause: paused\""},"value":"Pause: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3","typeString":"literal_string \"Pause: paused\""}],"id":1102,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2809:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2809:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1108,"nodeType":"ExpressionStatement","src":"2809:37:12"}]},"documentation":{"id":1096,"nodeType":"StructuredDocumentation","src":"2634:100:12","text":"@notice Ensures that the contract is not paused.\n @dev Reverts if the contract is paused."},"id":1110,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsNotPaused","nameLocation":"2748:18:12","nodeType":"FunctionDefinition","parameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"s","nameLocation":"2782:1:12","nodeType":"VariableDeclaration","scope":1110,"src":"2767:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1098,"nodeType":"UserDefinedTypeName","pathNode":{"id":1097,"name":"Layout","nameLocations":["2767:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"2767:6:12"},"referencedDeclaration":949,"src":"2767:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2766:18:12"},"returnParameters":{"id":1101,"nodeType":"ParameterList","parameters":[],"src":"2799:0:12"},"scope":1123,"src":"2739:114:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1121,"nodeType":"Block","src":"2918:115:12","statements":[{"assignments":[1117],"declarations":[{"constant":false,"id":1117,"mutability":"mutable","name":"position","nameLocation":"2936:8:12","nodeType":"VariableDeclaration","scope":1121,"src":"2928:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2928:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1119,"initialValue":{"id":1118,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"2947:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2928:38:12"},{"AST":{"nodeType":"YulBlock","src":"2985:42:12","statements":[{"nodeType":"YulAssignment","src":"2999:18:12","value":{"name":"position","nodeType":"YulIdentifier","src":"3009:8:12"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"2999:6:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1117,"isOffset":false,"isSlot":false,"src":"3009:8:12","valueSize":1},{"declaration":1114,"isOffset":false,"isSlot":true,"src":"2999:6:12","suffix":"slot","valueSize":1}],"id":1120,"nodeType":"InlineAssembly","src":"2976:51:12"}]},"id":1122,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"2868:6:12","nodeType":"FunctionDefinition","parameters":{"id":1111,"nodeType":"ParameterList","parameters":[],"src":"2874:2:12"},"returnParameters":{"id":1115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1114,"mutability":"mutable","name":"s","nameLocation":"2915:1:12","nodeType":"VariableDeclaration","scope":1122,"src":"2900:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1113,"nodeType":"UserDefinedTypeName","pathNode":{"id":1112,"name":"Layout","nameLocations":["2900:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"2900:6:12"},"referencedDeclaration":949,"src":"2900:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2899:18:12"},"scope":1123,"src":"2859:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1124,"src":"143:2892:12","usedErrors":[]}],"src":"32:3004:12"},"id":12},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"ProxyInitialization":[1162],"StorageSlot":[3811]},"id":1163,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1125,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:13"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":1127,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1163,"sourceUnit":3812,"src":"57:74:13","symbolAliases":[{"foreign":{"id":1126,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"65:11:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":1128,"nodeType":"StructuredDocumentation","src":"133:92:13","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":1162,"linearizedBaseContracts":[1162],"name":"ProxyInitialization","nameLocation":"233:19:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":1160,"nodeType":"Block","src":"600:216:13","statements":[{"assignments":[1140],"declarations":[{"constant":false,"id":1140,"mutability":"mutable","name":"currentVersion","nameLocation":"642:14:13","nodeType":"VariableDeclaration","scope":1160,"src":"610:46:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3716_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1139,"nodeType":"UserDefinedTypeName","pathNode":{"id":1138,"name":"StorageSlot.Uint256Slot","nameLocations":["610:11:13","622:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3716,"src":"610:23:13"},"referencedDeclaration":3716,"src":"610:23:13","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3716_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":1145,"initialValue":{"arguments":[{"id":1143,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"686:11:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1141,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"659:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3811_$","typeString":"type(library StorageSlot)"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"671:14:13","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":3766,"src":"659:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$3716_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"659:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3716_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"610:88:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1147,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"716:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3716_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1148,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"731:5:13","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3715,"src":"716:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1149,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"739:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"716:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53746f726167653a2070686173652072656163686564","id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"746:24:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""},"value":"Storage: phase reached"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""}],"id":1146,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"708:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"708:63:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1153,"nodeType":"ExpressionStatement","src":"708:63:13"},{"expression":{"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1154,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"781:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3716_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1156,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"796:5:13","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3715,"src":"781:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1157,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"804:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"781:28:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1159,"nodeType":"ExpressionStatement","src":"781:28:13"}]},"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"259:273:13","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":1161,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"546:8:13","nodeType":"FunctionDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"storageSlot","nameLocation":"563:11:13","nodeType":"VariableDeclaration","scope":1161,"src":"555:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"555:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"phase","nameLocation":"584:5:13","nodeType":"VariableDeclaration","scope":1161,"src":"576:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1132,"name":"uint256","nodeType":"ElementaryTypeName","src":"576:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"554:36:13"},"returnParameters":{"id":1135,"nodeType":"ParameterList","parameters":[],"src":"600:0:13"},"scope":1162,"src":"537:279:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1163,"src":"225:593:13","usedErrors":[]}],"src":"32:787:13"},"id":13},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol","exportedSymbols":{"ERC1155":[1186],"ERC1155Base":[1424],"ERC1155Storage":[3089],"InterfaceDetection":[713]},"id":1187,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1164,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:14"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","file":"./libraries/ERC1155Storage.sol","id":1166,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1187,"sourceUnit":3090,"src":"57:62:14","symbolAliases":[{"foreign":{"id":1165,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"65:14:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155Base.sol","file":"./base/ERC1155Base.sol","id":1168,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1187,"sourceUnit":1425,"src":"120:51:14","symbolAliases":[{"foreign":{"id":1167,"name":"ERC1155Base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"128:11:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":1170,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1187,"sourceUnit":714,"src":"172:80:14","symbolAliases":[{"foreign":{"id":1169,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"180:18:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1172,"name":"ERC1155Base","nameLocations":["443:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1424,"src":"443:11:14"},"id":1173,"nodeType":"InheritanceSpecifier","src":"443:11:14"},{"baseName":{"id":1174,"name":"InterfaceDetection","nameLocations":["456:18:14"],"nodeType":"IdentifierPath","referencedDeclaration":713,"src":"456:18:14"},"id":1175,"nodeType":"InheritanceSpecifier","src":"456:18:14"}],"canonicalName":"ERC1155","contractDependencies":[],"contractKind":"contract","documentation":{"id":1171,"nodeType":"StructuredDocumentation","src":"254:160:14","text":"@title ERC1155 Multi Token Standard (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1186,"linearizedBaseContracts":[1186,713,725,1424,1809,3701],"name":"ERC1155","nameLocation":"432:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":1184,"nodeType":"Block","src":"572:38:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1179,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"582:14:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"597:4:14","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":2058,"src":"582:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"582:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1183,"nodeType":"ExpressionStatement","src":"582:21:14"}]},"documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"481:72:14","text":"@notice Marks the following ERC165 interfaces as supported: ERC1155."},"id":1185,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[],"src":"569:2:14"},"returnParameters":{"id":1178,"nodeType":"ParameterList","parameters":[],"src":"572:0:14"},"scope":1186,"src":"558:52:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1187,"src":"414:198:14","usedErrors":[]}],"src":"32:581:14"},"id":14},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol","exportedSymbols":{"ERC1155Burnable":[1206],"ERC1155BurnableBase":[1492],"ERC1155Storage":[3089]},"id":1207,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1188,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:15"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","file":"./libraries/ERC1155Storage.sol","id":1190,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1207,"sourceUnit":3090,"src":"57:62:15","symbolAliases":[{"foreign":{"id":1189,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"65:14:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155BurnableBase.sol","file":"./base/ERC1155BurnableBase.sol","id":1192,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1207,"sourceUnit":1493,"src":"120:67:15","symbolAliases":[{"foreign":{"id":1191,"name":"ERC1155BurnableBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"128:19:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1194,"name":"ERC1155BurnableBase","nameLocations":["416:19:15"],"nodeType":"IdentifierPath","referencedDeclaration":1492,"src":"416:19:15"},"id":1195,"nodeType":"InheritanceSpecifier","src":"416:19:15"}],"canonicalName":"ERC1155Burnable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"189:190:15","text":"@title ERC1155 Multi Token Standard, optional extension: Burnable (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1206,"linearizedBaseContracts":[1206,1492,1835,3701],"name":"ERC1155Burnable","nameLocation":"397:15:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":1204,"nodeType":"Block","src":"541:53:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1199,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"551:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"566:19:15","memberName":"initERC1155Burnable","nodeType":"MemberAccess","referencedDeclaration":2126,"src":"551:34:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"551:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1203,"nodeType":"ExpressionStatement","src":"551:36:15"}]},"documentation":{"id":1196,"nodeType":"StructuredDocumentation","src":"442:80:15","text":"@notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Burnable"},"id":1205,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1197,"nodeType":"ParameterList","parameters":[],"src":"538:2:15"},"returnParameters":{"id":1198,"nodeType":"ParameterList","parameters":[],"src":"541:0:15"},"scope":1206,"src":"527:67:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1207,"src":"379:217:15","usedErrors":[]}],"src":"32:565:15"},"id":15},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol","exportedSymbols":{"ContractOwnership":[44],"ERC1155MetadataURIWithBaseURI":[1236],"ERC1155MetadataURIWithBaseURIBase":[1581],"ERC1155Storage":[3089],"TokenMetadataWithBaseURIStorage":[3192]},"id":1237,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1208,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:16"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","file":"./libraries/ERC1155Storage.sol","id":1210,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1237,"sourceUnit":3090,"src":"57:62:16","symbolAliases":[{"foreign":{"id":1209,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"65:14:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol","file":"./../metadata/libraries/TokenMetadataWithBaseURIStorage.sol","id":1212,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1237,"sourceUnit":3193,"src":"120:108:16","symbolAliases":[{"foreign":{"id":1211,"name":"TokenMetadataWithBaseURIStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"128:31:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol","file":"./base/ERC1155MetadataURIWithBaseURIBase.sol","id":1214,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1237,"sourceUnit":1582,"src":"229:95:16","symbolAliases":[{"foreign":{"id":1213,"name":"ERC1155MetadataURIWithBaseURIBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"237:33:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../../access/ContractOwnership.sol","id":1216,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1237,"sourceUnit":45,"src":"325:71:16","symbolAliases":[{"foreign":{"id":1215,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"333:17:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1218,"name":"ERC1155MetadataURIWithBaseURIBase","nameLocations":["793:33:16"],"nodeType":"IdentifierPath","referencedDeclaration":1581,"src":"793:33:16"},"id":1219,"nodeType":"InheritanceSpecifier","src":"793:33:16"},{"baseName":{"id":1220,"name":"ContractOwnership","nameLocations":["828:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"828:17:16"},"id":1221,"nodeType":"InheritanceSpecifier","src":"828:17:16"}],"canonicalName":"ERC1155MetadataURIWithBaseURI","contractDependencies":[],"contractKind":"contract","documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"398:344:16","text":"@title ERC1155 Multi Token Standard, optional extension: MetadataURIPerToken (immutable version).\n @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":1236,"linearizedBaseContracts":[1236,44,713,725,232,255,1581,1866,3701],"name":"ERC1155MetadataURIWithBaseURI","nameLocation":"760:29:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1225,"libraryName":{"id":1222,"name":"TokenMetadataWithBaseURIStorage","nameLocations":["858:31:16"],"nodeType":"IdentifierPath","referencedDeclaration":3192,"src":"858:31:16"},"nodeType":"UsingForDirective","src":"852:81:16","typeName":{"id":1224,"nodeType":"UserDefinedTypeName","pathNode":{"id":1223,"name":"TokenMetadataWithBaseURIStorage.Layout","nameLocations":["894:31:16","926:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3105,"src":"894:38:16"},"referencedDeclaration":3105,"src":"894:38:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"}}},{"body":{"id":1234,"nodeType":"Block","src":"1041:56:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1229,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1051:14:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1066:22:16","memberName":"initERC1155MetadataURI","nodeType":"MemberAccess","referencedDeclaration":2075,"src":"1051:37:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1051:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1233,"nodeType":"ExpressionStatement","src":"1051:39:16"}]},"documentation":{"id":1226,"nodeType":"StructuredDocumentation","src":"939:83:16","text":"@notice Marks the fllowing ERC165 interface(s) as supported: ERC1155MetadataURI"},"id":1235,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1227,"nodeType":"ParameterList","parameters":[],"src":"1038:2:16"},"returnParameters":{"id":1228,"nodeType":"ParameterList","parameters":[],"src":"1041:0:16"},"scope":1236,"src":"1027:70:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1237,"src":"742:357:16","usedErrors":[]}],"src":"32:1068:16"},"id":16},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol","exportedSymbols":{"AccessControl":[11],"ERC1155Mintable":[1260],"ERC1155MintableBase":[1690],"ERC1155Storage":[3089]},"id":1261,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1238,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","file":"./libraries/ERC1155Storage.sol","id":1240,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1261,"sourceUnit":3090,"src":"57:62:17","symbolAliases":[{"foreign":{"id":1239,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"65:14:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MintableBase.sol","file":"./base/ERC1155MintableBase.sol","id":1242,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1261,"sourceUnit":1691,"src":"120:67:17","symbolAliases":[{"foreign":{"id":1241,"name":"ERC1155MintableBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"128:19:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","file":"./../../access/AccessControl.sol","id":1244,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1261,"sourceUnit":12,"src":"188:63:17","symbolAliases":[{"foreign":{"id":1243,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"196:13:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1246,"name":"ERC1155MintableBase","nameLocations":["480:19:17"],"nodeType":"IdentifierPath","referencedDeclaration":1690,"src":"480:19:17"},"id":1247,"nodeType":"InheritanceSpecifier","src":"480:19:17"},{"baseName":{"id":1248,"name":"AccessControl","nameLocations":["501:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":11,"src":"501:13:17"},"id":1249,"nodeType":"InheritanceSpecifier","src":"501:13:17"}],"canonicalName":"ERC1155Mintable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1245,"nodeType":"StructuredDocumentation","src":"253:190:17","text":"@title ERC1155 Multi Token Standard, optional extension: Mintable (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":1260,"linearizedBaseContracts":[1260,11,44,713,725,232,255,182,1690,1896,3701],"name":"ERC1155Mintable","nameLocation":"461:15:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":1258,"nodeType":"Block","src":"620:53:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1253,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"630:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"645:19:17","memberName":"initERC1155Mintable","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"630:34:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"630:36:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1257,"nodeType":"ExpressionStatement","src":"630:36:17"}]},"documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"521:80:17","text":"@notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Mintable"},"id":1259,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1251,"nodeType":"ParameterList","parameters":[],"src":"617:2:17"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[],"src":"620:0:17"},"scope":1260,"src":"606:67:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1261,"src":"443:232:17","usedErrors":[]}],"src":"32:644:17"},"id":17},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155Base.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155Base.sol","exportedSymbols":{"Context":[3701],"ERC1155Base":[1424],"ERC1155Storage":[3089],"IERC1155":[1809]},"id":1425,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1262,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","file":"./../interfaces/IERC1155.sol","id":1264,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1425,"sourceUnit":1810,"src":"57:54:18","symbolAliases":[{"foreign":{"id":1263,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"65:8:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","file":"./../libraries/ERC1155Storage.sol","id":1266,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1425,"sourceUnit":3090,"src":"112:65:18","symbolAliases":[{"foreign":{"id":1265,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"120:14:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1268,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1425,"sourceUnit":3702,"src":"178:66:18","symbolAliases":[{"foreign":{"id":1267,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"186:7:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1270,"name":"Context","nameLocations":["499:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":3701,"src":"499:7:18"},"id":1271,"nodeType":"InheritanceSpecifier","src":"499:7:18"},{"baseName":{"id":1272,"name":"IERC1155","nameLocations":["508:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1809,"src":"508:8:18"},"id":1273,"nodeType":"InheritanceSpecifier","src":"508:8:18"}],"canonicalName":"ERC1155Base","contractDependencies":[],"contractKind":"contract","documentation":{"id":1269,"nodeType":"StructuredDocumentation","src":"246:220:18","text":"@title ERC1155 Multi Token Standard (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":1424,"linearizedBaseContracts":[1424,1809,3701],"name":"ERC1155Base","nameLocation":"484:11:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1277,"libraryName":{"id":1274,"name":"ERC1155Storage","nameLocations":["529:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":3089,"src":"529:14:18"},"nodeType":"UsingForDirective","src":"523:47:18","typeName":{"id":1276,"nodeType":"UserDefinedTypeName","pathNode":{"id":1275,"name":"ERC1155Storage.Layout","nameLocations":["548:14:18","563:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"548:21:18"},"referencedDeclaration":1978,"src":"548:21:18","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}}},{"baseFunctions":[1751],"body":{"id":1306,"nodeType":"Block","src":"731:98:18","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1297,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"782:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1299,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"796:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1300,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"802:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1301,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"806:2:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"810:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1303,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"817:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1292,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"741:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"756:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"741:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"741:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"765:16:18","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2195,"src":"741:40:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$__$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,address,uint256,uint256,bytes calldata)"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"741:81:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1305,"nodeType":"ExpressionStatement","src":"741:81:18"}]},"documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"576:24:18","text":"@inheritdoc IERC1155"},"functionSelector":"f242432a","id":1307,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"614:16:18","nodeType":"FunctionDefinition","overrides":{"id":1290,"nodeType":"OverrideSpecifier","overrides":[],"src":"722:8:18"},"parameters":{"id":1289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"from","nameLocation":"639:4:18","nodeType":"VariableDeclaration","scope":1307,"src":"631:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1279,"name":"address","nodeType":"ElementaryTypeName","src":"631:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"to","nameLocation":"653:2:18","nodeType":"VariableDeclaration","scope":1307,"src":"645:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1281,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"id","nameLocation":"665:2:18","nodeType":"VariableDeclaration","scope":1307,"src":"657:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1283,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1286,"mutability":"mutable","name":"value","nameLocation":"677:5:18","nodeType":"VariableDeclaration","scope":1307,"src":"669:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1285,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1288,"mutability":"mutable","name":"data","nameLocation":"699:4:18","nodeType":"VariableDeclaration","scope":1307,"src":"684:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1287,"name":"bytes","nodeType":"ElementaryTypeName","src":"684:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"630:74:18"},"returnParameters":{"id":1291,"nodeType":"ParameterList","parameters":[],"src":"731:0:18"},"scope":1424,"src":"605:224:18","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1767],"body":{"id":1338,"nodeType":"Block","src":"1065:105:18","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1329,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1121:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1121:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1331,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"1135:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1332,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1312,"src":"1141:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1333,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"1145:3:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1334,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"1150:6:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1335,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"1158:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1324,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1075:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1090:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1075:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1075:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1328,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1099:21:18","memberName":"safeBatchTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2295,"src":"1075:45:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$__$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,address,uint256[] calldata,uint256[] calldata,bytes calldata)"}},"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1075:88:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1337,"nodeType":"ExpressionStatement","src":"1075:88:18"}]},"documentation":{"id":1308,"nodeType":"StructuredDocumentation","src":"835:24:18","text":"@inheritdoc IERC1155"},"functionSelector":"2eb2c2d6","id":1339,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"873:21:18","nodeType":"FunctionDefinition","overrides":{"id":1322,"nodeType":"OverrideSpecifier","overrides":[],"src":"1056:8:18"},"parameters":{"id":1321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1310,"mutability":"mutable","name":"from","nameLocation":"912:4:18","nodeType":"VariableDeclaration","scope":1339,"src":"904:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1309,"name":"address","nodeType":"ElementaryTypeName","src":"904:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1312,"mutability":"mutable","name":"to","nameLocation":"934:2:18","nodeType":"VariableDeclaration","scope":1339,"src":"926:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1311,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"ids","nameLocation":"965:3:18","nodeType":"VariableDeclaration","scope":1339,"src":"946:22:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1313,"name":"uint256","nodeType":"ElementaryTypeName","src":"946:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1314,"nodeType":"ArrayTypeName","src":"946:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1318,"mutability":"mutable","name":"values","nameLocation":"997:6:18","nodeType":"VariableDeclaration","scope":1339,"src":"978:25:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1316,"name":"uint256","nodeType":"ElementaryTypeName","src":"978:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1317,"nodeType":"ArrayTypeName","src":"978:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"data","nameLocation":"1028:4:18","nodeType":"VariableDeclaration","scope":1339,"src":"1013:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1319,"name":"bytes","nodeType":"ElementaryTypeName","src":"1013:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"894:144:18"},"returnParameters":{"id":1323,"nodeType":"ParameterList","parameters":[],"src":"1065:0:18"},"scope":1424,"src":"864:306:18","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1775],"body":{"id":1359,"nodeType":"Block","src":"1291:92:18","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1353,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1343:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1343:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1355,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"1357:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1356,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"1367:8:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1348,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1301:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1316:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1301:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1301:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1352,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1325:17:18","memberName":"setApprovalForAll","nodeType":"MemberAccess","referencedDeclaration":2673,"src":"1301:41:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,bool)"}},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1301:75:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1358,"nodeType":"ExpressionStatement","src":"1301:75:18"}]},"documentation":{"id":1340,"nodeType":"StructuredDocumentation","src":"1176:24:18","text":"@inheritdoc IERC1155"},"functionSelector":"a22cb465","id":1360,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1214:17:18","nodeType":"FunctionDefinition","overrides":{"id":1346,"nodeType":"OverrideSpecifier","overrides":[],"src":"1282:8:18"},"parameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"operator","nameLocation":"1240:8:18","nodeType":"VariableDeclaration","scope":1360,"src":"1232:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1341,"name":"address","nodeType":"ElementaryTypeName","src":"1232:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1344,"mutability":"mutable","name":"approved","nameLocation":"1255:8:18","nodeType":"VariableDeclaration","scope":1360,"src":"1250:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1343,"name":"bool","nodeType":"ElementaryTypeName","src":"1250:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1231:33:18"},"returnParameters":{"id":1347,"nodeType":"ParameterList","parameters":[],"src":"1291:0:18"},"scope":1424,"src":"1205:178:18","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1785],"body":{"id":1379,"nodeType":"Block","src":"1530:81:18","statements":[{"expression":{"arguments":[{"id":1375,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"1588:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1376,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"1595:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1371,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1547:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1562:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1547:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1547:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1571:16:18","memberName":"isApprovedForAll","nodeType":"MemberAccess","referencedDeclaration":2694,"src":"1547:40:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1547:57:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1370,"id":1378,"nodeType":"Return","src":"1540:64:18"}]},"documentation":{"id":1361,"nodeType":"StructuredDocumentation","src":"1389:24:18","text":"@inheritdoc IERC1155"},"functionSelector":"e985e9c5","id":1380,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"1427:16:18","nodeType":"FunctionDefinition","overrides":{"id":1367,"nodeType":"OverrideSpecifier","overrides":[],"src":"1491:8:18"},"parameters":{"id":1366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1363,"mutability":"mutable","name":"owner","nameLocation":"1452:5:18","nodeType":"VariableDeclaration","scope":1380,"src":"1444:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1362,"name":"address","nodeType":"ElementaryTypeName","src":"1444:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1365,"mutability":"mutable","name":"operator","nameLocation":"1467:8:18","nodeType":"VariableDeclaration","scope":1380,"src":"1459:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1364,"name":"address","nodeType":"ElementaryTypeName","src":"1459:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1443:33:18"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"mutability":"mutable","name":"approvedForAll","nameLocation":"1514:14:18","nodeType":"VariableDeclaration","scope":1380,"src":"1509:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1368,"name":"bool","nodeType":"ElementaryTypeName","src":"1509:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1508:21:18"},"scope":1424,"src":"1418:193:18","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1795],"body":{"id":1399,"nodeType":"Block","src":"1749:68:18","statements":[{"expression":{"arguments":[{"id":1395,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"1800:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1396,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"1807:2:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1391,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1766:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1781:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1766:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1766:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1790:9:18","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2725,"src":"1766:33:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,uint256) view returns (uint256)"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1766:44:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1390,"id":1398,"nodeType":"Return","src":"1759:51:18"}]},"documentation":{"id":1381,"nodeType":"StructuredDocumentation","src":"1617:24:18","text":"@inheritdoc IERC1155"},"functionSelector":"00fdd58e","id":1400,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1655:9:18","nodeType":"FunctionDefinition","overrides":{"id":1387,"nodeType":"OverrideSpecifier","overrides":[],"src":"1714:8:18"},"parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1383,"mutability":"mutable","name":"owner","nameLocation":"1673:5:18","nodeType":"VariableDeclaration","scope":1400,"src":"1665:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"1665:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"id","nameLocation":"1688:2:18","nodeType":"VariableDeclaration","scope":1400,"src":"1680:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1384,"name":"uint256","nodeType":"ElementaryTypeName","src":"1680:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1664:27:18"},"returnParameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"balance","nameLocation":"1740:7:18","nodeType":"VariableDeclaration","scope":1400,"src":"1732:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"1732:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1731:17:18"},"scope":1424,"src":"1646:171:18","stateMutability":"view","virtual":true,"visibility":"external"},{"baseFunctions":[1808],"body":{"id":1422,"nodeType":"Block","src":"1994:75:18","statements":[{"expression":{"arguments":[{"id":1418,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"2050:6:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":1419,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"2058:3:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1414,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"2011:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2026:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"2011:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2011:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1417,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2035:14:18","memberName":"balanceOfBatch","nodeType":"MemberAccess","referencedDeclaration":2790,"src":"2011:38:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1978_storage_ptr_$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address[] calldata,uint256[] calldata) view returns (uint256[] memory)"}},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2011:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":1413,"id":1421,"nodeType":"Return","src":"2004:58:18"}]},"documentation":{"id":1401,"nodeType":"StructuredDocumentation","src":"1823:24:18","text":"@inheritdoc IERC1155"},"functionSelector":"4e1273f4","id":1423,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"1861:14:18","nodeType":"FunctionDefinition","overrides":{"id":1409,"nodeType":"OverrideSpecifier","overrides":[],"src":"1949:8:18"},"parameters":{"id":1408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1404,"mutability":"mutable","name":"owners","nameLocation":"1895:6:18","nodeType":"VariableDeclaration","scope":1423,"src":"1876:25:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1402,"name":"address","nodeType":"ElementaryTypeName","src":"1876:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1403,"nodeType":"ArrayTypeName","src":"1876:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1407,"mutability":"mutable","name":"ids","nameLocation":"1922:3:18","nodeType":"VariableDeclaration","scope":1423,"src":"1903:22:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1405,"name":"uint256","nodeType":"ElementaryTypeName","src":"1903:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1406,"nodeType":"ArrayTypeName","src":"1903:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1875:51:18"},"returnParameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1412,"mutability":"mutable","name":"balances","nameLocation":"1984:8:18","nodeType":"VariableDeclaration","scope":1423,"src":"1967:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1410,"name":"uint256","nodeType":"ElementaryTypeName","src":"1967:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1411,"nodeType":"ArrayTypeName","src":"1967:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1966:27:18"},"scope":1424,"src":"1852:217:18","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1425,"src":"466:1605:18","usedErrors":[]}],"src":"32:2040:18"},"id":18},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155BurnableBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155BurnableBase.sol","exportedSymbols":{"Context":[3701],"ERC1155BurnableBase":[1492],"ERC1155Storage":[3089],"IERC1155Burnable":[1835]},"id":1493,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1426,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"./../interfaces/IERC1155Burnable.sol","id":1428,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1493,"sourceUnit":1836,"src":"57:70:19","symbolAliases":[{"foreign":{"id":1427,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"65:16:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","file":"./../libraries/ERC1155Storage.sol","id":1430,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1493,"sourceUnit":3090,"src":"128:65:19","symbolAliases":[{"foreign":{"id":1429,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"136:14:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1432,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1493,"sourceUnit":3702,"src":"194:66:19","symbolAliases":[{"foreign":{"id":1431,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"202:7:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1434,"name":"Context","nameLocations":["546:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3701,"src":"546:7:19"},"id":1435,"nodeType":"InheritanceSpecifier","src":"546:7:19"},{"baseName":{"id":1436,"name":"IERC1155Burnable","nameLocations":["555:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":1835,"src":"555:16:19"},"id":1437,"nodeType":"InheritanceSpecifier","src":"555:16:19"}],"canonicalName":"ERC1155BurnableBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1433,"nodeType":"StructuredDocumentation","src":"262:243:19","text":"@title ERC1155 Multi Token Standard, optional extension: Burnable (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC1155 (Multi Token Standard)."},"fullyImplemented":true,"id":1492,"linearizedBaseContracts":[1492,1835,3701],"name":"ERC1155BurnableBase","nameLocation":"523:19:19","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1441,"libraryName":{"id":1438,"name":"ERC1155Storage","nameLocations":["584:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3089,"src":"584:14:19"},"nodeType":"UsingForDirective","src":"578:47:19","typeName":{"id":1440,"nodeType":"UserDefinedTypeName","pathNode":{"id":1439,"name":"ERC1155Storage.Layout","nameLocations":["603:14:19","618:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"603:21:19"},"referencedDeclaration":1978,"src":"603:21:19","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}}},{"baseFunctions":[1822],"body":{"id":1464,"nodeType":"Block","src":"753:80:19","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1457,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"796:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"796:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1459,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"810:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1460,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"816:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1461,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"820:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1452,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"763:14:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"778:6:19","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"763:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"763:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1456,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"787:8:19","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":2562,"src":"763:32:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,uint256,uint256)"}},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"763:63:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1463,"nodeType":"ExpressionStatement","src":"763:63:19"}]},"documentation":{"id":1442,"nodeType":"StructuredDocumentation","src":"631:32:19","text":"@inheritdoc IERC1155Burnable"},"functionSelector":"124d91e5","id":1465,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"677:8:19","nodeType":"FunctionDefinition","overrides":{"id":1450,"nodeType":"OverrideSpecifier","overrides":[],"src":"744:8:19"},"parameters":{"id":1449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1444,"mutability":"mutable","name":"from","nameLocation":"694:4:19","nodeType":"VariableDeclaration","scope":1465,"src":"686:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1443,"name":"address","nodeType":"ElementaryTypeName","src":"686:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1446,"mutability":"mutable","name":"id","nameLocation":"708:2:19","nodeType":"VariableDeclaration","scope":1465,"src":"700:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1445,"name":"uint256","nodeType":"ElementaryTypeName","src":"700:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1448,"mutability":"mutable","name":"value","nameLocation":"720:5:19","nodeType":"VariableDeclaration","scope":1465,"src":"712:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1447,"name":"uint256","nodeType":"ElementaryTypeName","src":"712:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"685:41:19"},"returnParameters":{"id":1451,"nodeType":"ParameterList","parameters":[],"src":"753:0:19"},"scope":1492,"src":"668:165:19","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1834],"body":{"id":1490,"nodeType":"Block","src":"990:87:19","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1483,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1038:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1038:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1485,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"1052:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1486,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"1058:3:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1487,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"1063:6:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1478,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1000:14:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1015:6:19","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1000:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1000:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1024:13:19","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":2636,"src":"1000:37:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,uint256[] calldata,uint256[] calldata)"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1000:70:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1489,"nodeType":"ExpressionStatement","src":"1000:70:19"}]},"documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"839:32:19","text":"@inheritdoc IERC1155Burnable"},"functionSelector":"80534934","id":1491,"implemented":true,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"885:13:19","nodeType":"FunctionDefinition","overrides":{"id":1476,"nodeType":"OverrideSpecifier","overrides":[],"src":"981:8:19"},"parameters":{"id":1475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"from","nameLocation":"907:4:19","nodeType":"VariableDeclaration","scope":1491,"src":"899:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1467,"name":"address","nodeType":"ElementaryTypeName","src":"899:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"ids","nameLocation":"932:3:19","nodeType":"VariableDeclaration","scope":1491,"src":"913:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1469,"name":"uint256","nodeType":"ElementaryTypeName","src":"913:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1470,"nodeType":"ArrayTypeName","src":"913:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1474,"mutability":"mutable","name":"values","nameLocation":"956:6:19","nodeType":"VariableDeclaration","scope":1491,"src":"937:25:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1472,"name":"uint256","nodeType":"ElementaryTypeName","src":"937:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1473,"nodeType":"ArrayTypeName","src":"937:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"898:65:19"},"returnParameters":{"id":1477,"nodeType":"ParameterList","parameters":[],"src":"990:0:19"},"scope":1492,"src":"876:201:19","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":1493,"src":"505:574:19","usedErrors":[]}],"src":"32:1048:19"},"id":19},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol","exportedSymbols":{"Context":[3701],"ContractOwnershipStorage":[682],"ERC1155MetadataURIWithBaseURIBase":[1581],"ERC1155Storage":[3089],"IERC1155MetadataURI":[1866],"TokenMetadataWithBaseURIStorage":[3192]},"id":1582,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1494,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:20"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol","file":"./../interfaces/IERC1155MetadataURI.sol","id":1496,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1582,"sourceUnit":1867,"src":"57:76:20","symbolAliases":[{"foreign":{"id":1495,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"65:19:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","file":"./../libraries/ERC1155Storage.sol","id":1498,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1582,"sourceUnit":3090,"src":"134:65:20","symbolAliases":[{"foreign":{"id":1497,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"142:14:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol","file":"./../../metadata/libraries/TokenMetadataWithBaseURIStorage.sol","id":1500,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1582,"sourceUnit":3193,"src":"200:111:20","symbolAliases":[{"foreign":{"id":1499,"name":"TokenMetadataWithBaseURIStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"208:31:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../../access/libraries/ContractOwnershipStorage.sol","id":1502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1582,"sourceUnit":683,"src":"312:98:20","symbolAliases":[{"foreign":{"id":1501,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"320:24:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1504,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1582,"sourceUnit":3702,"src":"411:66:20","symbolAliases":[{"foreign":{"id":1503,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"419:7:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1506,"name":"Context","nameLocations":["1020:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":3701,"src":"1020:7:20"},"id":1507,"nodeType":"InheritanceSpecifier","src":"1020:7:20"},{"baseName":{"id":1508,"name":"IERC1155MetadataURI","nameLocations":["1029:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":1866,"src":"1029:19:20"},"id":1509,"nodeType":"InheritanceSpecifier","src":"1029:19:20"}],"canonicalName":"ERC1155MetadataURIWithBaseURIBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"479:486:20","text":"@title ERC1155 Multi Token Standard (proxiable version), optional extension: Metadata URI (proxiable version).\n @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC1155 (Multi Token Standard).\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":1581,"linearizedBaseContracts":[1581,1866,3701],"name":"ERC1155MetadataURIWithBaseURIBase","nameLocation":"983:33:20","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1513,"libraryName":{"id":1510,"name":"ERC1155Storage","nameLocations":["1061:14:20"],"nodeType":"IdentifierPath","referencedDeclaration":3089,"src":"1061:14:20"},"nodeType":"UsingForDirective","src":"1055:47:20","typeName":{"id":1512,"nodeType":"UserDefinedTypeName","pathNode":{"id":1511,"name":"ERC1155Storage.Layout","nameLocations":["1080:14:20","1095:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"1080:21:20"},"referencedDeclaration":1978,"src":"1080:21:20","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}}},{"global":false,"id":1517,"libraryName":{"id":1514,"name":"TokenMetadataWithBaseURIStorage","nameLocations":["1113:31:20"],"nodeType":"IdentifierPath","referencedDeclaration":3192,"src":"1113:31:20"},"nodeType":"UsingForDirective","src":"1107:81:20","typeName":{"id":1516,"nodeType":"UserDefinedTypeName","pathNode":{"id":1515,"name":"TokenMetadataWithBaseURIStorage.Layout","nameLocations":["1149:31:20","1181:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":3105,"src":"1149:38:20"},"referencedDeclaration":3105,"src":"1149:38:20","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"}}},{"global":false,"id":1521,"libraryName":{"id":1518,"name":"ContractOwnershipStorage","nameLocations":["1199:24:20"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"1199:24:20"},"nodeType":"UsingForDirective","src":"1193:67:20","typeName":{"id":1520,"nodeType":"UserDefinedTypeName","pathNode":{"id":1519,"name":"ContractOwnershipStorage.Layout","nameLocations":["1228:24:20","1253:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"1228:31:20"},"referencedDeclaration":499,"src":"1228:31:20","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"anonymous":false,"documentation":{"id":1522,"nodeType":"StructuredDocumentation","src":"1266:122:20","text":"@notice Emitted when the base token metadata URI is updated.\n @param baseMetadataURI The new base metadata URI."},"eventSelector":"04b1dc5c136a3ce9fded8db0ce3d3366c58764ec3a8e4c2b9e52e4ddfe5ebbf7","id":1526,"name":"BaseMetadataURISet","nameLocation":"1399:18:20","nodeType":"EventDefinition","parameters":{"id":1525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1524,"indexed":false,"mutability":"mutable","name":"baseMetadataURI","nameLocation":"1425:15:20","nodeType":"VariableDeclaration","scope":1526,"src":"1418:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1523,"name":"string","nodeType":"ElementaryTypeName","src":"1418:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1417:24:20"},"src":"1393:49:20"},{"body":{"id":1549,"nodeType":"Block","src":"1711:165:20","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1537,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1778:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1532,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1721:24:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1746:6:20","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"1721:31:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1721:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1536,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1755:22:20","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"1721:56:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1721:70:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1540,"nodeType":"ExpressionStatement","src":"1721:70:20"},{"expression":{"arguments":[{"id":1546,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"1861:7:20","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1541,"name":"TokenMetadataWithBaseURIStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"1801:31:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataWithBaseURIStorage_$3192_$","typeString":"type(library TokenMetadataWithBaseURIStorage)"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:6:20","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3191,"src":"1801:38:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3105_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataWithBaseURIStorage.Layout storage pointer)"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1801:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout storage pointer"}},"id":1545,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1842:18:20","memberName":"setBaseMetadataURI","nodeType":"MemberAccess","referencedDeclaration":3142,"src":"1801:59:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3105_storage_ptr_$_t_string_calldata_ptr_$returns$__$attached_to$_t_struct$_Layout_$3105_storage_ptr_$","typeString":"function (struct TokenMetadataWithBaseURIStorage.Layout storage pointer,string calldata)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1801:68:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1548,"nodeType":"ExpressionStatement","src":"1801:68:20"}]},"documentation":{"id":1527,"nodeType":"StructuredDocumentation","src":"1448:196:20","text":"@notice Sets the base metadata URI.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits a {BaseMetadataURISet} event.\n @param baseURI The base metadata URI."},"functionSelector":"7e518ec8","id":1550,"implemented":true,"kind":"function","modifiers":[],"name":"setBaseMetadataURI","nameLocation":"1658:18:20","nodeType":"FunctionDefinition","parameters":{"id":1530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1529,"mutability":"mutable","name":"baseURI","nameLocation":"1693:7:20","nodeType":"VariableDeclaration","scope":1550,"src":"1677:23:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":1528,"name":"string","nodeType":"ElementaryTypeName","src":"1677:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1676:25:20"},"returnParameters":{"id":1531,"nodeType":"ParameterList","parameters":[],"src":"1711:0:20"},"scope":1581,"src":"1649:227:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1562,"nodeType":"Block","src":"2046:82:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1556,"name":"TokenMetadataWithBaseURIStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"2063:31:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataWithBaseURIStorage_$3192_$","typeString":"type(library TokenMetadataWithBaseURIStorage)"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2095:6:20","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3191,"src":"2063:38:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3105_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataWithBaseURIStorage.Layout storage pointer)"}},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2063:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout storage pointer"}},"id":1559,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2104:15:20","memberName":"baseMetadataURI","nodeType":"MemberAccess","referencedDeclaration":3155,"src":"2063:56:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3105_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3105_storage_ptr_$","typeString":"function (struct TokenMetadataWithBaseURIStorage.Layout storage pointer) view returns (string memory)"}},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2063:58:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1555,"id":1561,"nodeType":"Return","src":"2056:65:20"}]},"documentation":{"id":1551,"nodeType":"StructuredDocumentation","src":"1882:86:20","text":"@notice Gets the base metadata URI.\n @return baseURI The base metadata URI."},"functionSelector":"5b2bd79e","id":1563,"implemented":true,"kind":"function","modifiers":[],"name":"baseMetadataURI","nameLocation":"1982:15:20","nodeType":"FunctionDefinition","parameters":{"id":1552,"nodeType":"ParameterList","parameters":[],"src":"1997:2:20"},"returnParameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"baseURI","nameLocation":"2037:7:20","nodeType":"VariableDeclaration","scope":1563,"src":"2023:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1553,"name":"string","nodeType":"ElementaryTypeName","src":"2023:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2022:23:20"},"scope":1581,"src":"1973:155:20","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1865],"body":{"id":1579,"nodeType":"Block","src":"2258:85:20","statements":[{"expression":{"arguments":[{"id":1576,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2333:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1572,"name":"TokenMetadataWithBaseURIStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"2275:31:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataWithBaseURIStorage_$3192_$","typeString":"type(library TokenMetadataWithBaseURIStorage)"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2307:6:20","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3191,"src":"2275:38:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3105_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataWithBaseURIStorage.Layout storage pointer)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2275:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout storage pointer"}},"id":1575,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2316:16:20","memberName":"tokenMetadataURI","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"2275:57:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3105_storage_ptr_$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3105_storage_ptr_$","typeString":"function (struct TokenMetadataWithBaseURIStorage.Layout storage pointer,uint256) view returns (string memory)"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2275:61:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1571,"id":1578,"nodeType":"Return","src":"2268:68:20"}]},"documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"2134:35:20","text":"@inheritdoc IERC1155MetadataURI"},"functionSelector":"0e89341c","id":1580,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"2183:3:20","nodeType":"FunctionDefinition","overrides":{"id":1568,"nodeType":"OverrideSpecifier","overrides":[],"src":"2213:8:20"},"parameters":{"id":1567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1566,"mutability":"mutable","name":"id","nameLocation":"2195:2:20","nodeType":"VariableDeclaration","scope":1580,"src":"2187:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1565,"name":"uint256","nodeType":"ElementaryTypeName","src":"2187:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2186:12:20"},"returnParameters":{"id":1571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"metadataURI","nameLocation":"2245:11:20","nodeType":"VariableDeclaration","scope":1580,"src":"2231:25:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1569,"name":"string","nodeType":"ElementaryTypeName","src":"2231:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2230:27:20"},"scope":1581,"src":"2174:169:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1582,"src":"965:1380:20","usedErrors":[]}],"src":"32:2314:20"},"id":20},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MintableBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MintableBase.sol","exportedSymbols":{"AccessControlStorage":[480],"Context":[3701],"ERC1155MintableBase":[1690],"ERC1155Storage":[3089],"IERC1155Mintable":[1896]},"id":1691,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1583,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:21"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"./../interfaces/IERC1155Mintable.sol","id":1585,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1691,"sourceUnit":1897,"src":"57:70:21","symbolAliases":[{"foreign":{"id":1584,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"65:16:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","file":"./../libraries/ERC1155Storage.sol","id":1587,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1691,"sourceUnit":3090,"src":"128:65:21","symbolAliases":[{"foreign":{"id":1586,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"136:14:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../../../access/libraries/AccessControlStorage.sol","id":1589,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1691,"sourceUnit":481,"src":"194:90:21","symbolAliases":[{"foreign":{"id":1588,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"202:20:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1591,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1691,"sourceUnit":3702,"src":"285:66:21","symbolAliases":[{"foreign":{"id":1590,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"293:7:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1593,"name":"Context","nameLocations":["690:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":3701,"src":"690:7:21"},"id":1594,"nodeType":"InheritanceSpecifier","src":"690:7:21"},{"baseName":{"id":1595,"name":"IERC1155Mintable","nameLocations":["699:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":1896,"src":"699:16:21"},"id":1596,"nodeType":"InheritanceSpecifier","src":"699:16:21"}],"canonicalName":"ERC1155MintableBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1592,"nodeType":"StructuredDocumentation","src":"353:296:21","text":"@title ERC1155 Multi Token Standard, optional extension: Mintable (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC1155 (Multi Token Standard).\n @dev Note: This contract requires AccessControl."},"fullyImplemented":true,"id":1690,"linearizedBaseContracts":[1690,1896,3701],"name":"ERC1155MintableBase","nameLocation":"667:19:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1600,"libraryName":{"id":1597,"name":"ERC1155Storage","nameLocations":["728:14:21"],"nodeType":"IdentifierPath","referencedDeclaration":3089,"src":"728:14:21"},"nodeType":"UsingForDirective","src":"722:47:21","typeName":{"id":1599,"nodeType":"UserDefinedTypeName","pathNode":{"id":1598,"name":"ERC1155Storage.Layout","nameLocations":["747:14:21","762:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"747:21:21"},"referencedDeclaration":1978,"src":"747:21:21","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}}},{"global":false,"id":1604,"libraryName":{"id":1601,"name":"AccessControlStorage","nameLocations":["780:20:21"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"780:20:21"},"nodeType":"UsingForDirective","src":"774:59:21","typeName":{"id":1603,"nodeType":"UserDefinedTypeName","pathNode":{"id":1602,"name":"AccessControlStorage.Layout","nameLocations":["805:20:21","826:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"805:27:21"},"referencedDeclaration":273,"src":"805:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"constant":true,"functionSelector":"d5391393","id":1607,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"863:11:21","nodeType":"VariableDeclaration","scope":1690,"src":"839:46:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1605,"name":"bytes32","nodeType":"ElementaryTypeName","src":"839:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"6d696e746572","id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"877:8:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_39eb9ec2059d897c44a17440c762c429de204f6fddd727156ca52b8da086a6f7","typeString":"literal_string \"minter\""},"value":"minter"},"visibility":"public"},{"baseFunctions":[1881],"body":{"id":1646,"nodeType":"Block","src":"1101:192:21","statements":[{"assignments":[1621],"declarations":[{"constant":false,"id":1621,"mutability":"mutable","name":"sender","nameLocation":"1119:6:21","nodeType":"VariableDeclaration","scope":1646,"src":"1111:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1620,"name":"address","nodeType":"ElementaryTypeName","src":"1111:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1624,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1622,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1128:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1128:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1111:29:21"},{"expression":{"arguments":[{"id":1630,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"1195:11:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1631,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"1208:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1625,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"1150:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1171:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"1150:27:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1150:29:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":1629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1180:14:21","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":467,"src":"1150:44:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1150:65:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1633,"nodeType":"ExpressionStatement","src":"1150:65:21"},{"expression":{"arguments":[{"id":1639,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"1258:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1640,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"1266:2:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1641,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1612,"src":"1270:2:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1642,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"1274:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1643,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"1281:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1634,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1225:14:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1240:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1225:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1225:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1249:8:21","memberName":"safeMint","nodeType":"MemberAccess","referencedDeclaration":2358,"src":"1225:32:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,uint256,uint256,bytes memory)"}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1225:61:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1645,"nodeType":"ExpressionStatement","src":"1225:61:21"}]},"documentation":{"id":1608,"nodeType":"StructuredDocumentation","src":"892:100:21","text":"@inheritdoc IERC1155Mintable\n @dev Reverts if the sender does not have the 'minter' role."},"functionSelector":"5cfa9297","id":1647,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"1006:8:21","nodeType":"FunctionDefinition","overrides":{"id":1618,"nodeType":"OverrideSpecifier","overrides":[],"src":"1092:8:21"},"parameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"to","nameLocation":"1023:2:21","nodeType":"VariableDeclaration","scope":1647,"src":"1015:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1609,"name":"address","nodeType":"ElementaryTypeName","src":"1015:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1612,"mutability":"mutable","name":"id","nameLocation":"1035:2:21","nodeType":"VariableDeclaration","scope":1647,"src":"1027:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1611,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1614,"mutability":"mutable","name":"value","nameLocation":"1047:5:21","nodeType":"VariableDeclaration","scope":1647,"src":"1039:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1613,"name":"uint256","nodeType":"ElementaryTypeName","src":"1039:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"data","nameLocation":"1069:4:21","nodeType":"VariableDeclaration","scope":1647,"src":"1054:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1615,"name":"bytes","nodeType":"ElementaryTypeName","src":"1054:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1014:60:21"},"returnParameters":{"id":1619,"nodeType":"ParameterList","parameters":[],"src":"1101:0:21"},"scope":1690,"src":"997:296:21","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1895],"body":{"id":1688,"nodeType":"Block","src":"1537:199:21","statements":[{"assignments":[1663],"declarations":[{"constant":false,"id":1663,"mutability":"mutable","name":"sender","nameLocation":"1555:6:21","nodeType":"VariableDeclaration","scope":1688,"src":"1547:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1662,"name":"address","nodeType":"ElementaryTypeName","src":"1547:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1666,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1664,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1564:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1547:29:21"},{"expression":{"arguments":[{"id":1672,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"1631:11:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1673,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"1644:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1667,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"1586:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1607:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"1586:27:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1586:29:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":1671,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1616:14:21","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":467,"src":"1586:44:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1586:65:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"1586:65:21"},{"expression":{"arguments":[{"id":1681,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"1699:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1682,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"1707:2:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1683,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"1711:3:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1684,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"1716:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1685,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"1724:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1676,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1661:14:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1676:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1661:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":1680,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1685:13:21","memberName":"safeBatchMint","nodeType":"MemberAccess","referencedDeclaration":2452,"src":"1661:37:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:68:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1687,"nodeType":"ExpressionStatement","src":"1661:68:21"}]},"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"1299:100:21","text":"@inheritdoc IERC1155Mintable\n @dev Reverts if the sender does not have the 'minter' role."},"functionSelector":"0d6a5bbb","id":1689,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchMint","nameLocation":"1413:13:21","nodeType":"FunctionDefinition","overrides":{"id":1660,"nodeType":"OverrideSpecifier","overrides":[],"src":"1528:8:21"},"parameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"to","nameLocation":"1435:2:21","nodeType":"VariableDeclaration","scope":1689,"src":"1427:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1649,"name":"address","nodeType":"ElementaryTypeName","src":"1427:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1653,"mutability":"mutable","name":"ids","nameLocation":"1458:3:21","nodeType":"VariableDeclaration","scope":1689,"src":"1439:22:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1651,"name":"uint256","nodeType":"ElementaryTypeName","src":"1439:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1652,"nodeType":"ArrayTypeName","src":"1439:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"values","nameLocation":"1482:6:21","nodeType":"VariableDeclaration","scope":1689,"src":"1463:25:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1654,"name":"uint256","nodeType":"ElementaryTypeName","src":"1463:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1655,"nodeType":"ArrayTypeName","src":"1463:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1658,"mutability":"mutable","name":"data","nameLocation":"1505:4:21","nodeType":"VariableDeclaration","scope":1689,"src":"1490:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1657,"name":"bytes","nodeType":"ElementaryTypeName","src":"1490:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1426:84:21"},"returnParameters":{"id":1661,"nodeType":"ParameterList","parameters":[],"src":"1537:0:21"},"scope":1690,"src":"1404:332:21","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":1691,"src":"649:1089:21","usedErrors":[]}],"src":"32:1707:21"},"id":21},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","exportedSymbols":{"IERC1155":[1809]},"id":1810,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1692,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":1693,"nodeType":"StructuredDocumentation","src":"57:183:22","text":"@title ERC1155 Multi Token Standard, basic interface.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26."},"fullyImplemented":false,"id":1809,"linearizedBaseContracts":[1809],"name":"IERC1155","nameLocation":"250:8:22","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1694,"nodeType":"StructuredDocumentation","src":"265:285:22","text":"@notice Emitted when some token is transferred.\n @param operator The initiator of the transfer.\n @param from The previous token owner.\n @param to The new token owner.\n @param id The transferred token identifier.\n @param value The amount of token."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":1706,"name":"TransferSingle","nameLocation":"561:14:22","nodeType":"EventDefinition","parameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1696,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"592:8:22","nodeType":"VariableDeclaration","scope":1706,"src":"576:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1695,"name":"address","nodeType":"ElementaryTypeName","src":"576:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1698,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"618:4:22","nodeType":"VariableDeclaration","scope":1706,"src":"602:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1697,"name":"address","nodeType":"ElementaryTypeName","src":"602:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1700,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"640:2:22","nodeType":"VariableDeclaration","scope":1706,"src":"624:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1699,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1702,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"652:2:22","nodeType":"VariableDeclaration","scope":1706,"src":"644:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1701,"name":"uint256","nodeType":"ElementaryTypeName","src":"644:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1704,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"664:5:22","nodeType":"VariableDeclaration","scope":1706,"src":"656:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1703,"name":"uint256","nodeType":"ElementaryTypeName","src":"656:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"575:95:22"},"src":"555:116:22"},{"anonymous":false,"documentation":{"id":1707,"nodeType":"StructuredDocumentation","src":"677:300:22","text":"@notice Emitted when a batch of tokens is transferred.\n @param operator The initiator of the transfer.\n @param from The previous tokens owner.\n @param to The new tokens owner.\n @param ids The transferred tokens identifiers.\n @param values The amounts of tokens."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":1721,"name":"TransferBatch","nameLocation":"988:13:22","nodeType":"EventDefinition","parameters":{"id":1720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1709,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1018:8:22","nodeType":"VariableDeclaration","scope":1721,"src":"1002:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1708,"name":"address","nodeType":"ElementaryTypeName","src":"1002:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1711,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1044:4:22","nodeType":"VariableDeclaration","scope":1721,"src":"1028:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1710,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1713,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1066:2:22","nodeType":"VariableDeclaration","scope":1721,"src":"1050:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1712,"name":"address","nodeType":"ElementaryTypeName","src":"1050:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1716,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1080:3:22","nodeType":"VariableDeclaration","scope":1721,"src":"1070:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1070:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1715,"nodeType":"ArrayTypeName","src":"1070:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1719,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"1095:6:22","nodeType":"VariableDeclaration","scope":1721,"src":"1085:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1717,"name":"uint256","nodeType":"ElementaryTypeName","src":"1085:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1718,"nodeType":"ArrayTypeName","src":"1085:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1001:101:22"},"src":"982:121:22"},{"anonymous":false,"documentation":{"id":1722,"nodeType":"StructuredDocumentation","src":"1109:233:22","text":"@notice Emitted when an approval for all tokens is set or unset.\n @param owner The tokens owner.\n @param operator The approved address.\n @param approved True when then approval is set, false when it is unset."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1730,"name":"ApprovalForAll","nameLocation":"1353:14:22","nodeType":"EventDefinition","parameters":{"id":1729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1724,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1384:5:22","nodeType":"VariableDeclaration","scope":1730,"src":"1368:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1723,"name":"address","nodeType":"ElementaryTypeName","src":"1368:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1726,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1407:8:22","nodeType":"VariableDeclaration","scope":1730,"src":"1391:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1725,"name":"address","nodeType":"ElementaryTypeName","src":"1391:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1728,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1422:8:22","nodeType":"VariableDeclaration","scope":1730,"src":"1417:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1727,"name":"bool","nodeType":"ElementaryTypeName","src":"1417:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1367:64:22"},"src":"1347:85:22"},{"anonymous":false,"documentation":{"id":1731,"nodeType":"StructuredDocumentation","src":"1438:149:22","text":"@notice Emitted optionally when a token metadata URI is set.\n @param value The token metadata URI.\n @param id The token identifier."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":1737,"name":"URI","nameLocation":"1598:3:22","nodeType":"EventDefinition","parameters":{"id":1736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1609:5:22","nodeType":"VariableDeclaration","scope":1737,"src":"1602:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1732,"name":"string","nodeType":"ElementaryTypeName","src":"1602:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1735,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1632:2:22","nodeType":"VariableDeclaration","scope":1737,"src":"1616:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1616:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1601:34:22"},"src":"1592:44:22"},{"documentation":{"id":1738,"nodeType":"StructuredDocumentation","src":"1642:689:22","text":"@notice Safely transfers some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits a {TransferSingle} event.\n @param from Current token owner.\n @param to Address of the new token owner.\n @param id Identifier of the token to transfer.\n @param value Amount of token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"f242432a","id":1751,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2345:16:22","nodeType":"FunctionDefinition","parameters":{"id":1749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1740,"mutability":"mutable","name":"from","nameLocation":"2370:4:22","nodeType":"VariableDeclaration","scope":1751,"src":"2362:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1739,"name":"address","nodeType":"ElementaryTypeName","src":"2362:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1742,"mutability":"mutable","name":"to","nameLocation":"2384:2:22","nodeType":"VariableDeclaration","scope":1751,"src":"2376:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1741,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1744,"mutability":"mutable","name":"id","nameLocation":"2396:2:22","nodeType":"VariableDeclaration","scope":1751,"src":"2388:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1743,"name":"uint256","nodeType":"ElementaryTypeName","src":"2388:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1746,"mutability":"mutable","name":"value","nameLocation":"2408:5:22","nodeType":"VariableDeclaration","scope":1751,"src":"2400:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1745,"name":"uint256","nodeType":"ElementaryTypeName","src":"2400:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"data","nameLocation":"2430:4:22","nodeType":"VariableDeclaration","scope":1751,"src":"2415:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1747,"name":"bytes","nodeType":"ElementaryTypeName","src":"2415:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2361:74:22"},"returnParameters":{"id":1750,"nodeType":"ParameterList","parameters":[],"src":"2444:0:22"},"scope":1809,"src":"2336:109:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1752,"nodeType":"StructuredDocumentation","src":"2451:784:22","text":"@notice Safely transfers a batch of tokens.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n @dev Emits a {TransferBatch} event.\n @param from Current tokens owner.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to transfer.\n @param values Amounts of tokens to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"2eb2c2d6","id":1767,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3249:21:22","nodeType":"FunctionDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"from","nameLocation":"3279:4:22","nodeType":"VariableDeclaration","scope":1767,"src":"3271:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1753,"name":"address","nodeType":"ElementaryTypeName","src":"3271:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1756,"mutability":"mutable","name":"to","nameLocation":"3293:2:22","nodeType":"VariableDeclaration","scope":1767,"src":"3285:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1755,"name":"address","nodeType":"ElementaryTypeName","src":"3285:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"ids","nameLocation":"3316:3:22","nodeType":"VariableDeclaration","scope":1767,"src":"3297:22:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1757,"name":"uint256","nodeType":"ElementaryTypeName","src":"3297:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1758,"nodeType":"ArrayTypeName","src":"3297:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1762,"mutability":"mutable","name":"values","nameLocation":"3340:6:22","nodeType":"VariableDeclaration","scope":1767,"src":"3321:25:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1760,"name":"uint256","nodeType":"ElementaryTypeName","src":"3321:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1761,"nodeType":"ArrayTypeName","src":"3321:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1764,"mutability":"mutable","name":"data","nameLocation":"3363:4:22","nodeType":"VariableDeclaration","scope":1767,"src":"3348:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1763,"name":"bytes","nodeType":"ElementaryTypeName","src":"3348:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3270:98:22"},"returnParameters":{"id":1766,"nodeType":"ParameterList","parameters":[],"src":"3377:0:22"},"scope":1809,"src":"3240:138:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1768,"nodeType":"StructuredDocumentation","src":"3384:234:22","text":"@notice Enables or disables an operator's approval.\n @dev Emits an {ApprovalForAll} event.\n @param operator Address of the operator.\n @param approved True to approve the operator, false to revoke its approval."},"functionSelector":"a22cb465","id":1775,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3632:17:22","nodeType":"FunctionDefinition","parameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"mutability":"mutable","name":"operator","nameLocation":"3658:8:22","nodeType":"VariableDeclaration","scope":1775,"src":"3650:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1769,"name":"address","nodeType":"ElementaryTypeName","src":"3650:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1772,"mutability":"mutable","name":"approved","nameLocation":"3673:8:22","nodeType":"VariableDeclaration","scope":1775,"src":"3668:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1771,"name":"bool","nodeType":"ElementaryTypeName","src":"3668:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3649:33:22"},"returnParameters":{"id":1774,"nodeType":"ParameterList","parameters":[],"src":"3691:0:22"},"scope":1809,"src":"3623:69:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1776,"nodeType":"StructuredDocumentation","src":"3698:254:22","text":"@notice Retrieves the approval status of an operator for a given owner.\n @param owner Address of the authorisation giver.\n @param operator Address of the operator.\n @return approved True if the operator is approved, false if not."},"functionSelector":"e985e9c5","id":1785,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3966:16:22","nodeType":"FunctionDefinition","parameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1778,"mutability":"mutable","name":"owner","nameLocation":"3991:5:22","nodeType":"VariableDeclaration","scope":1785,"src":"3983:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1777,"name":"address","nodeType":"ElementaryTypeName","src":"3983:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"operator","nameLocation":"4006:8:22","nodeType":"VariableDeclaration","scope":1785,"src":"3998:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1779,"name":"address","nodeType":"ElementaryTypeName","src":"3998:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3982:33:22"},"returnParameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"approved","nameLocation":"4044:8:22","nodeType":"VariableDeclaration","scope":1785,"src":"4039:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1782,"name":"bool","nodeType":"ElementaryTypeName","src":"4039:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4038:15:22"},"scope":1809,"src":"3957:97:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"4060:259:22","text":"@notice Retrieves the balance of `id` owned by account `owner`.\n @param owner The account to retrieve the balance of.\n @param id The identifier to retrieve the balance of.\n @return balance The balance of `id` owned by account `owner`."},"functionSelector":"00fdd58e","id":1795,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4333:9:22","nodeType":"FunctionDefinition","parameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"owner","nameLocation":"4351:5:22","nodeType":"VariableDeclaration","scope":1795,"src":"4343:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1787,"name":"address","nodeType":"ElementaryTypeName","src":"4343:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1790,"mutability":"mutable","name":"id","nameLocation":"4366:2:22","nodeType":"VariableDeclaration","scope":1795,"src":"4358:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1789,"name":"uint256","nodeType":"ElementaryTypeName","src":"4358:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4342:27:22"},"returnParameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1793,"mutability":"mutable","name":"balance","nameLocation":"4401:7:22","nodeType":"VariableDeclaration","scope":1795,"src":"4393:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1792,"name":"uint256","nodeType":"ElementaryTypeName","src":"4393:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4392:17:22"},"scope":1809,"src":"4324:86:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1796,"nodeType":"StructuredDocumentation","src":"4416:333:22","text":"@notice Retrieves the balances of `ids` owned by accounts `owners`.\n @dev Reverts if `owners` and `ids` have different lengths.\n @param owners The addresses of the token holders\n @param ids The identifiers to retrieve the balance of.\n @return balances The balances of `ids` owned by accounts `owners`."},"functionSelector":"4e1273f4","id":1808,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"4763:14:22","nodeType":"FunctionDefinition","parameters":{"id":1803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1799,"mutability":"mutable","name":"owners","nameLocation":"4797:6:22","nodeType":"VariableDeclaration","scope":1808,"src":"4778:25:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1797,"name":"address","nodeType":"ElementaryTypeName","src":"4778:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1798,"nodeType":"ArrayTypeName","src":"4778:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1802,"mutability":"mutable","name":"ids","nameLocation":"4824:3:22","nodeType":"VariableDeclaration","scope":1808,"src":"4805:22:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1800,"name":"uint256","nodeType":"ElementaryTypeName","src":"4805:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1801,"nodeType":"ArrayTypeName","src":"4805:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4777:51:22"},"returnParameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"balances","nameLocation":"4869:8:22","nodeType":"VariableDeclaration","scope":1808,"src":"4852:25:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"4852:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1805,"nodeType":"ArrayTypeName","src":"4852:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4851:27:22"},"scope":1809,"src":"4754:125:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1810,"src":"240:4641:22","usedErrors":[]}],"src":"32:4850:22"},"id":22},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","exportedSymbols":{"IERC1155Burnable":[1835]},"id":1836,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1811,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"33:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1812,"nodeType":"StructuredDocumentation","src":"58:196:23","text":"@title ERC1155 Multi Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1."},"fullyImplemented":false,"id":1835,"linearizedBaseContracts":[1835],"name":"IERC1155Burnable","nameLocation":"264:16:23","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1813,"nodeType":"StructuredDocumentation","src":"287:391:23","text":"@notice Burns some token.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param from Address of the current token owner.\n @param id Identifier of the token to burn.\n @param value Amount of token to burn."},"functionSelector":"124d91e5","id":1822,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"692:8:23","nodeType":"FunctionDefinition","parameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1815,"mutability":"mutable","name":"from","nameLocation":"709:4:23","nodeType":"VariableDeclaration","scope":1822,"src":"701:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1814,"name":"address","nodeType":"ElementaryTypeName","src":"701:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1817,"mutability":"mutable","name":"id","nameLocation":"723:2:23","nodeType":"VariableDeclaration","scope":1822,"src":"715:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1816,"name":"uint256","nodeType":"ElementaryTypeName","src":"715:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1819,"mutability":"mutable","name":"value","nameLocation":"735:5:23","nodeType":"VariableDeclaration","scope":1822,"src":"727:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1818,"name":"uint256","nodeType":"ElementaryTypeName","src":"727:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"700:41:23"},"returnParameters":{"id":1821,"nodeType":"ParameterList","parameters":[],"src":"750:0:23"},"scope":1835,"src":"683:68:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1823,"nodeType":"StructuredDocumentation","src":"757:478:23","text":"@notice Burns multiple tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param from Address of the current tokens owner.\n @param ids Identifiers of the tokens to burn.\n @param values Amounts of tokens to burn."},"functionSelector":"80534934","id":1834,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1249:13:23","nodeType":"FunctionDefinition","parameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"from","nameLocation":"1271:4:23","nodeType":"VariableDeclaration","scope":1834,"src":"1263:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1824,"name":"address","nodeType":"ElementaryTypeName","src":"1263:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"ids","nameLocation":"1296:3:23","nodeType":"VariableDeclaration","scope":1834,"src":"1277:22:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1826,"name":"uint256","nodeType":"ElementaryTypeName","src":"1277:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1827,"nodeType":"ArrayTypeName","src":"1277:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"values","nameLocation":"1320:6:23","nodeType":"VariableDeclaration","scope":1834,"src":"1301:25:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1829,"name":"uint256","nodeType":"ElementaryTypeName","src":"1301:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1830,"nodeType":"ArrayTypeName","src":"1301:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1262:65:23"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[],"src":"1336:0:23"},"scope":1835,"src":"1240:97:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1836,"src":"254:1085:23","usedErrors":[]}],"src":"33:1307:23"},"id":23},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol","exportedSymbols":{"IERC1155Deliverable":[1854]},"id":1855,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1837,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Deliverable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1838,"nodeType":"StructuredDocumentation","src":"57:199:24","text":"@title ERC1155 Multi Token Standard, optional extension: Deliverable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc."},"fullyImplemented":false,"id":1854,"linearizedBaseContracts":[1854],"name":"IERC1155Deliverable","nameLocation":"266:19:24","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1839,"nodeType":"StructuredDocumentation","src":"292:743:24","text":"@notice Safely mints tokens to multiple recipients.\n @dev Reverts if `recipients`, `ids` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if one of `recipients` balance overflows.\n @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\n @param recipients Addresses of the new tokens owners.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"e8ab9ccc","id":1853,"implemented":false,"kind":"function","modifiers":[],"name":"safeDeliver","nameLocation":"1049:11:24","nodeType":"FunctionDefinition","parameters":{"id":1851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"recipients","nameLocation":"1080:10:24","nodeType":"VariableDeclaration","scope":1853,"src":"1061:29:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1840,"name":"address","nodeType":"ElementaryTypeName","src":"1061:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1841,"nodeType":"ArrayTypeName","src":"1061:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1845,"mutability":"mutable","name":"ids","nameLocation":"1111:3:24","nodeType":"VariableDeclaration","scope":1853,"src":"1092:22:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1843,"name":"uint256","nodeType":"ElementaryTypeName","src":"1092:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1844,"nodeType":"ArrayTypeName","src":"1092:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1848,"mutability":"mutable","name":"values","nameLocation":"1135:6:24","nodeType":"VariableDeclaration","scope":1853,"src":"1116:25:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1846,"name":"uint256","nodeType":"ElementaryTypeName","src":"1116:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1847,"nodeType":"ArrayTypeName","src":"1116:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1850,"mutability":"mutable","name":"data","nameLocation":"1158:4:24","nodeType":"VariableDeclaration","scope":1853,"src":"1143:19:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1849,"name":"bytes","nodeType":"ElementaryTypeName","src":"1143:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1060:103:24"},"returnParameters":{"id":1852,"nodeType":"ParameterList","parameters":[],"src":"1172:0:24"},"scope":1854,"src":"1040:133:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1855,"src":"256:919:24","usedErrors":[]}],"src":"32:1144:24"},"id":24},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol","exportedSymbols":{"IERC1155MetadataURI":[1866]},"id":1867,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1856,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155MetadataURI","contractDependencies":[],"contractKind":"interface","documentation":{"id":1857,"nodeType":"StructuredDocumentation","src":"57:200:25","text":"@title ERC1155 Multi Token Standard, optional extension: Metadata URI.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x0e89341c."},"fullyImplemented":false,"id":1866,"linearizedBaseContracts":[1866],"name":"IERC1155MetadataURI","nameLocation":"267:19:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"293:645:25","text":"@notice Retrieves the URI for a given token.\n @dev URIs are defined in RFC 3986.\n @dev The URI MUST point to a JSON file that conforms to the \"ERC1155 Metadata URI JSON Schema\".\n @dev The uri function SHOULD be used to retrieve values if no event was emitted.\n @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\n @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\n  an implementation to return a valid string even if the token does not exist.\n @return metadataURI The URI associated to the token."},"functionSelector":"0e89341c","id":1865,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"952:3:25","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"id","nameLocation":"964:2:25","nodeType":"VariableDeclaration","scope":1865,"src":"956:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1859,"name":"uint256","nodeType":"ElementaryTypeName","src":"956:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"955:12:25"},"returnParameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"metadataURI","nameLocation":"1005:11:25","nodeType":"VariableDeclaration","scope":1865,"src":"991:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1862,"name":"string","nodeType":"ElementaryTypeName","src":"991:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"990:27:25"},"scope":1866,"src":"943:75:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1867,"src":"257:763:25","usedErrors":[]}],"src":"32:989:25"},"id":25},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","exportedSymbols":{"IERC1155Mintable":[1896]},"id":1897,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1868,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"33:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1869,"nodeType":"StructuredDocumentation","src":"58:196:26","text":"@title ERC1155 Multi Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x5190c92c."},"fullyImplemented":false,"id":1896,"linearizedBaseContracts":[1896],"name":"IERC1155Mintable","nameLocation":"264:16:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1870,"nodeType":"StructuredDocumentation","src":"287:550:26","text":"@notice Safely mints some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance of `id` overflows.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param to Address of the new token owner.\n @param id Identifier of the token to mint.\n @param value Amount of token to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"5cfa9297","id":1881,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"851:8:26","nodeType":"FunctionDefinition","parameters":{"id":1879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1872,"mutability":"mutable","name":"to","nameLocation":"868:2:26","nodeType":"VariableDeclaration","scope":1881,"src":"860:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1871,"name":"address","nodeType":"ElementaryTypeName","src":"860:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1874,"mutability":"mutable","name":"id","nameLocation":"880:2:26","nodeType":"VariableDeclaration","scope":1881,"src":"872:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1873,"name":"uint256","nodeType":"ElementaryTypeName","src":"872:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1876,"mutability":"mutable","name":"value","nameLocation":"892:5:26","nodeType":"VariableDeclaration","scope":1881,"src":"884:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1875,"name":"uint256","nodeType":"ElementaryTypeName","src":"884:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1878,"mutability":"mutable","name":"data","nameLocation":"914:4:26","nodeType":"VariableDeclaration","scope":1881,"src":"899:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1877,"name":"bytes","nodeType":"ElementaryTypeName","src":"899:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"859:60:26"},"returnParameters":{"id":1880,"nodeType":"ParameterList","parameters":[],"src":"928:0:26"},"scope":1896,"src":"842:87:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1882,"nodeType":"StructuredDocumentation","src":"935:644:26","text":"@notice Safely mints a batch of tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance overflows for one of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"0d6a5bbb","id":1895,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchMint","nameLocation":"1593:13:26","nodeType":"FunctionDefinition","parameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1884,"mutability":"mutable","name":"to","nameLocation":"1615:2:26","nodeType":"VariableDeclaration","scope":1895,"src":"1607:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1883,"name":"address","nodeType":"ElementaryTypeName","src":"1607:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1887,"mutability":"mutable","name":"ids","nameLocation":"1638:3:26","nodeType":"VariableDeclaration","scope":1895,"src":"1619:22:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1885,"name":"uint256","nodeType":"ElementaryTypeName","src":"1619:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1886,"nodeType":"ArrayTypeName","src":"1619:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1890,"mutability":"mutable","name":"values","nameLocation":"1662:6:26","nodeType":"VariableDeclaration","scope":1895,"src":"1643:25:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1888,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1889,"nodeType":"ArrayTypeName","src":"1643:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1892,"mutability":"mutable","name":"data","nameLocation":"1685:4:26","nodeType":"VariableDeclaration","scope":1895,"src":"1670:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1891,"name":"bytes","nodeType":"ElementaryTypeName","src":"1670:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1606:84:26"},"returnParameters":{"id":1894,"nodeType":"ParameterList","parameters":[],"src":"1699:0:26"},"scope":1896,"src":"1584:116:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1897,"src":"254:1448:26","usedErrors":[]}],"src":"33:1670:26"},"id":26},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","exportedSymbols":{"IERC1155TokenReceiver":[1934]},"id":1935,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1898,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:27"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1899,"nodeType":"StructuredDocumentation","src":"57:284:27","text":"@title ERC1155 Multi Token Standard, Tokens Receiver.\n @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0."},"fullyImplemented":false,"id":1934,"linearizedBaseContracts":[1934],"name":"IERC1155TokenReceiver","nameLocation":"351:21:27","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"379:914:27","text":"@notice Handles the receipt of a single ERC1155 token type.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it."},"functionSelector":"f23a6e61","id":1915,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1307:17:27","nodeType":"FunctionDefinition","parameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"operator","nameLocation":"1333:8:27","nodeType":"VariableDeclaration","scope":1915,"src":"1325:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1901,"name":"address","nodeType":"ElementaryTypeName","src":"1325:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1904,"mutability":"mutable","name":"from","nameLocation":"1351:4:27","nodeType":"VariableDeclaration","scope":1915,"src":"1343:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1903,"name":"address","nodeType":"ElementaryTypeName","src":"1343:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1906,"mutability":"mutable","name":"id","nameLocation":"1365:2:27","nodeType":"VariableDeclaration","scope":1915,"src":"1357:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1905,"name":"uint256","nodeType":"ElementaryTypeName","src":"1357:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1908,"mutability":"mutable","name":"value","nameLocation":"1377:5:27","nodeType":"VariableDeclaration","scope":1915,"src":"1369:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1907,"name":"uint256","nodeType":"ElementaryTypeName","src":"1369:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1910,"mutability":"mutable","name":"data","nameLocation":"1399:4:27","nodeType":"VariableDeclaration","scope":1915,"src":"1384:19:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1909,"name":"bytes","nodeType":"ElementaryTypeName","src":"1384:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1324:80:27"},"returnParameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"magicValue","nameLocation":"1430:10:27","nodeType":"VariableDeclaration","scope":1915,"src":"1423:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1912,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1423:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1422:19:27"},"scope":1934,"src":"1298:144:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1916,"nodeType":"StructuredDocumentation","src":"1448:1062:27","text":"@notice Handles the receipt of multiple ERC1155 token types.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match _values array)\n @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n @param data Additional data with no specified format\n @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it."},"functionSelector":"bc197c81","id":1933,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2524:22:27","nodeType":"FunctionDefinition","parameters":{"id":1929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1918,"mutability":"mutable","name":"operator","nameLocation":"2564:8:27","nodeType":"VariableDeclaration","scope":1933,"src":"2556:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1917,"name":"address","nodeType":"ElementaryTypeName","src":"2556:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1920,"mutability":"mutable","name":"from","nameLocation":"2590:4:27","nodeType":"VariableDeclaration","scope":1933,"src":"2582:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1919,"name":"address","nodeType":"ElementaryTypeName","src":"2582:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1923,"mutability":"mutable","name":"ids","nameLocation":"2623:3:27","nodeType":"VariableDeclaration","scope":1933,"src":"2604:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1921,"name":"uint256","nodeType":"ElementaryTypeName","src":"2604:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1922,"nodeType":"ArrayTypeName","src":"2604:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1926,"mutability":"mutable","name":"values","nameLocation":"2655:6:27","nodeType":"VariableDeclaration","scope":1933,"src":"2636:25:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1924,"name":"uint256","nodeType":"ElementaryTypeName","src":"2636:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1925,"nodeType":"ArrayTypeName","src":"2636:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1928,"mutability":"mutable","name":"data","nameLocation":"2686:4:27","nodeType":"VariableDeclaration","scope":1933,"src":"2671:19:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1927,"name":"bytes","nodeType":"ElementaryTypeName","src":"2671:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2546:150:27"},"returnParameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1931,"mutability":"mutable","name":"magicValue","nameLocation":"2722:10:27","nodeType":"VariableDeclaration","scope":1933,"src":"2715:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1930,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2715:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2714:19:27"},"scope":1934,"src":"2515:219:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1935,"src":"341:2395:27","usedErrors":[]}],"src":"32:2705:27"},"id":27},"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","exportedSymbols":{"Address":[3679],"ERC1155Storage":[3089],"IERC1155":[1809],"IERC1155Burnable":[1835],"IERC1155Deliverable":[1854],"IERC1155MetadataURI":[1866],"IERC1155Mintable":[1896],"IERC1155TokenReceiver":[1934],"InterfaceDetectionStorage":[824],"ProxyInitialization":[1162]},"id":3090,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1936,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:28"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","file":"./../interfaces/IERC1155.sol","id":1938,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":1810,"src":"57:54:28","symbolAliases":[{"foreign":{"id":1937,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"65:8:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol","file":"./../interfaces/IERC1155MetadataURI.sol","id":1940,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":1867,"src":"112:76:28","symbolAliases":[{"foreign":{"id":1939,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"120:19:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"./../interfaces/IERC1155Mintable.sol","id":1942,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":1897,"src":"189:70:28","symbolAliases":[{"foreign":{"id":1941,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"197:16:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol","file":"./../interfaces/IERC1155Deliverable.sol","id":1944,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":1855,"src":"260:76:28","symbolAliases":[{"foreign":{"id":1943,"name":"IERC1155Deliverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"268:19:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"./../interfaces/IERC1155Burnable.sol","id":1946,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":1836,"src":"337:70:28","symbolAliases":[{"foreign":{"id":1945,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"345:16:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","file":"./../interfaces/IERC1155TokenReceiver.sol","id":1948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":1935,"src":"408:80:28","symbolAliases":[{"foreign":{"id":1947,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"416:21:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":1950,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":3680,"src":"489:66:28","symbolAliases":[{"foreign":{"id":1949,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"497:7:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../../proxy/libraries/ProxyInitialization.sol","id":1952,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":1163,"src":"556:87:28","symbolAliases":[{"foreign":{"id":1951,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"564:19:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../../introspection/libraries/InterfaceDetectionStorage.sol","id":1954,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":825,"src":"644:107:28","symbolAliases":[{"foreign":{"id":1953,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"652:25:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC1155Storage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3089,"linearizedBaseContracts":[3089],"name":"ERC1155Storage","nameLocation":"761:14:28","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1957,"libraryName":{"id":1955,"name":"Address","nameLocations":["788:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":3679,"src":"788:7:28"},"nodeType":"UsingForDirective","src":"782:26:28","typeName":{"id":1956,"name":"address","nodeType":"ElementaryTypeName","src":"800:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":1961,"libraryName":{"id":1958,"name":"ERC1155Storage","nameLocations":["819:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":3089,"src":"819:14:28"},"nodeType":"UsingForDirective","src":"813:47:28","typeName":{"id":1960,"nodeType":"UserDefinedTypeName","pathNode":{"id":1959,"name":"ERC1155Storage.Layout","nameLocations":["838:14:28","853:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"838:21:28"},"referencedDeclaration":1978,"src":"838:21:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}}},{"global":false,"id":1965,"libraryName":{"id":1962,"name":"InterfaceDetectionStorage","nameLocations":["871:25:28"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"871:25:28"},"nodeType":"UsingForDirective","src":"865:69:28","typeName":{"id":1964,"nodeType":"UserDefinedTypeName","pathNode":{"id":1963,"name":"InterfaceDetectionStorage.Layout","nameLocations":["901:25:28","927:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"901:32:28"},"referencedDeclaration":734,"src":"901:32:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ERC1155Storage.Layout","id":1978,"members":[{"constant":false,"id":1971,"mutability":"mutable","name":"balances","nameLocation":"1012:8:28","nodeType":"VariableDeclaration","scope":1978,"src":"964:56:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":1970,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1966,"name":"uint256","nodeType":"ElementaryTypeName","src":"972:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"964:47:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1969,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1967,"name":"address","nodeType":"ElementaryTypeName","src":"991:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"983:27:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"1002:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"constant":false,"id":1977,"mutability":"mutable","name":"operators","nameLocation":"1075:9:28","nodeType":"VariableDeclaration","scope":1978,"src":"1030:54:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1976,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1972,"name":"address","nodeType":"ElementaryTypeName","src":"1038:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1030:44:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1975,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1973,"name":"address","nodeType":"ElementaryTypeName","src":"1057:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1049:24:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1974,"name":"bool","nodeType":"ElementaryTypeName","src":"1068:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"947:6:28","nodeType":"StructDefinition","scope":3089,"src":"940:151:28","visibility":"public"},{"constant":true,"id":1991,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"1123:19:28","nodeType":"VariableDeclaration","scope":3089,"src":"1097:120:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1979,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1097:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e455243313135352e455243313135352e73746f72616765","id":1985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1171:39:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_5ccf5846fa27a68fafc8e588671a68f5e67c2f9b56af4263806a4d71735e8613","typeString":"literal_string \"animoca.token.ERC1155.ERC1155.storage\""},"value":"animoca.token.ERC1155.ERC1155.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5ccf5846fa27a68fafc8e588671a68f5e67c2f9b56af4263806a4d71735e8613","typeString":"literal_string \"animoca.token.ERC1155.ERC1155.storage\""}],"id":1984,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1161:9:28","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1161:50:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1153:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1982,"name":"uint256","nodeType":"ElementaryTypeName","src":"1153:7:28","typeDescriptions":{}}},"id":1987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1153:59:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1215:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1153:63:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1145:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1980,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1145:7:28","typeDescriptions":{}}},"id":1990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1145:72:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":1996,"mutability":"constant","name":"ERC1155_SINGLE_RECEIVED","nameLocation":"1249:23:28","nodeType":"VariableDeclaration","scope":3089,"src":"1224:99:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1992,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1224:6:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"expression":{"expression":{"id":1993,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"1275:21:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$1934_$","typeString":"type(contract IERC1155TokenReceiver)"}},"id":1994,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1297:17:28","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1915,"src":"1275:39:28","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155TokenReceiver.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1315:8:28","memberName":"selector","nodeType":"MemberAccess","src":"1275:48:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":true,"id":2001,"mutability":"constant","name":"ERC1155_BATCH_RECEIVED","nameLocation":"1354:22:28","nodeType":"VariableDeclaration","scope":3089,"src":"1329:103:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1997,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1329:6:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"expression":{"expression":{"id":1998,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"1379:21:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$1934_$","typeString":"type(contract IERC1155TokenReceiver)"}},"id":1999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1401:22:28","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1933,"src":"1379:44:28","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155TokenReceiver.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":2000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1424:8:28","memberName":"selector","nodeType":"MemberAccess","src":"1379:53:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":2013,"name":"TransferSingle","nameLocation":"1445:14:28","nodeType":"EventDefinition","parameters":{"id":2012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2003,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1476:8:28","nodeType":"VariableDeclaration","scope":2013,"src":"1460:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2002,"name":"address","nodeType":"ElementaryTypeName","src":"1460:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2005,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1502:4:28","nodeType":"VariableDeclaration","scope":2013,"src":"1486:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2004,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2007,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1524:2:28","nodeType":"VariableDeclaration","scope":2013,"src":"1508:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2006,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2009,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"1536:2:28","nodeType":"VariableDeclaration","scope":2013,"src":"1528:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2008,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2011,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1548:5:28","nodeType":"VariableDeclaration","scope":2013,"src":"1540:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2010,"name":"uint256","nodeType":"ElementaryTypeName","src":"1540:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1459:95:28"},"src":"1439:116:28"},{"anonymous":false,"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":2027,"name":"TransferBatch","nameLocation":"1566:13:28","nodeType":"EventDefinition","parameters":{"id":2026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2015,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1596:8:28","nodeType":"VariableDeclaration","scope":2027,"src":"1580:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2014,"name":"address","nodeType":"ElementaryTypeName","src":"1580:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2017,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1622:4:28","nodeType":"VariableDeclaration","scope":2027,"src":"1606:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2016,"name":"address","nodeType":"ElementaryTypeName","src":"1606:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2019,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1644:2:28","nodeType":"VariableDeclaration","scope":2027,"src":"1628:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2018,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2022,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1658:3:28","nodeType":"VariableDeclaration","scope":2027,"src":"1648:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2020,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2021,"nodeType":"ArrayTypeName","src":"1648:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2025,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"1673:6:28","nodeType":"VariableDeclaration","scope":2027,"src":"1663:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2023,"name":"uint256","nodeType":"ElementaryTypeName","src":"1663:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2024,"nodeType":"ArrayTypeName","src":"1663:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1579:101:28"},"src":"1560:121:28"},{"anonymous":false,"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2035,"name":"ApprovalForAll","nameLocation":"1692:14:28","nodeType":"EventDefinition","parameters":{"id":2034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2029,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1723:5:28","nodeType":"VariableDeclaration","scope":2035,"src":"1707:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2028,"name":"address","nodeType":"ElementaryTypeName","src":"1707:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2031,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1746:8:28","nodeType":"VariableDeclaration","scope":2035,"src":"1730:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2030,"name":"address","nodeType":"ElementaryTypeName","src":"1730:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2033,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1761:8:28","nodeType":"VariableDeclaration","scope":2035,"src":"1756:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2032,"name":"bool","nodeType":"ElementaryTypeName","src":"1756:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1706:64:28"},"src":"1686:85:28"},{"anonymous":false,"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":2041,"name":"URI","nameLocation":"1782:3:28","nodeType":"EventDefinition","parameters":{"id":2040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2037,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1793:5:28","nodeType":"VariableDeclaration","scope":2041,"src":"1786:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2036,"name":"string","nodeType":"ElementaryTypeName","src":"1786:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2039,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1816:2:28","nodeType":"VariableDeclaration","scope":2041,"src":"1800:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2038,"name":"uint256","nodeType":"ElementaryTypeName","src":"1800:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1785:34:28"},"src":"1776:44:28"},{"body":{"id":2057,"nodeType":"Block","src":"1930:107:28","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2051,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"2002:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$1809_$","typeString":"type(contract IERC1155)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155_$1809_$","typeString":"type(contract IERC1155)"}],"id":2050,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1997:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1997:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155_$1809","typeString":"type(contract IERC1155)"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2012:11:28","memberName":"interfaceId","nodeType":"MemberAccess","src":"1997:26:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2025:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2045,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"1940:25:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1966:6:28","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"1940:32:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2049,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1975:21:28","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"1940:56:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:90:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2056,"nodeType":"ExpressionStatement","src":"1940:90:28"}]},"documentation":{"id":2042,"nodeType":"StructuredDocumentation","src":"1826:74:28","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155."},"id":2058,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1914:4:28","nodeType":"FunctionDefinition","parameters":{"id":2043,"nodeType":"ParameterList","parameters":[],"src":"1918:2:28"},"returnParameters":{"id":2044,"nodeType":"ParameterList","parameters":[],"src":"1930:0:28"},"scope":3089,"src":"1905:132:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2074,"nodeType":"Block","src":"2176:118:28","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2068,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"2248:19:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$1866_$","typeString":"type(contract IERC1155MetadataURI)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$1866_$","typeString":"type(contract IERC1155MetadataURI)"}],"id":2067,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2243:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2243:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURI_$1866","typeString":"type(contract IERC1155MetadataURI)"}},"id":2070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2269:11:28","memberName":"interfaceId","nodeType":"MemberAccess","src":"2243:37:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2282:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2062,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2186:25:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2212:6:28","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"2186:32:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2186:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2066,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2221:21:28","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"2186:56:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2186:101:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2073,"nodeType":"ExpressionStatement","src":"2186:101:28"}]},"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"2043:85:28","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI."},"id":2075,"implemented":true,"kind":"function","modifiers":[],"name":"initERC1155MetadataURI","nameLocation":"2142:22:28","nodeType":"FunctionDefinition","parameters":{"id":2060,"nodeType":"ParameterList","parameters":[],"src":"2164:2:28"},"returnParameters":{"id":2061,"nodeType":"ParameterList","parameters":[],"src":"2176:0:28"},"scope":3089,"src":"2133:161:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2091,"nodeType":"Block","src":"2427:115:28","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2085,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"2499:16:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Mintable_$1896_$","typeString":"type(contract IERC1155Mintable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155Mintable_$1896_$","typeString":"type(contract IERC1155Mintable)"}],"id":2084,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2494:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2494:22:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155Mintable_$1896","typeString":"type(contract IERC1155Mintable)"}},"id":2087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2517:11:28","memberName":"interfaceId","nodeType":"MemberAccess","src":"2494:34:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2530:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2079,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2437:25:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2463:6:28","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"2437:32:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2437:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2083,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2472:21:28","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"2437:56:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2437:98:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2090,"nodeType":"ExpressionStatement","src":"2437:98:28"}]},"documentation":{"id":2076,"nodeType":"StructuredDocumentation","src":"2300:82:28","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable."},"id":2092,"implemented":true,"kind":"function","modifiers":[],"name":"initERC1155Mintable","nameLocation":"2396:19:28","nodeType":"FunctionDefinition","parameters":{"id":2077,"nodeType":"ParameterList","parameters":[],"src":"2415:2:28"},"returnParameters":{"id":2078,"nodeType":"ParameterList","parameters":[],"src":"2427:0:28"},"scope":3089,"src":"2387:155:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2108,"nodeType":"Block","src":"2681:118:28","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2102,"name":"IERC1155Deliverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"2753:19:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Deliverable_$1854_$","typeString":"type(contract IERC1155Deliverable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155Deliverable_$1854_$","typeString":"type(contract IERC1155Deliverable)"}],"id":2101,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2748:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2748:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155Deliverable_$1854","typeString":"type(contract IERC1155Deliverable)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2774:11:28","memberName":"interfaceId","nodeType":"MemberAccess","src":"2748:37:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2787:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2096,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2691:25:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2717:6:28","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"2691:32:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2691:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2100,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2726:21:28","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"2691:56:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2691:101:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2107,"nodeType":"ExpressionStatement","src":"2691:101:28"}]},"documentation":{"id":2093,"nodeType":"StructuredDocumentation","src":"2548:85:28","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable."},"id":2109,"implemented":true,"kind":"function","modifiers":[],"name":"initERC1155Deliverable","nameLocation":"2647:22:28","nodeType":"FunctionDefinition","parameters":{"id":2094,"nodeType":"ParameterList","parameters":[],"src":"2669:2:28"},"returnParameters":{"id":2095,"nodeType":"ParameterList","parameters":[],"src":"2681:0:28"},"scope":3089,"src":"2638:161:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2125,"nodeType":"Block","src":"2932:115:28","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2119,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"3004:16:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$1835_$","typeString":"type(contract IERC1155Burnable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$1835_$","typeString":"type(contract IERC1155Burnable)"}],"id":2118,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2999:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2999:22:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155Burnable_$1835","typeString":"type(contract IERC1155Burnable)"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3022:11:28","memberName":"interfaceId","nodeType":"MemberAccess","src":"2999:34:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3035:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2113,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2942:25:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2968:6:28","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"2942:32:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2942:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2117,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2977:21:28","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"2942:56:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2942:98:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2124,"nodeType":"ExpressionStatement","src":"2942:98:28"}]},"documentation":{"id":2110,"nodeType":"StructuredDocumentation","src":"2805:82:28","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable."},"id":2126,"implemented":true,"kind":"function","modifiers":[],"name":"initERC1155Burnable","nameLocation":"2901:19:28","nodeType":"FunctionDefinition","parameters":{"id":2111,"nodeType":"ParameterList","parameters":[],"src":"2920:2:28"},"returnParameters":{"id":2112,"nodeType":"ParameterList","parameters":[],"src":"2932:0:28"},"scope":3089,"src":"2892:155:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2194,"nodeType":"Block","src":"4182:379:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2146,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"4200:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4214:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4206:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2147,"name":"address","nodeType":"ElementaryTypeName","src":"4206:7:28","typeDescriptions":{}}},"id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4206:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4200:16:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f2061646472657373283029","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4218:33:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9","typeString":"literal_string \"ERC1155: transfer to address(0)\""},"value":"ERC1155: transfer to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9","typeString":"literal_string \"ERC1155: transfer to address(0)\""}],"id":2145,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4192:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:60:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2154,"nodeType":"ExpressionStatement","src":"4192:60:28"},{"expression":{"arguments":[{"arguments":[{"id":2157,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"4284:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2158,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"4287:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2159,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4293:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2156,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4270:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4270:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206e6f6e2d617070726f7665642073656e646572","id":2161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4302:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","typeString":"literal_string \"ERC1155: non-approved sender\""},"value":"ERC1155: non-approved sender"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","typeString":"literal_string \"ERC1155: non-approved sender\""}],"id":2155,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4262:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4262:71:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2163,"nodeType":"ExpressionStatement","src":"4262:71:28"},{"expression":{"arguments":[{"id":2165,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"4359:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2166,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"4362:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2167,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"4368:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2168,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"4372:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"4376:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2164,"name":"_transferToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2918,"src":"4344:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,uint256,uint256)"}},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4344:38:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2171,"nodeType":"ExpressionStatement","src":"4344:38:28"},{"eventCall":{"arguments":[{"id":2173,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4413:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2174,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"4421:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2175,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"4427:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2176,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"4431:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"4435:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2172,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"4398:14:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4398:43:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2179,"nodeType":"EmitStatement","src":"4393:48:28"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2180,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"4456:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4459:10:28","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3367,"src":"4456:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4456:15:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2193,"nodeType":"IfStatement","src":"4452:103:28","trueBody":{"id":2192,"nodeType":"Block","src":"4473:82:28","statements":[{"expression":{"arguments":[{"id":2184,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4510:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2185,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"4518:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2186,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"4524:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2187,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"4528:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2188,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"4532:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2189,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"4539:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2183,"name":"_callOnERC1155Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"4487:22:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4487:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2191,"nodeType":"ExpressionStatement","src":"4487:57:28"}]}}]},"documentation":{"id":2127,"nodeType":"StructuredDocumentation","src":"3053:981:28","text":"@notice Safely transfers some token by a sender.\n @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `sender` is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits a {TransferSingle} event.\n @param sender The message sender.\n @param from Current token owner.\n @param to Address of the new token owner.\n @param id Identifier of the token to transfer.\n @param value Amount of token to transfer.\n @param data Optional data to send along to a receiver contract."},"id":2195,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4048:16:28","nodeType":"FunctionDefinition","parameters":{"id":2143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2130,"mutability":"mutable","name":"s","nameLocation":"4080:1:28","nodeType":"VariableDeclaration","scope":2195,"src":"4065:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2129,"nodeType":"UserDefinedTypeName","pathNode":{"id":2128,"name":"Layout","nameLocations":["4065:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"4065:6:28"},"referencedDeclaration":1978,"src":"4065:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2132,"mutability":"mutable","name":"sender","nameLocation":"4091:6:28","nodeType":"VariableDeclaration","scope":2195,"src":"4083:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2131,"name":"address","nodeType":"ElementaryTypeName","src":"4083:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2134,"mutability":"mutable","name":"from","nameLocation":"4107:4:28","nodeType":"VariableDeclaration","scope":2195,"src":"4099:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2133,"name":"address","nodeType":"ElementaryTypeName","src":"4099:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2136,"mutability":"mutable","name":"to","nameLocation":"4121:2:28","nodeType":"VariableDeclaration","scope":2195,"src":"4113:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2135,"name":"address","nodeType":"ElementaryTypeName","src":"4113:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2138,"mutability":"mutable","name":"id","nameLocation":"4133:2:28","nodeType":"VariableDeclaration","scope":2195,"src":"4125:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2137,"name":"uint256","nodeType":"ElementaryTypeName","src":"4125:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2140,"mutability":"mutable","name":"value","nameLocation":"4145:5:28","nodeType":"VariableDeclaration","scope":2195,"src":"4137:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2139,"name":"uint256","nodeType":"ElementaryTypeName","src":"4137:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2142,"mutability":"mutable","name":"data","nameLocation":"4167:4:28","nodeType":"VariableDeclaration","scope":2195,"src":"4152:19:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2141,"name":"bytes","nodeType":"ElementaryTypeName","src":"4152:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4064:108:28"},"returnParameters":{"id":2144,"nodeType":"ParameterList","parameters":[],"src":"4182:0:28"},"scope":3089,"src":"4039:522:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2294,"nodeType":"Block","src":"5891:607:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2217,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"5909:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5923:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5915:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2218,"name":"address","nodeType":"ElementaryTypeName","src":"5915:7:28","typeDescriptions":{}}},"id":2221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5915:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5909:16:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f2061646472657373283029","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5927:33:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9","typeString":"literal_string \"ERC1155: transfer to address(0)\""},"value":"ERC1155: transfer to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9","typeString":"literal_string \"ERC1155: transfer to address(0)\""}],"id":2216,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5901:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5901:60:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2225,"nodeType":"ExpressionStatement","src":"5901:60:28"},{"assignments":[2227],"declarations":[{"constant":false,"id":2227,"mutability":"mutable","name":"length","nameLocation":"5979:6:28","nodeType":"VariableDeclaration","scope":2294,"src":"5971:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"5971:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2230,"initialValue":{"expression":{"id":2228,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"5988:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5992:6:28","memberName":"length","nodeType":"MemberAccess","src":"5988:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5971:27:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2232,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"6016:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2233,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"6026:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6033:6:28","memberName":"length","nodeType":"MemberAccess","src":"6026:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6016:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e636f6e73697374656e7420617272617973","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6041:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""},"value":"ERC1155: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""}],"id":2231,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6008:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:64:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2238,"nodeType":"ExpressionStatement","src":"6008:64:28"},{"expression":{"arguments":[{"arguments":[{"id":2241,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"6105:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2242,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"6108:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2243,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"6114:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2240,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"6091:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6091:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206e6f6e2d617070726f7665642073656e646572","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6123:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","typeString":"literal_string \"ERC1155: non-approved sender\""},"value":"ERC1155: non-approved sender"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","typeString":"literal_string \"ERC1155: non-approved sender\""}],"id":2239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6083:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6083:71:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2247,"nodeType":"ExpressionStatement","src":"6083:71:28"},{"id":2271,"nodeType":"UncheckedBlock","src":"6165:147:28","statements":[{"body":{"id":2269,"nodeType":"Block","src":"6223:79:28","statements":[{"expression":{"arguments":[{"id":2258,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"6256:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2259,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"6259:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2260,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"6265:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2261,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"6269:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2263,"indexExpression":{"id":2262,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"6273:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6269:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2264,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"6277:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2266,"indexExpression":{"id":2265,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"6284:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6277:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2257,"name":"_transferToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2918,"src":"6241:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,uint256,uint256)"}},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6241:46:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2268,"nodeType":"ExpressionStatement","src":"6241:46:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2251,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"6205:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2252,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"6210:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6205:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2270,"initializationExpression":{"assignments":[2249],"declarations":[{"constant":false,"id":2249,"mutability":"mutable","name":"i","nameLocation":"6202:1:28","nodeType":"VariableDeclaration","scope":2270,"src":"6194:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2248,"name":"uint256","nodeType":"ElementaryTypeName","src":"6194:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2250,"nodeType":"VariableDeclarationStatement","src":"6194:9:28"},"loopExpression":{"expression":{"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6218:3:28","subExpression":{"id":2254,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"6220:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2256,"nodeType":"ExpressionStatement","src":"6218:3:28"},"nodeType":"ForStatement","src":"6189:113:28"}]},{"eventCall":{"arguments":[{"id":2273,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"6341:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2274,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"6349:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2275,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"6355:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2276,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"6359:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2277,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"6364:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":2272,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"6327:13:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6327:44:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2279,"nodeType":"EmitStatement","src":"6322:49:28"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2280,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"6386:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6389:10:28","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3367,"src":"6386:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6386:15:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2293,"nodeType":"IfStatement","src":"6382:110:28","trueBody":{"id":2292,"nodeType":"Block","src":"6403:89:28","statements":[{"expression":{"arguments":[{"id":2284,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"6445:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2285,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"6453:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2286,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"6459:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2287,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"6463:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2288,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"6468:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2289,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2213,"src":"6476:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2283,"name":"_callOnERC1155BatchReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"6417:27:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6417:64:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2291,"nodeType":"ExpressionStatement","src":"6417:64:28"}]}}]},"documentation":{"id":2196,"nodeType":"StructuredDocumentation","src":"4567:1085:28","text":"@notice Safely transfers a batch of tokens by a sender.\n @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `sender` is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n @dev Emits a {TransferBatch} event.\n @param sender The message sender.\n @param from Current tokens owner.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to transfer.\n @param values Amounts of tokens to transfer.\n @param data Optional data to send along to a receiver contract."},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"5666:21:28","nodeType":"FunctionDefinition","parameters":{"id":2214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2199,"mutability":"mutable","name":"s","nameLocation":"5712:1:28","nodeType":"VariableDeclaration","scope":2295,"src":"5697:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2198,"nodeType":"UserDefinedTypeName","pathNode":{"id":2197,"name":"Layout","nameLocations":["5697:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"5697:6:28"},"referencedDeclaration":1978,"src":"5697:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2201,"mutability":"mutable","name":"sender","nameLocation":"5731:6:28","nodeType":"VariableDeclaration","scope":2295,"src":"5723:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2200,"name":"address","nodeType":"ElementaryTypeName","src":"5723:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2203,"mutability":"mutable","name":"from","nameLocation":"5755:4:28","nodeType":"VariableDeclaration","scope":2295,"src":"5747:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"5747:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2205,"mutability":"mutable","name":"to","nameLocation":"5777:2:28","nodeType":"VariableDeclaration","scope":2295,"src":"5769:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2204,"name":"address","nodeType":"ElementaryTypeName","src":"5769:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2208,"mutability":"mutable","name":"ids","nameLocation":"5808:3:28","nodeType":"VariableDeclaration","scope":2295,"src":"5789:22:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2206,"name":"uint256","nodeType":"ElementaryTypeName","src":"5789:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2207,"nodeType":"ArrayTypeName","src":"5789:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2211,"mutability":"mutable","name":"values","nameLocation":"5840:6:28","nodeType":"VariableDeclaration","scope":2295,"src":"5821:25:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2209,"name":"uint256","nodeType":"ElementaryTypeName","src":"5821:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2210,"nodeType":"ArrayTypeName","src":"5821:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2213,"mutability":"mutable","name":"data","nameLocation":"5871:4:28","nodeType":"VariableDeclaration","scope":2295,"src":"5856:19:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2212,"name":"bytes","nodeType":"ElementaryTypeName","src":"5856:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5687:194:28"},"returnParameters":{"id":2215,"nodeType":"ParameterList","parameters":[],"src":"5891:0:28"},"scope":3089,"src":"5657:841:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2357,"nodeType":"Block","src":"7454:296:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7472:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7486:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7478:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2314,"name":"address","nodeType":"ElementaryTypeName","src":"7478:7:28","typeDescriptions":{}}},"id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7478:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7472:16:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f2061646472657373283029","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7490:29:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad","typeString":"literal_string \"ERC1155: mint to address(0)\""},"value":"ERC1155: mint to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad","typeString":"literal_string \"ERC1155: mint to address(0)\""}],"id":2312,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7464:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7464:56:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2321,"nodeType":"ExpressionStatement","src":"7464:56:28"},{"expression":{"arguments":[{"id":2323,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"7542:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2324,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7545:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2325,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"7549:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2326,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7553:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2322,"name":"_mintToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"7531:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,uint256,uint256)"}},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7531:28:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2328,"nodeType":"ExpressionStatement","src":"7531:28:28"},{"eventCall":{"arguments":[{"id":2330,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"7590:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7606:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2332,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7598:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2331,"name":"address","nodeType":"ElementaryTypeName","src":"7598:7:28","typeDescriptions":{}}},"id":2334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7598:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2335,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7610:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2336,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"7614:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7618:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2329,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"7575:14:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7575:49:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2339,"nodeType":"EmitStatement","src":"7570:54:28"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2340,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7639:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7642:10:28","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3367,"src":"7639:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7639:15:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2356,"nodeType":"IfStatement","src":"7635:109:28","trueBody":{"id":2355,"nodeType":"Block","src":"7656:88:28","statements":[{"expression":{"arguments":[{"id":2344,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"7693:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7709:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7701:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2345,"name":"address","nodeType":"ElementaryTypeName","src":"7701:7:28","typeDescriptions":{}}},"id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7701:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2349,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7713:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2350,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"7717:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7721:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2352,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"7728:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2343,"name":"_callOnERC1155Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"7670:22:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7670:63:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2354,"nodeType":"ExpressionStatement","src":"7670:63:28"}]}}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"6504:826:28","text":"@notice Safely mints some token by a sender.\n @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance of `id` overflows.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits a {TransferSingle} event.\n @param sender The message sender.\n @param to Address of the new token owner.\n @param id Identifier of the token to mint.\n @param value Amount of token to mint.\n @param data Optional data to send along to a receiver contract."},"id":2358,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"7344:8:28","nodeType":"FunctionDefinition","parameters":{"id":2310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"s","nameLocation":"7368:1:28","nodeType":"VariableDeclaration","scope":2358,"src":"7353:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2298,"nodeType":"UserDefinedTypeName","pathNode":{"id":2297,"name":"Layout","nameLocations":["7353:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"7353:6:28"},"referencedDeclaration":1978,"src":"7353:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"sender","nameLocation":"7379:6:28","nodeType":"VariableDeclaration","scope":2358,"src":"7371:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2300,"name":"address","nodeType":"ElementaryTypeName","src":"7371:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2303,"mutability":"mutable","name":"to","nameLocation":"7395:2:28","nodeType":"VariableDeclaration","scope":2358,"src":"7387:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2302,"name":"address","nodeType":"ElementaryTypeName","src":"7387:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2305,"mutability":"mutable","name":"id","nameLocation":"7407:2:28","nodeType":"VariableDeclaration","scope":2358,"src":"7399:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"7399:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2307,"mutability":"mutable","name":"value","nameLocation":"7419:5:28","nodeType":"VariableDeclaration","scope":2358,"src":"7411:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"7411:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2309,"mutability":"mutable","name":"data","nameLocation":"7439:4:28","nodeType":"VariableDeclaration","scope":2358,"src":"7426:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2308,"name":"bytes","nodeType":"ElementaryTypeName","src":"7426:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7352:92:28"},"returnParameters":{"id":2311,"nodeType":"ParameterList","parameters":[],"src":"7454:0:28"},"scope":3089,"src":"7335:415:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2451,"nodeType":"Block","src":"8834:523:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2378,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"8852:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8866:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8858:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2379,"name":"address","nodeType":"ElementaryTypeName","src":"8858:7:28","typeDescriptions":{}}},"id":2382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8858:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8852:16:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f2061646472657373283029","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8870:29:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad","typeString":"literal_string \"ERC1155: mint to address(0)\""},"value":"ERC1155: mint to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad","typeString":"literal_string \"ERC1155: mint to address(0)\""}],"id":2377,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8844:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8844:56:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2386,"nodeType":"ExpressionStatement","src":"8844:56:28"},{"assignments":[2388],"declarations":[{"constant":false,"id":2388,"mutability":"mutable","name":"length","nameLocation":"8918:6:28","nodeType":"VariableDeclaration","scope":2451,"src":"8910:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2387,"name":"uint256","nodeType":"ElementaryTypeName","src":"8910:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2391,"initialValue":{"expression":{"id":2389,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"8927:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8931:6:28","memberName":"length","nodeType":"MemberAccess","src":"8927:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8910:27:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2393,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8955:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2394,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"8965:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8972:6:28","memberName":"length","nodeType":"MemberAccess","src":"8965:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8955:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e636f6e73697374656e7420617272617973","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8980:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""},"value":"ERC1155: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""}],"id":2392,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8947:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8947:64:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2399,"nodeType":"ExpressionStatement","src":"8947:64:28"},{"id":2422,"nodeType":"UncheckedBlock","src":"9022:137:28","statements":[{"body":{"id":2420,"nodeType":"Block","src":"9080:69:28","statements":[{"expression":{"arguments":[{"id":2410,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"9109:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2411,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"9112:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2412,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"9116:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2414,"indexExpression":{"id":2413,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9120:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9116:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2415,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"9124:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2417,"indexExpression":{"id":2416,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9131:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9124:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2409,"name":"_mintToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"9098:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,uint256,uint256)"}},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:36:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2419,"nodeType":"ExpressionStatement","src":"9098:36:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2403,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9062:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2404,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"9067:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9062:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2421,"initializationExpression":{"assignments":[2401],"declarations":[{"constant":false,"id":2401,"mutability":"mutable","name":"i","nameLocation":"9059:1:28","nodeType":"VariableDeclaration","scope":2421,"src":"9051:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2400,"name":"uint256","nodeType":"ElementaryTypeName","src":"9051:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2402,"nodeType":"VariableDeclarationStatement","src":"9051:9:28"},"loopExpression":{"expression":{"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"9075:3:28","subExpression":{"id":2406,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9077:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2408,"nodeType":"ExpressionStatement","src":"9075:3:28"},"nodeType":"ForStatement","src":"9046:103:28"}]},{"eventCall":{"arguments":[{"id":2424,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"9188:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9204:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9196:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2425,"name":"address","nodeType":"ElementaryTypeName","src":"9196:7:28","typeDescriptions":{}}},"id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9196:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2429,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"9208:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2430,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"9212:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2431,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"9217:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":2423,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"9174:13:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9174:50:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2433,"nodeType":"EmitStatement","src":"9169:55:28"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2434,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"9239:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9242:10:28","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3367,"src":"9239:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9239:15:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2450,"nodeType":"IfStatement","src":"9235:116:28","trueBody":{"id":2449,"nodeType":"Block","src":"9256:95:28","statements":[{"expression":{"arguments":[{"id":2438,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"9298:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2440,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9306:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2439,"name":"address","nodeType":"ElementaryTypeName","src":"9306:7:28","typeDescriptions":{}}},"id":2442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9306:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2443,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"9318:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2444,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"9322:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2445,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"9327:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2446,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"9335:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2437,"name":"_callOnERC1155BatchReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"9270:27:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9270:70:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2448,"nodeType":"ExpressionStatement","src":"9270:70:28"}]}}]},"documentation":{"id":2359,"nodeType":"StructuredDocumentation","src":"7756:929:28","text":"@notice Safely mints a batch of tokens by a sender.\n @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance overflows for one of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n @dev Emits a {TransferBatch} event.\n @param sender The message sender.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"id":2452,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchMint","nameLocation":"8699:13:28","nodeType":"FunctionDefinition","parameters":{"id":2375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2362,"mutability":"mutable","name":"s","nameLocation":"8728:1:28","nodeType":"VariableDeclaration","scope":2452,"src":"8713:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2361,"nodeType":"UserDefinedTypeName","pathNode":{"id":2360,"name":"Layout","nameLocations":["8713:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"8713:6:28"},"referencedDeclaration":1978,"src":"8713:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2364,"mutability":"mutable","name":"sender","nameLocation":"8739:6:28","nodeType":"VariableDeclaration","scope":2452,"src":"8731:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2363,"name":"address","nodeType":"ElementaryTypeName","src":"8731:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2366,"mutability":"mutable","name":"to","nameLocation":"8755:2:28","nodeType":"VariableDeclaration","scope":2452,"src":"8747:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2365,"name":"address","nodeType":"ElementaryTypeName","src":"8747:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2369,"mutability":"mutable","name":"ids","nameLocation":"8776:3:28","nodeType":"VariableDeclaration","scope":2452,"src":"8759:20:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2367,"name":"uint256","nodeType":"ElementaryTypeName","src":"8759:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2368,"nodeType":"ArrayTypeName","src":"8759:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2372,"mutability":"mutable","name":"values","nameLocation":"8798:6:28","nodeType":"VariableDeclaration","scope":2452,"src":"8781:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2370,"name":"uint256","nodeType":"ElementaryTypeName","src":"8781:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2371,"nodeType":"ArrayTypeName","src":"8781:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2374,"mutability":"mutable","name":"data","nameLocation":"8819:4:28","nodeType":"VariableDeclaration","scope":2452,"src":"8806:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2373,"name":"bytes","nodeType":"ElementaryTypeName","src":"8806:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8712:112:28"},"returnParameters":{"id":2376,"nodeType":"ParameterList","parameters":[],"src":"8834:0:28"},"scope":3089,"src":"8690:667:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2518,"nodeType":"Block","src":"10612:317:28","statements":[{"assignments":[2473],"declarations":[{"constant":false,"id":2473,"mutability":"mutable","name":"length","nameLocation":"10630:6:28","nodeType":"VariableDeclaration","scope":2518,"src":"10622:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2472,"name":"uint256","nodeType":"ElementaryTypeName","src":"10622:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2476,"initialValue":{"expression":{"id":2474,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10639:10:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10650:6:28","memberName":"length","nodeType":"MemberAccess","src":"10639:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10622:34:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2478,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"10674:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2479,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"10684:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10688:6:28","memberName":"length","nodeType":"MemberAccess","src":"10684:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10674:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2482,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"10698:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2483,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"10708:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10715:6:28","memberName":"length","nodeType":"MemberAccess","src":"10708:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10698:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10674:47:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e636f6e73697374656e7420617272617973","id":2487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""},"value":"ERC1155: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""}],"id":2477,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10666:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10666:88:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2489,"nodeType":"ExpressionStatement","src":"10666:88:28"},{"id":2517,"nodeType":"UncheckedBlock","src":"10764:159:28","statements":[{"body":{"id":2515,"nodeType":"Block","src":"10822:91:28","statements":[{"expression":{"arguments":[{"id":2502,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"10851:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2503,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"10859:10:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2505,"indexExpression":{"id":2504,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"10870:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10859:13:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2506,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"10874:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2508,"indexExpression":{"id":2507,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"10878:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10874:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2509,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"10882:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2511,"indexExpression":{"id":2510,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"10889:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10882:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2512,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"10893:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2499,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"10840:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2501,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10842:8:28","memberName":"safeMint","nodeType":"MemberAccess","referencedDeclaration":2358,"src":"10840:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,uint256,uint256,bytes memory)"}},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10840:58:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2514,"nodeType":"ExpressionStatement","src":"10840:58:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2493,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"10804:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2494,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"10809:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10804:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2516,"initializationExpression":{"assignments":[2491],"declarations":[{"constant":false,"id":2491,"mutability":"mutable","name":"i","nameLocation":"10801:1:28","nodeType":"VariableDeclaration","scope":2516,"src":"10793:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2490,"name":"uint256","nodeType":"ElementaryTypeName","src":"10793:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2492,"nodeType":"VariableDeclarationStatement","src":"10793:9:28"},"loopExpression":{"expression":{"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"10817:3:28","subExpression":{"id":2496,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"10819:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2498,"nodeType":"ExpressionStatement","src":"10817:3:28"},"nodeType":"ForStatement","src":"10788:125:28"}]}]},"documentation":{"id":2453,"nodeType":"StructuredDocumentation","src":"9363:1031:28","text":"@notice Safely mints tokens to multiple recipients by a sender.\n @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts if `recipients`, `ids` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if one of `recipients` balance overflows.\n @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits a {TransferSingle} event from the zero address for each transfer.\n @param sender The message sender.\n @param recipients Addresses of the new tokens owners.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"id":2519,"implemented":true,"kind":"function","modifiers":[],"name":"safeDeliver","nameLocation":"10408:11:28","nodeType":"FunctionDefinition","parameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2456,"mutability":"mutable","name":"s","nameLocation":"10444:1:28","nodeType":"VariableDeclaration","scope":2519,"src":"10429:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2455,"nodeType":"UserDefinedTypeName","pathNode":{"id":2454,"name":"Layout","nameLocations":["10429:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"10429:6:28"},"referencedDeclaration":1978,"src":"10429:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2458,"mutability":"mutable","name":"sender","nameLocation":"10463:6:28","nodeType":"VariableDeclaration","scope":2519,"src":"10455:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2457,"name":"address","nodeType":"ElementaryTypeName","src":"10455:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"recipients","nameLocation":"10496:10:28","nodeType":"VariableDeclaration","scope":2519,"src":"10479:27:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2459,"name":"address","nodeType":"ElementaryTypeName","src":"10479:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2460,"nodeType":"ArrayTypeName","src":"10479:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2464,"mutability":"mutable","name":"ids","nameLocation":"10533:3:28","nodeType":"VariableDeclaration","scope":2519,"src":"10516:20:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"10516:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2463,"nodeType":"ArrayTypeName","src":"10516:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2467,"mutability":"mutable","name":"values","nameLocation":"10563:6:28","nodeType":"VariableDeclaration","scope":2519,"src":"10546:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2465,"name":"uint256","nodeType":"ElementaryTypeName","src":"10546:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2466,"nodeType":"ArrayTypeName","src":"10546:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2469,"mutability":"mutable","name":"data","nameLocation":"10592:4:28","nodeType":"VariableDeclaration","scope":2519,"src":"10579:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2468,"name":"bytes","nodeType":"ElementaryTypeName","src":"10579:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10419:183:28"},"returnParameters":{"id":2471,"nodeType":"ParameterList","parameters":[],"src":"10612:0:28"},"scope":3089,"src":"10399:530:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2561,"nodeType":"Block","src":"11472:194:28","statements":[{"expression":{"arguments":[{"arguments":[{"id":2536,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"11504:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2537,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"11507:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2538,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"11513:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2535,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"11490:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11490:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206e6f6e2d617070726f7665642073656e646572","id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11522:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","typeString":"literal_string \"ERC1155: non-approved sender\""},"value":"ERC1155: non-approved sender"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","typeString":"literal_string \"ERC1155: non-approved sender\""}],"id":2534,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11482:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11482:71:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2542,"nodeType":"ExpressionStatement","src":"11482:71:28"},{"expression":{"arguments":[{"id":2544,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"11574:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2545,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"11577:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2546,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"11583:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2547,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"11587:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2543,"name":"_burnToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"11563:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,uint256,uint256)"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11563:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2549,"nodeType":"ExpressionStatement","src":"11563:30:28"},{"eventCall":{"arguments":[{"id":2551,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"11623:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2552,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"11631:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11645:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11637:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2553,"name":"address","nodeType":"ElementaryTypeName","src":"11637:7:28","typeDescriptions":{}}},"id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11637:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2557,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"11649:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"11653:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2550,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"11608:14:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:51:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2560,"nodeType":"EmitStatement","src":"11603:56:28"}]},"documentation":{"id":2520,"nodeType":"StructuredDocumentation","src":"10935:430:28","text":"@notice Burns some token by a sender.\n @dev Reverts `sender` is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Emits a {TransferSingle} event.\n @param sender The message sender.\n @param from Address of the current token owner.\n @param id Identifier of the token to burn.\n @param value Amount of token to burn."},"id":2562,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"11379:8:28","nodeType":"FunctionDefinition","parameters":{"id":2532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2523,"mutability":"mutable","name":"s","nameLocation":"11403:1:28","nodeType":"VariableDeclaration","scope":2562,"src":"11388:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2522,"nodeType":"UserDefinedTypeName","pathNode":{"id":2521,"name":"Layout","nameLocations":["11388:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"11388:6:28"},"referencedDeclaration":1978,"src":"11388:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"sender","nameLocation":"11414:6:28","nodeType":"VariableDeclaration","scope":2562,"src":"11406:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2524,"name":"address","nodeType":"ElementaryTypeName","src":"11406:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2527,"mutability":"mutable","name":"from","nameLocation":"11430:4:28","nodeType":"VariableDeclaration","scope":2562,"src":"11422:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2526,"name":"address","nodeType":"ElementaryTypeName","src":"11422:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2529,"mutability":"mutable","name":"id","nameLocation":"11444:2:28","nodeType":"VariableDeclaration","scope":2562,"src":"11436:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2528,"name":"uint256","nodeType":"ElementaryTypeName","src":"11436:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2531,"mutability":"mutable","name":"value","nameLocation":"11456:5:28","nodeType":"VariableDeclaration","scope":2562,"src":"11448:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2530,"name":"uint256","nodeType":"ElementaryTypeName","src":"11448:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11387:75:28"},"returnParameters":{"id":2533,"nodeType":"ParameterList","parameters":[],"src":"11472:0:28"},"scope":3089,"src":"11370:296:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2635,"nodeType":"Block","src":"12338:416:28","statements":[{"assignments":[2580],"declarations":[{"constant":false,"id":2580,"mutability":"mutable","name":"length","nameLocation":"12356:6:28","nodeType":"VariableDeclaration","scope":2635,"src":"12348:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2579,"name":"uint256","nodeType":"ElementaryTypeName","src":"12348:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2583,"initialValue":{"expression":{"id":2581,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"12365:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12369:6:28","memberName":"length","nodeType":"MemberAccess","src":"12365:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12348:27:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2585,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"12393:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2586,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"12403:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12410:6:28","memberName":"length","nodeType":"MemberAccess","src":"12403:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12393:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e636f6e73697374656e7420617272617973","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12418:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""},"value":"ERC1155: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""}],"id":2584,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12385:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12385:64:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2591,"nodeType":"ExpressionStatement","src":"12385:64:28"},{"expression":{"arguments":[{"arguments":[{"id":2594,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"12481:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2595,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"12484:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2596,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"12490:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2593,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"12467:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12467:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206e6f6e2d617070726f7665642073656e646572","id":2598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12499:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","typeString":"literal_string \"ERC1155: non-approved sender\""},"value":"ERC1155: non-approved sender"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","typeString":"literal_string \"ERC1155: non-approved sender\""}],"id":2592,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12459:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12459:71:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2600,"nodeType":"ExpressionStatement","src":"12459:71:28"},{"id":2623,"nodeType":"UncheckedBlock","src":"12541:139:28","statements":[{"body":{"id":2621,"nodeType":"Block","src":"12599:71:28","statements":[{"expression":{"arguments":[{"id":2611,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"12628:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},{"id":2612,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"12631:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2613,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"12637:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2615,"indexExpression":{"id":2614,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"12641:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12637:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2616,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"12645:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2618,"indexExpression":{"id":2617,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"12652:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12645:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2610,"name":"_burnToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"12617:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,uint256,uint256)"}},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12617:38:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2620,"nodeType":"ExpressionStatement","src":"12617:38:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2604,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"12581:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2605,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"12586:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12581:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2622,"initializationExpression":{"assignments":[2602],"declarations":[{"constant":false,"id":2602,"mutability":"mutable","name":"i","nameLocation":"12578:1:28","nodeType":"VariableDeclaration","scope":2622,"src":"12570:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2601,"name":"uint256","nodeType":"ElementaryTypeName","src":"12570:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2603,"nodeType":"VariableDeclarationStatement","src":"12570:9:28"},"loopExpression":{"expression":{"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"12594:3:28","subExpression":{"id":2607,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"12596:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2609,"nodeType":"ExpressionStatement","src":"12594:3:28"},"nodeType":"ForStatement","src":"12565:105:28"}]},{"eventCall":{"arguments":[{"id":2625,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"12709:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2626,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"12717:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12731:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12723:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2627,"name":"address","nodeType":"ElementaryTypeName","src":"12723:7:28","typeDescriptions":{}}},"id":2630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12723:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2631,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"12735:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2632,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"12740:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":2624,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"12695:13:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12695:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2634,"nodeType":"EmitStatement","src":"12690:57:28"}]},"documentation":{"id":2563,"nodeType":"StructuredDocumentation","src":"11672:530:28","text":"@notice Burns multiple tokens by a sender.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `sender` is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param sender The message sender.\n @param from Address of the current tokens owner.\n @param ids Identifiers of the tokens to burn.\n @param values Amounts of tokens to burn."},"id":2636,"implemented":true,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"12216:13:28","nodeType":"FunctionDefinition","parameters":{"id":2577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"s","nameLocation":"12245:1:28","nodeType":"VariableDeclaration","scope":2636,"src":"12230:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2565,"nodeType":"UserDefinedTypeName","pathNode":{"id":2564,"name":"Layout","nameLocations":["12230:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"12230:6:28"},"referencedDeclaration":1978,"src":"12230:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2568,"mutability":"mutable","name":"sender","nameLocation":"12256:6:28","nodeType":"VariableDeclaration","scope":2636,"src":"12248:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2567,"name":"address","nodeType":"ElementaryTypeName","src":"12248:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2570,"mutability":"mutable","name":"from","nameLocation":"12272:4:28","nodeType":"VariableDeclaration","scope":2636,"src":"12264:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2569,"name":"address","nodeType":"ElementaryTypeName","src":"12264:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2573,"mutability":"mutable","name":"ids","nameLocation":"12297:3:28","nodeType":"VariableDeclaration","scope":2636,"src":"12278:22:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2571,"name":"uint256","nodeType":"ElementaryTypeName","src":"12278:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2572,"nodeType":"ArrayTypeName","src":"12278:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2576,"mutability":"mutable","name":"values","nameLocation":"12321:6:28","nodeType":"VariableDeclaration","scope":2636,"src":"12302:25:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2574,"name":"uint256","nodeType":"ElementaryTypeName","src":"12302:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2575,"nodeType":"ArrayTypeName","src":"12302:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12229:99:28"},"returnParameters":{"id":2578,"nodeType":"ParameterList","parameters":[],"src":"12338:0:28"},"scope":3089,"src":"12207:547:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2672,"nodeType":"Block","src":"13156:185:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2650,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"13174:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2651,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"13186:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13174:18:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2073656c662d617070726f76616c20666f7220616c6c","id":2653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13194:32:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0","typeString":"literal_string \"ERC1155: self-approval for all\""},"value":"ERC1155: self-approval for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0","typeString":"literal_string \"ERC1155: self-approval for all\""}],"id":2649,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13166:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13166:61:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2655,"nodeType":"ExpressionStatement","src":"13166:61:28"},{"expression":{"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":2656,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"13237:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2660,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13239:9:28","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1977,"src":"13237:11:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2661,"indexExpression":{"id":2658,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"13249:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13237:19:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2662,"indexExpression":{"id":2659,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"13257:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13237:29:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2663,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"13269:8:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13237:40:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2665,"nodeType":"ExpressionStatement","src":"13237:40:28"},{"eventCall":{"arguments":[{"id":2667,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"13307:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2668,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"13315:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2669,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"13325:8:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2666,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"13292:14:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13292:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2671,"nodeType":"EmitStatement","src":"13287:47:28"}]},"documentation":{"id":2637,"nodeType":"StructuredDocumentation","src":"12760:288:28","text":"@notice Enables or disables an operator's approval by a sender.\n @dev Emits an {ApprovalForAll} event.\n @param sender The message sender.\n @param operator Address of the operator.\n @param approved True to approve the operator, false to revoke its approval."},"id":2673,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"13062:17:28","nodeType":"FunctionDefinition","parameters":{"id":2647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"s","nameLocation":"13095:1:28","nodeType":"VariableDeclaration","scope":2673,"src":"13080:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2639,"nodeType":"UserDefinedTypeName","pathNode":{"id":2638,"name":"Layout","nameLocations":["13080:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"13080:6:28"},"referencedDeclaration":1978,"src":"13080:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2642,"mutability":"mutable","name":"sender","nameLocation":"13106:6:28","nodeType":"VariableDeclaration","scope":2673,"src":"13098:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2641,"name":"address","nodeType":"ElementaryTypeName","src":"13098:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2644,"mutability":"mutable","name":"operator","nameLocation":"13122:8:28","nodeType":"VariableDeclaration","scope":2673,"src":"13114:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2643,"name":"address","nodeType":"ElementaryTypeName","src":"13114:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2646,"mutability":"mutable","name":"approved","nameLocation":"13137:8:28","nodeType":"VariableDeclaration","scope":2673,"src":"13132:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2645,"name":"bool","nodeType":"ElementaryTypeName","src":"13132:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13079:67:28"},"returnParameters":{"id":2648,"nodeType":"ParameterList","parameters":[],"src":"13156:0:28"},"scope":3089,"src":"13053:288:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2693,"nodeType":"Block","src":"13721:52:28","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":2686,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"13738:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2687,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13740:9:28","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1977,"src":"13738:11:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2689,"indexExpression":{"id":2688,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"13750:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13738:18:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2691,"indexExpression":{"id":2690,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"13757:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13738:28:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2685,"id":2692,"nodeType":"Return","src":"13731:35:28"}]},"documentation":{"id":2674,"nodeType":"StructuredDocumentation","src":"13347:254:28","text":"@notice Retrieves the approval status of an operator for a given owner.\n @param owner Address of the authorisation giver.\n @param operator Address of the operator.\n @return approved True if the operator is approved, false if not."},"id":2694,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"13615:16:28","nodeType":"FunctionDefinition","parameters":{"id":2682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2677,"mutability":"mutable","name":"s","nameLocation":"13647:1:28","nodeType":"VariableDeclaration","scope":2694,"src":"13632:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2676,"nodeType":"UserDefinedTypeName","pathNode":{"id":2675,"name":"Layout","nameLocations":["13632:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"13632:6:28"},"referencedDeclaration":1978,"src":"13632:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2679,"mutability":"mutable","name":"owner","nameLocation":"13658:5:28","nodeType":"VariableDeclaration","scope":2694,"src":"13650:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2678,"name":"address","nodeType":"ElementaryTypeName","src":"13650:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2681,"mutability":"mutable","name":"operator","nameLocation":"13673:8:28","nodeType":"VariableDeclaration","scope":2694,"src":"13665:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2680,"name":"address","nodeType":"ElementaryTypeName","src":"13665:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13631:51:28"},"returnParameters":{"id":2685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2684,"mutability":"mutable","name":"approved","nameLocation":"13711:8:28","nodeType":"VariableDeclaration","scope":2694,"src":"13706:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2683,"name":"bool","nodeType":"ElementaryTypeName","src":"13706:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13705:15:28"},"scope":3089,"src":"13606:167:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2724,"nodeType":"Block","src":"14147:117:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2708,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"14165:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14182:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14174:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2709,"name":"address","nodeType":"ElementaryTypeName","src":"14174:7:28","typeDescriptions":{}}},"id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14174:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14165:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2062616c616e6365206f662061646472657373283029","id":2714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14186:32:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210","typeString":"literal_string \"ERC1155: balance of address(0)\""},"value":"ERC1155: balance of address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210","typeString":"literal_string \"ERC1155: balance of address(0)\""}],"id":2707,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14157:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14157:62:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2716,"nodeType":"ExpressionStatement","src":"14157:62:28"},{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":2717,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"14236:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2718,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14238:8:28","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1971,"src":"14236:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2720,"indexExpression":{"id":2719,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"14247:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14236:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2722,"indexExpression":{"id":2721,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"14251:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14236:21:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2706,"id":2723,"nodeType":"Return","src":"14229:28:28"}]},"documentation":{"id":2695,"nodeType":"StructuredDocumentation","src":"13779:259:28","text":"@notice Retrieves the balance of `id` owned by account `owner`.\n @param owner The account to retrieve the balance of.\n @param id The identifier to retrieve the balance of.\n @return balance The balance of `id` owned by account `owner`."},"id":2725,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"14052:9:28","nodeType":"FunctionDefinition","parameters":{"id":2703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2698,"mutability":"mutable","name":"s","nameLocation":"14077:1:28","nodeType":"VariableDeclaration","scope":2725,"src":"14062:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2697,"nodeType":"UserDefinedTypeName","pathNode":{"id":2696,"name":"Layout","nameLocations":["14062:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"14062:6:28"},"referencedDeclaration":1978,"src":"14062:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2700,"mutability":"mutable","name":"owner","nameLocation":"14088:5:28","nodeType":"VariableDeclaration","scope":2725,"src":"14080:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2699,"name":"address","nodeType":"ElementaryTypeName","src":"14080:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2702,"mutability":"mutable","name":"id","nameLocation":"14103:2:28","nodeType":"VariableDeclaration","scope":2725,"src":"14095:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2701,"name":"uint256","nodeType":"ElementaryTypeName","src":"14095:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14061:45:28"},"returnParameters":{"id":2706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2705,"mutability":"mutable","name":"balance","nameLocation":"14138:7:28","nodeType":"VariableDeclaration","scope":2725,"src":"14130:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2704,"name":"uint256","nodeType":"ElementaryTypeName","src":"14130:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14129:17:28"},"scope":3089,"src":"14043:221:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2789,"nodeType":"Block","src":"14751:323:28","statements":[{"assignments":[2742],"declarations":[{"constant":false,"id":2742,"mutability":"mutable","name":"length","nameLocation":"14769:6:28","nodeType":"VariableDeclaration","scope":2789,"src":"14761:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"14761:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2745,"initialValue":{"expression":{"id":2743,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"14778:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14785:6:28","memberName":"length","nodeType":"MemberAccess","src":"14778:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14761:30:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2747,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"14809:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2748,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"14819:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14823:6:28","memberName":"length","nodeType":"MemberAccess","src":"14819:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14809:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e636f6e73697374656e7420617272617973","id":2751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14831:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""},"value":"ERC1155: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","typeString":"literal_string \"ERC1155: inconsistent arrays\""}],"id":2746,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14801:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14801:61:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2753,"nodeType":"ExpressionStatement","src":"14801:61:28"},{"expression":{"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2754,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"14873:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2758,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"14898:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14905:6:28","memberName":"length","nodeType":"MemberAccess","src":"14898:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14884:13:28","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2755,"name":"uint256","nodeType":"ElementaryTypeName","src":"14888:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2756,"nodeType":"ArrayTypeName","src":"14888:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14884:28:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"14873:39:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2762,"nodeType":"ExpressionStatement","src":"14873:39:28"},{"id":2788,"nodeType":"UncheckedBlock","src":"14923:145:28","statements":[{"body":{"id":2786,"nodeType":"Block","src":"14981:77:28","statements":[{"expression":{"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2772,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"14999:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2774,"indexExpression":{"id":2773,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"15008:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14999:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":2777,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"15025:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2779,"indexExpression":{"id":2778,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"15032:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15025:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2780,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"15036:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2782,"indexExpression":{"id":2781,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"15040:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15036:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2775,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"15013:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2776,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15015:9:28","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2725,"src":"15013:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,uint256) view returns (uint256)"}},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15013:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14999:44:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2785,"nodeType":"ExpressionStatement","src":"14999:44:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2766,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"14963:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2767,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"14968:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14963:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2787,"initializationExpression":{"assignments":[2764],"declarations":[{"constant":false,"id":2764,"mutability":"mutable","name":"i","nameLocation":"14960:1:28","nodeType":"VariableDeclaration","scope":2787,"src":"14952:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2763,"name":"uint256","nodeType":"ElementaryTypeName","src":"14952:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2765,"nodeType":"VariableDeclarationStatement","src":"14952:9:28"},"loopExpression":{"expression":{"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"14976:3:28","subExpression":{"id":2769,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"14978:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2771,"nodeType":"ExpressionStatement","src":"14976:3:28"},"nodeType":"ForStatement","src":"14947:111:28"}]}]},"documentation":{"id":2726,"nodeType":"StructuredDocumentation","src":"14270:333:28","text":"@notice Retrieves the balances of `ids` owned by accounts `owners`.\n @dev Reverts if `owners` and `ids` have different lengths.\n @param owners The addresses of the token holders\n @param ids The identifiers to retrieve the balance of.\n @return balances The balances of `ids` owned by accounts `owners`."},"id":2790,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"14617:14:28","nodeType":"FunctionDefinition","parameters":{"id":2736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2729,"mutability":"mutable","name":"s","nameLocation":"14647:1:28","nodeType":"VariableDeclaration","scope":2790,"src":"14632:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2728,"nodeType":"UserDefinedTypeName","pathNode":{"id":2727,"name":"Layout","nameLocations":["14632:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"14632:6:28"},"referencedDeclaration":1978,"src":"14632:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2732,"mutability":"mutable","name":"owners","nameLocation":"14669:6:28","nodeType":"VariableDeclaration","scope":2790,"src":"14650:25:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2730,"name":"address","nodeType":"ElementaryTypeName","src":"14650:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2731,"nodeType":"ArrayTypeName","src":"14650:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2735,"mutability":"mutable","name":"ids","nameLocation":"14696:3:28","nodeType":"VariableDeclaration","scope":2790,"src":"14677:22:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2733,"name":"uint256","nodeType":"ElementaryTypeName","src":"14677:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2734,"nodeType":"ArrayTypeName","src":"14677:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"14631:69:28"},"returnParameters":{"id":2740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2739,"mutability":"mutable","name":"balances","nameLocation":"14741:8:28","nodeType":"VariableDeclaration","scope":2790,"src":"14724:25:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2737,"name":"uint256","nodeType":"ElementaryTypeName","src":"14724:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2738,"nodeType":"ArrayTypeName","src":"14724:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"14723:27:28"},"scope":3089,"src":"14608:466:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2801,"nodeType":"Block","src":"15139:115:28","statements":[{"assignments":[2797],"declarations":[{"constant":false,"id":2797,"mutability":"mutable","name":"position","nameLocation":"15157:8:28","nodeType":"VariableDeclaration","scope":2801,"src":"15149:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2796,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15149:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2799,"initialValue":{"id":2798,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"15168:19:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15149:38:28"},{"AST":{"nodeType":"YulBlock","src":"15206:42:28","statements":[{"nodeType":"YulAssignment","src":"15220:18:28","value":{"name":"position","nodeType":"YulIdentifier","src":"15230:8:28"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"15220:6:28"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2797,"isOffset":false,"isSlot":false,"src":"15230:8:28","valueSize":1},{"declaration":2794,"isOffset":false,"isSlot":true,"src":"15220:6:28","suffix":"slot","valueSize":1}],"id":2800,"nodeType":"InlineAssembly","src":"15197:51:28"}]},"id":2802,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"15089:6:28","nodeType":"FunctionDefinition","parameters":{"id":2791,"nodeType":"ParameterList","parameters":[],"src":"15095:2:28"},"returnParameters":{"id":2795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2794,"mutability":"mutable","name":"s","nameLocation":"15136:1:28","nodeType":"VariableDeclaration","scope":2802,"src":"15121:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2793,"nodeType":"UserDefinedTypeName","pathNode":{"id":2792,"name":"Layout","nameLocations":["15121:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"15121:6:28"},"referencedDeclaration":1978,"src":"15121:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"}],"src":"15120:18:28"},"scope":3089,"src":"15080:174:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2827,"nodeType":"Block","src":"15679:73:28","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2815,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"15697:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2816,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"15706:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15697:16:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2818,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15696:18:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"baseExpression":{"baseExpression":{"expression":{"id":2819,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"15718:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2820,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15720:9:28","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1977,"src":"15718:11:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2822,"indexExpression":{"id":2821,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"15730:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15718:18:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2824,"indexExpression":{"id":2823,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"15737:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15718:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15696:49:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2814,"id":2826,"nodeType":"Return","src":"15689:56:28"}]},"documentation":{"id":2803,"nodeType":"StructuredDocumentation","src":"15260:302:28","text":"@notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n @param owner The token owner.\n @param account The account to check the operatability of.\n @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise."},"id":2828,"implemented":true,"kind":"function","modifiers":[],"name":"_isOperatable","nameLocation":"15576:13:28","nodeType":"FunctionDefinition","parameters":{"id":2811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2806,"mutability":"mutable","name":"s","nameLocation":"15605:1:28","nodeType":"VariableDeclaration","scope":2828,"src":"15590:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2805,"nodeType":"UserDefinedTypeName","pathNode":{"id":2804,"name":"Layout","nameLocations":["15590:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"15590:6:28"},"referencedDeclaration":1978,"src":"15590:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2808,"mutability":"mutable","name":"owner","nameLocation":"15616:5:28","nodeType":"VariableDeclaration","scope":2828,"src":"15608:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2807,"name":"address","nodeType":"ElementaryTypeName","src":"15608:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2810,"mutability":"mutable","name":"account","nameLocation":"15631:7:28","nodeType":"VariableDeclaration","scope":2828,"src":"15623:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2809,"name":"address","nodeType":"ElementaryTypeName","src":"15623:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15589:50:28"},"returnParameters":{"id":2814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2813,"mutability":"mutable","name":"operatable","nameLocation":"15667:10:28","nodeType":"VariableDeclaration","scope":2828,"src":"15662:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2812,"name":"bool","nodeType":"ElementaryTypeName","src":"15662:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15661:17:28"},"scope":3089,"src":"15567:185:28","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2917,"nodeType":"Block","src":"15861:664:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2842,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"15875:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15884:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15875:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2916,"nodeType":"IfStatement","src":"15871:648:28","trueBody":{"id":2915,"nodeType":"Block","src":"15887:632:28","statements":[{"id":2914,"nodeType":"UncheckedBlock","src":"15901:608:28","statements":[{"assignments":[2846],"declarations":[{"constant":false,"id":2846,"mutability":"mutable","name":"fromBalance","nameLocation":"15937:11:28","nodeType":"VariableDeclaration","scope":2914,"src":"15929:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2845,"name":"uint256","nodeType":"ElementaryTypeName","src":"15929:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2853,"initialValue":{"baseExpression":{"baseExpression":{"expression":{"id":2847,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"15951:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2848,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15953:8:28","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1971,"src":"15951:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2850,"indexExpression":{"id":2849,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"15962:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15951:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2852,"indexExpression":{"id":2851,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"15966:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15951:20:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15929:42:28"},{"assignments":[2855],"declarations":[{"constant":false,"id":2855,"mutability":"mutable","name":"newFromBalance","nameLocation":"15997:14:28","nodeType":"VariableDeclaration","scope":2914,"src":"15989:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2854,"name":"uint256","nodeType":"ElementaryTypeName","src":"15989:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2859,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2856,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"16014:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2857,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"16028:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16014:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15989:44:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2861,"name":"newFromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"16059:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2862,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"16076:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16059:28:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e6365","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16089:31:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab","typeString":"literal_string \"ERC1155: insufficient balance\""},"value":"ERC1155: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab","typeString":"literal_string \"ERC1155: insufficient balance\""}],"id":2860,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16051:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16051:70:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2866,"nodeType":"ExpressionStatement","src":"16051:70:28"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2867,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"16143:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2868,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"16151:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16143:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2913,"nodeType":"IfStatement","src":"16139:356:28","trueBody":{"id":2912,"nodeType":"Block","src":"16155:340:28","statements":[{"assignments":[2871],"declarations":[{"constant":false,"id":2871,"mutability":"mutable","name":"toBalance","nameLocation":"16185:9:28","nodeType":"VariableDeclaration","scope":2912,"src":"16177:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"16177:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2878,"initialValue":{"baseExpression":{"baseExpression":{"expression":{"id":2872,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"16197:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2873,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16199:8:28","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1971,"src":"16197:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2875,"indexExpression":{"id":2874,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"16208:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16197:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2877,"indexExpression":{"id":2876,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"16212:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16197:18:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16177:38:28"},{"assignments":[2880],"declarations":[{"constant":false,"id":2880,"mutability":"mutable","name":"newToBalance","nameLocation":"16245:12:28","nodeType":"VariableDeclaration","scope":2912,"src":"16237:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2879,"name":"uint256","nodeType":"ElementaryTypeName","src":"16237:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2884,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2881,"name":"toBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"16260:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2882,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"16272:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16260:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16237:40:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2886,"name":"newToBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"16307:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2887,"name":"toBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"16322:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16307:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2062616c616e6365206f766572666c6f77","id":2889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16333:27:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101","typeString":"literal_string \"ERC1155: balance overflow\""},"value":"ERC1155: balance overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101","typeString":"literal_string \"ERC1155: balance overflow\""}],"id":2885,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16299:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16299:62:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2891,"nodeType":"ExpressionStatement","src":"16299:62:28"},{"expression":{"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":2892,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"16384:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2896,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16386:8:28","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1971,"src":"16384:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2897,"indexExpression":{"id":2894,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"16395:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16384:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2898,"indexExpression":{"id":2895,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"16399:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16384:20:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2899,"name":"newFromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"16407:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16384:37:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2901,"nodeType":"ExpressionStatement","src":"16384:37:28"},{"expression":{"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":2902,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"16443:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2906,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16445:8:28","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1971,"src":"16443:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2907,"indexExpression":{"id":2904,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"16454:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16443:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2908,"indexExpression":{"id":2905,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"16458:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16443:18:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2909,"name":"newToBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"16464:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16443:33:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2911,"nodeType":"ExpressionStatement","src":"16443:33:28"}]}}]}]}}]},"id":2918,"implemented":true,"kind":"function","modifiers":[],"name":"_transferToken","nameLocation":"15767:14:28","nodeType":"FunctionDefinition","parameters":{"id":2840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2831,"mutability":"mutable","name":"s","nameLocation":"15797:1:28","nodeType":"VariableDeclaration","scope":2918,"src":"15782:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2830,"nodeType":"UserDefinedTypeName","pathNode":{"id":2829,"name":"Layout","nameLocations":["15782:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"15782:6:28"},"referencedDeclaration":1978,"src":"15782:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2833,"mutability":"mutable","name":"from","nameLocation":"15808:4:28","nodeType":"VariableDeclaration","scope":2918,"src":"15800:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2832,"name":"address","nodeType":"ElementaryTypeName","src":"15800:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2835,"mutability":"mutable","name":"to","nameLocation":"15822:2:28","nodeType":"VariableDeclaration","scope":2918,"src":"15814:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2834,"name":"address","nodeType":"ElementaryTypeName","src":"15814:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2837,"mutability":"mutable","name":"id","nameLocation":"15834:2:28","nodeType":"VariableDeclaration","scope":2918,"src":"15826:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2836,"name":"uint256","nodeType":"ElementaryTypeName","src":"15826:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2839,"mutability":"mutable","name":"value","nameLocation":"15846:5:28","nodeType":"VariableDeclaration","scope":2918,"src":"15838:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"15838:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15781:71:28"},"returnParameters":{"id":2841,"nodeType":"ParameterList","parameters":[],"src":"15861:0:28"},"scope":3089,"src":"15758:767:28","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2968,"nodeType":"Block","src":"16616:314:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2930,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2927,"src":"16630:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16639:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16630:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2967,"nodeType":"IfStatement","src":"16626:298:28","trueBody":{"id":2966,"nodeType":"Block","src":"16642:282:28","statements":[{"id":2965,"nodeType":"UncheckedBlock","src":"16656:258:28","statements":[{"assignments":[2934],"declarations":[{"constant":false,"id":2934,"mutability":"mutable","name":"balance","nameLocation":"16692:7:28","nodeType":"VariableDeclaration","scope":2965,"src":"16684:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2933,"name":"uint256","nodeType":"ElementaryTypeName","src":"16684:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2941,"initialValue":{"baseExpression":{"baseExpression":{"expression":{"id":2935,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"16702:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2936,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16704:8:28","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1971,"src":"16702:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2938,"indexExpression":{"id":2937,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"16713:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16702:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2940,"indexExpression":{"id":2939,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"16717:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16702:18:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16684:36:28"},{"assignments":[2943],"declarations":[{"constant":false,"id":2943,"mutability":"mutable","name":"newBalance","nameLocation":"16746:10:28","nodeType":"VariableDeclaration","scope":2965,"src":"16738:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2942,"name":"uint256","nodeType":"ElementaryTypeName","src":"16738:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2947,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2944,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"16759:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2927,"src":"16769:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16759:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16738:36:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2949,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"16800:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2950,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"16813:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16800:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2062616c616e6365206f766572666c6f77","id":2952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16822:27:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101","typeString":"literal_string \"ERC1155: balance overflow\""},"value":"ERC1155: balance overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101","typeString":"literal_string \"ERC1155: balance overflow\""}],"id":2948,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16792:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16792:58:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2954,"nodeType":"ExpressionStatement","src":"16792:58:28"},{"expression":{"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":2955,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"16868:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2959,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16870:8:28","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1971,"src":"16868:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2960,"indexExpression":{"id":2957,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"16879:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16868:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2961,"indexExpression":{"id":2958,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"16883:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16868:18:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2962,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"16889:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16868:31:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2964,"nodeType":"ExpressionStatement","src":"16868:31:28"}]}]}}]},"id":2969,"implemented":true,"kind":"function","modifiers":[],"name":"_mintToken","nameLocation":"16540:10:28","nodeType":"FunctionDefinition","parameters":{"id":2928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2921,"mutability":"mutable","name":"s","nameLocation":"16566:1:28","nodeType":"VariableDeclaration","scope":2969,"src":"16551:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2920,"nodeType":"UserDefinedTypeName","pathNode":{"id":2919,"name":"Layout","nameLocations":["16551:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"16551:6:28"},"referencedDeclaration":1978,"src":"16551:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2923,"mutability":"mutable","name":"to","nameLocation":"16577:2:28","nodeType":"VariableDeclaration","scope":2969,"src":"16569:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2922,"name":"address","nodeType":"ElementaryTypeName","src":"16569:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2925,"mutability":"mutable","name":"id","nameLocation":"16589:2:28","nodeType":"VariableDeclaration","scope":2969,"src":"16581:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2924,"name":"uint256","nodeType":"ElementaryTypeName","src":"16581:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2927,"mutability":"mutable","name":"value","nameLocation":"16601:5:28","nodeType":"VariableDeclaration","scope":2969,"src":"16593:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2926,"name":"uint256","nodeType":"ElementaryTypeName","src":"16593:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16550:57:28"},"returnParameters":{"id":2929,"nodeType":"ParameterList","parameters":[],"src":"16616:0:28"},"scope":3089,"src":"16531:399:28","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3019,"nodeType":"Block","src":"17023:322:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"17037:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17046:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17037:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3018,"nodeType":"IfStatement","src":"17033:306:28","trueBody":{"id":3017,"nodeType":"Block","src":"17049:290:28","statements":[{"id":3016,"nodeType":"UncheckedBlock","src":"17063:266:28","statements":[{"assignments":[2985],"declarations":[{"constant":false,"id":2985,"mutability":"mutable","name":"balance","nameLocation":"17099:7:28","nodeType":"VariableDeclaration","scope":3016,"src":"17091:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2984,"name":"uint256","nodeType":"ElementaryTypeName","src":"17091:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2992,"initialValue":{"baseExpression":{"baseExpression":{"expression":{"id":2986,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"17109:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":2987,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17111:8:28","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1971,"src":"17109:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2989,"indexExpression":{"id":2988,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"17120:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17109:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2991,"indexExpression":{"id":2990,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"17124:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17109:20:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17091:38:28"},{"assignments":[2994],"declarations":[{"constant":false,"id":2994,"mutability":"mutable","name":"newBalance","nameLocation":"17155:10:28","nodeType":"VariableDeclaration","scope":3016,"src":"17147:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2993,"name":"uint256","nodeType":"ElementaryTypeName","src":"17147:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2998,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2995,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"17168:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2996,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"17178:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17168:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17147:36:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3000,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"17209:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3001,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"17222:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17209:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e6365","id":3003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17231:31:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab","typeString":"literal_string \"ERC1155: insufficient balance\""},"value":"ERC1155: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab","typeString":"literal_string \"ERC1155: insufficient balance\""}],"id":2999,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17201:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17201:62:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3005,"nodeType":"ExpressionStatement","src":"17201:62:28"},{"expression":{"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":3006,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"17281:1:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":3010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17283:8:28","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1971,"src":"17281:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3011,"indexExpression":{"id":3008,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"17292:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17281:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3012,"indexExpression":{"id":3009,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"17296:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17281:20:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3013,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"17304:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17281:33:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3015,"nodeType":"ExpressionStatement","src":"17281:33:28"}]}]}}]},"id":3020,"implemented":true,"kind":"function","modifiers":[],"name":"_burnToken","nameLocation":"16945:10:28","nodeType":"FunctionDefinition","parameters":{"id":2979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2972,"mutability":"mutable","name":"s","nameLocation":"16971:1:28","nodeType":"VariableDeclaration","scope":3020,"src":"16956:16:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"},"typeName":{"id":2971,"nodeType":"UserDefinedTypeName","pathNode":{"id":2970,"name":"Layout","nameLocations":["16956:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"16956:6:28"},"referencedDeclaration":1978,"src":"16956:6:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2974,"mutability":"mutable","name":"from","nameLocation":"16982:4:28","nodeType":"VariableDeclaration","scope":3020,"src":"16974:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2973,"name":"address","nodeType":"ElementaryTypeName","src":"16974:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2976,"mutability":"mutable","name":"id","nameLocation":"16996:2:28","nodeType":"VariableDeclaration","scope":3020,"src":"16988:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2975,"name":"uint256","nodeType":"ElementaryTypeName","src":"16988:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2978,"mutability":"mutable","name":"value","nameLocation":"17008:5:28","nodeType":"VariableDeclaration","scope":3020,"src":"17000:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2977,"name":"uint256","nodeType":"ElementaryTypeName","src":"17000:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16955:59:28"},"returnParameters":{"id":2980,"nodeType":"ParameterList","parameters":[],"src":"17023:0:28"},"scope":3089,"src":"16936:409:28","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3052,"nodeType":"Block","src":"17938:157:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3041,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"18000:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3042,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"18008:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3043,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"18014:2:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3044,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"18018:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3045,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"18025:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3038,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"17978:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3037,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"17956:21:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$1934_$","typeString":"type(contract IERC1155TokenReceiver)"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17956:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155TokenReceiver_$1934","typeString":"contract IERC1155TokenReceiver"}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17982:17:28","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1915,"src":"17956:43:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17956:74:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3047,"name":"ERC1155_SINGLE_RECEIVED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"18034:23:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17956:101:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e736665722072656a6563746564","id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18059:28:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c","typeString":"literal_string \"ERC1155: transfer rejected\""},"value":"ERC1155: transfer rejected"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c","typeString":"literal_string \"ERC1155: transfer rejected\""}],"id":3036,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17948:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17948:140:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3051,"nodeType":"ExpressionStatement","src":"17948:140:28"}]},"documentation":{"id":3021,"nodeType":"StructuredDocumentation","src":"17351:454:28","text":"@notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\n @dev Reverts if the call to the target fails, reverts or is rejected.\n @param sender The message sender.\n @param from Previous token owner.\n @param to New token owner.\n @param id Identifier of the token transferred.\n @param value Value transferred.\n @param data Optional data to send along with the receiver contract call."},"id":3053,"implemented":true,"kind":"function","modifiers":[],"name":"_callOnERC1155Received","nameLocation":"17819:22:28","nodeType":"FunctionDefinition","parameters":{"id":3034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3023,"mutability":"mutable","name":"sender","nameLocation":"17850:6:28","nodeType":"VariableDeclaration","scope":3053,"src":"17842:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3022,"name":"address","nodeType":"ElementaryTypeName","src":"17842:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3025,"mutability":"mutable","name":"from","nameLocation":"17866:4:28","nodeType":"VariableDeclaration","scope":3053,"src":"17858:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3024,"name":"address","nodeType":"ElementaryTypeName","src":"17858:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3027,"mutability":"mutable","name":"to","nameLocation":"17880:2:28","nodeType":"VariableDeclaration","scope":3053,"src":"17872:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3026,"name":"address","nodeType":"ElementaryTypeName","src":"17872:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3029,"mutability":"mutable","name":"id","nameLocation":"17892:2:28","nodeType":"VariableDeclaration","scope":3053,"src":"17884:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3028,"name":"uint256","nodeType":"ElementaryTypeName","src":"17884:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3031,"mutability":"mutable","name":"value","nameLocation":"17904:5:28","nodeType":"VariableDeclaration","scope":3053,"src":"17896:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3030,"name":"uint256","nodeType":"ElementaryTypeName","src":"17896:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3033,"mutability":"mutable","name":"data","nameLocation":"17924:4:28","nodeType":"VariableDeclaration","scope":3053,"src":"17911:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3032,"name":"bytes","nodeType":"ElementaryTypeName","src":"17911:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17841:88:28"},"returnParameters":{"id":3035,"nodeType":"ParameterList","parameters":[],"src":"17938:0:28"},"scope":3089,"src":"17810:285:28","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3087,"nodeType":"Block","src":"18777:197:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3076,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"18857:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3077,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"18865:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3078,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"18871:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3079,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"18876:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3080,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"18884:4:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3073,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"18830:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3072,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"18808:21:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$1934_$","typeString":"type(contract IERC1155TokenReceiver)"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18808:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155TokenReceiver_$1934","typeString":"contract IERC1155TokenReceiver"}},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18834:22:28","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1933,"src":"18808:48:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18808:81:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3082,"name":"ERC1155_BATCH_RECEIVED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"18893:22:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"18808:107:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e736665722072656a6563746564","id":3084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18929:28:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c","typeString":"literal_string \"ERC1155: transfer rejected\""},"value":"ERC1155: transfer rejected"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c","typeString":"literal_string \"ERC1155: transfer rejected\""}],"id":3071,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18787:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18787:180:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3086,"nodeType":"ExpressionStatement","src":"18787:180:28"}]},"documentation":{"id":3054,"nodeType":"StructuredDocumentation","src":"18101:464:28","text":"@notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\n @dev Reverts if the call to the target fails, reverts or is rejected.\n @param sender The message sender.\n @param from Previous token owner.\n @param to New token owner.\n @param ids Identifiers of the tokens transferred.\n @param values Values transferred.\n @param data Optional data to send along with the receiver contract call."},"id":3088,"implemented":true,"kind":"function","modifiers":[],"name":"_callOnERC1155BatchReceived","nameLocation":"18579:27:28","nodeType":"FunctionDefinition","parameters":{"id":3069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3056,"mutability":"mutable","name":"sender","nameLocation":"18624:6:28","nodeType":"VariableDeclaration","scope":3088,"src":"18616:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3055,"name":"address","nodeType":"ElementaryTypeName","src":"18616:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3058,"mutability":"mutable","name":"from","nameLocation":"18648:4:28","nodeType":"VariableDeclaration","scope":3088,"src":"18640:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3057,"name":"address","nodeType":"ElementaryTypeName","src":"18640:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3060,"mutability":"mutable","name":"to","nameLocation":"18670:2:28","nodeType":"VariableDeclaration","scope":3088,"src":"18662:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3059,"name":"address","nodeType":"ElementaryTypeName","src":"18662:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3063,"mutability":"mutable","name":"ids","nameLocation":"18699:3:28","nodeType":"VariableDeclaration","scope":3088,"src":"18682:20:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3061,"name":"uint256","nodeType":"ElementaryTypeName","src":"18682:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3062,"nodeType":"ArrayTypeName","src":"18682:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3066,"mutability":"mutable","name":"values","nameLocation":"18729:6:28","nodeType":"VariableDeclaration","scope":3088,"src":"18712:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3064,"name":"uint256","nodeType":"ElementaryTypeName","src":"18712:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3065,"nodeType":"ArrayTypeName","src":"18712:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3068,"mutability":"mutable","name":"data","nameLocation":"18758:4:28","nodeType":"VariableDeclaration","scope":3088,"src":"18745:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3067,"name":"bytes","nodeType":"ElementaryTypeName","src":"18745:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18606:162:28"},"returnParameters":{"id":3070,"nodeType":"ParameterList","parameters":[],"src":"18777:0:28"},"scope":3089,"src":"18570:404:28","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3090,"src":"753:18223:28","usedErrors":[]}],"src":"32:18945:28"},"id":28},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol","exportedSymbols":{"ProxyInitialization":[1162],"Strings":[4040],"TokenMetadataWithBaseURIStorage":[3192]},"id":3193,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3091,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:29"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../../proxy/libraries/ProxyInitialization.sol","id":3093,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3193,"sourceUnit":1163,"src":"57:87:29","symbolAliases":[{"foreign":{"id":3092,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"65:19:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":3095,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3193,"sourceUnit":4041,"src":"145:66:29","symbolAliases":[{"foreign":{"id":3094,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"153:7:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"TokenMetadataWithBaseURIStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3192,"linearizedBaseContracts":[3192],"name":"TokenMetadataWithBaseURIStorage","nameLocation":"221:31:29","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3099,"libraryName":{"id":3096,"name":"TokenMetadataWithBaseURIStorage","nameLocations":["265:31:29"],"nodeType":"IdentifierPath","referencedDeclaration":3192,"src":"265:31:29"},"nodeType":"UsingForDirective","src":"259:81:29","typeName":{"id":3098,"nodeType":"UserDefinedTypeName","pathNode":{"id":3097,"name":"TokenMetadataWithBaseURIStorage.Layout","nameLocations":["301:31:29","333:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":3105,"src":"301:38:29"},"referencedDeclaration":3105,"src":"301:38:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"}}},{"global":false,"id":3102,"libraryName":{"id":3100,"name":"Strings","nameLocations":["351:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":4040,"src":"351:7:29"},"nodeType":"UsingForDirective","src":"345:26:29","typeName":{"id":3101,"name":"uint256","nodeType":"ElementaryTypeName","src":"363:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"TokenMetadataWithBaseURIStorage.Layout","id":3105,"members":[{"constant":false,"id":3104,"mutability":"mutable","name":"baseURI","nameLocation":"408:7:29","nodeType":"VariableDeclaration","scope":3105,"src":"401:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3103,"name":"string","nodeType":"ElementaryTypeName","src":"401:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Layout","nameLocation":"384:6:29","nodeType":"StructDefinition","scope":3192,"src":"377:45:29","visibility":"public"},{"constant":true,"functionSelector":"96c3092d","id":3118,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"452:19:29","nodeType":"VariableDeclaration","scope":3192,"src":"428:136:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3106,"name":"bytes32","nodeType":"ElementaryTypeName","src":"428:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e6d657461646174612e546f6b656e4d6574616461746157697468426173655552492e73746f72616765","id":3112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"500:57:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_e94434e3c6b941c5d90218142fadcc69cb2e13723993540bfa1c131dd1d3475a","typeString":"literal_string \"animoca.token.metadata.TokenMetadataWithBaseURI.storage\""},"value":"animoca.token.metadata.TokenMetadataWithBaseURI.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e94434e3c6b941c5d90218142fadcc69cb2e13723993540bfa1c131dd1d3475a","typeString":"literal_string \"animoca.token.metadata.TokenMetadataWithBaseURI.storage\""}],"id":3111,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"490:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"490:68:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"482:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3109,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:29","typeDescriptions":{}}},"id":3114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"482:77:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"562:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"482:81:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"474:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3107,"name":"bytes32","nodeType":"ElementaryTypeName","src":"474:7:29","typeDescriptions":{}}},"id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"474:90:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"anonymous":false,"eventSelector":"04b1dc5c136a3ce9fded8db0ce3d3366c58764ec3a8e4c2b9e52e4ddfe5ebbf7","id":3122,"name":"BaseMetadataURISet","nameLocation":"577:18:29","nodeType":"EventDefinition","parameters":{"id":3121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3120,"indexed":false,"mutability":"mutable","name":"baseMetadataURI","nameLocation":"603:15:29","nodeType":"VariableDeclaration","scope":3122,"src":"596:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3119,"name":"string","nodeType":"ElementaryTypeName","src":"596:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"595:24:29"},"src":"571:49:29"},{"body":{"id":3141,"nodeType":"Block","src":"845:78:29","statements":[{"expression":{"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3131,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"855:1:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout storage pointer"}},"id":3133,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"857:7:29","memberName":"baseURI","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"855:9:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3134,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"867:7:29","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"855:19:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3136,"nodeType":"ExpressionStatement","src":"855:19:29"},{"eventCall":{"arguments":[{"id":3138,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"908:7:29","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3137,"name":"BaseMetadataURISet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"889:18:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"889:27:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3140,"nodeType":"EmitStatement","src":"884:32:29"}]},"documentation":{"id":3123,"nodeType":"StructuredDocumentation","src":"626:134:29","text":"@notice Sets the base metadata URI.\n @dev Emits a {BaseMetadataURISet} event.\n @param baseURI The base metadata URI."},"id":3142,"implemented":true,"kind":"function","modifiers":[],"name":"setBaseMetadataURI","nameLocation":"774:18:29","nodeType":"FunctionDefinition","parameters":{"id":3129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3126,"mutability":"mutable","name":"s","nameLocation":"808:1:29","nodeType":"VariableDeclaration","scope":3142,"src":"793:16:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"},"typeName":{"id":3125,"nodeType":"UserDefinedTypeName","pathNode":{"id":3124,"name":"Layout","nameLocations":["793:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":3105,"src":"793:6:29"},"referencedDeclaration":3105,"src":"793:6:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3128,"mutability":"mutable","name":"baseURI","nameLocation":"827:7:29","nodeType":"VariableDeclaration","scope":3142,"src":"811:23:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3127,"name":"string","nodeType":"ElementaryTypeName","src":"811:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"792:43:29"},"returnParameters":{"id":3130,"nodeType":"ParameterList","parameters":[],"src":"845:0:29"},"scope":3192,"src":"765:158:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3154,"nodeType":"Block","src":"1109:33:29","statements":[{"expression":{"expression":{"id":3151,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"1126:1:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout storage pointer"}},"id":3152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1128:7:29","memberName":"baseURI","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"1126:9:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3150,"id":3153,"nodeType":"Return","src":"1119:16:29"}]},"documentation":{"id":3143,"nodeType":"StructuredDocumentation","src":"929:86:29","text":"@notice Gets the base metadata URI.\n @return baseURI The base metadata URI."},"id":3155,"implemented":true,"kind":"function","modifiers":[],"name":"baseMetadataURI","nameLocation":"1029:15:29","nodeType":"FunctionDefinition","parameters":{"id":3147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3146,"mutability":"mutable","name":"s","nameLocation":"1060:1:29","nodeType":"VariableDeclaration","scope":3155,"src":"1045:16:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"},"typeName":{"id":3145,"nodeType":"UserDefinedTypeName","pathNode":{"id":3144,"name":"Layout","nameLocations":["1045:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":3105,"src":"1045:6:29"},"referencedDeclaration":3105,"src":"1045:6:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"}},"visibility":"internal"}],"src":"1044:18:29"},"returnParameters":{"id":3150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3149,"mutability":"mutable","name":"baseURI","nameLocation":"1100:7:29","nodeType":"VariableDeclaration","scope":3155,"src":"1086:21:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3148,"name":"string","nodeType":"ElementaryTypeName","src":"1086:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1085:23:29"},"scope":3192,"src":"1020:122:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3178,"nodeType":"Block","src":"1537:74:29","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":3170,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"1578:1:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout storage pointer"}},"id":3171,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1580:7:29","memberName":"baseURI","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"1578:9:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3172,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"1589:2:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1592:8:29","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3870,"src":"1589:11:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1589:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3168,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1561:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1565:12:29","memberName":"encodePacked","nodeType":"MemberAccess","src":"1561:16:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1561:42:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1554:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3166,"name":"string","nodeType":"ElementaryTypeName","src":"1554:6:29","typeDescriptions":{}}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1554:50:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3165,"id":3177,"nodeType":"Return","src":"1547:57:29"}]},"documentation":{"id":3156,"nodeType":"StructuredDocumentation","src":"1148:281:29","text":"@notice Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identfier.\n @param id The token identifier.\n @return tokenURI The token metadata URI as the concatenation of the base metadata URI and the token identfier."},"id":3179,"implemented":true,"kind":"function","modifiers":[],"name":"tokenMetadataURI","nameLocation":"1443:16:29","nodeType":"FunctionDefinition","parameters":{"id":3162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3159,"mutability":"mutable","name":"s","nameLocation":"1475:1:29","nodeType":"VariableDeclaration","scope":3179,"src":"1460:16:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"},"typeName":{"id":3158,"nodeType":"UserDefinedTypeName","pathNode":{"id":3157,"name":"Layout","nameLocations":["1460:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":3105,"src":"1460:6:29"},"referencedDeclaration":3105,"src":"1460:6:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3161,"mutability":"mutable","name":"id","nameLocation":"1486:2:29","nodeType":"VariableDeclaration","scope":3179,"src":"1478:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3160,"name":"uint256","nodeType":"ElementaryTypeName","src":"1478:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1459:30:29"},"returnParameters":{"id":3165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3164,"mutability":"mutable","name":"tokenURI","nameLocation":"1527:8:29","nodeType":"VariableDeclaration","scope":3179,"src":"1513:22:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3163,"name":"string","nodeType":"ElementaryTypeName","src":"1513:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1512:24:29"},"scope":3192,"src":"1434:177:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3190,"nodeType":"Block","src":"1676:115:29","statements":[{"assignments":[3186],"declarations":[{"constant":false,"id":3186,"mutability":"mutable","name":"position","nameLocation":"1694:8:29","nodeType":"VariableDeclaration","scope":3190,"src":"1686:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1686:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3188,"initialValue":{"id":3187,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1705:19:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1686:38:29"},{"AST":{"nodeType":"YulBlock","src":"1743:42:29","statements":[{"nodeType":"YulAssignment","src":"1757:18:29","value":{"name":"position","nodeType":"YulIdentifier","src":"1767:8:29"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"1757:6:29"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3186,"isOffset":false,"isSlot":false,"src":"1767:8:29","valueSize":1},{"declaration":3183,"isOffset":false,"isSlot":true,"src":"1757:6:29","suffix":"slot","valueSize":1}],"id":3189,"nodeType":"InlineAssembly","src":"1734:51:29"}]},"id":3191,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1626:6:29","nodeType":"FunctionDefinition","parameters":{"id":3180,"nodeType":"ParameterList","parameters":[],"src":"1632:2:29"},"returnParameters":{"id":3184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3183,"mutability":"mutable","name":"s","nameLocation":"1673:1:29","nodeType":"VariableDeclaration","scope":3191,"src":"1658:16:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"},"typeName":{"id":3182,"nodeType":"UserDefinedTypeName","pathNode":{"id":3181,"name":"Layout","nameLocations":["1658:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":3105,"src":"1658:6:29"},"referencedDeclaration":3105,"src":"1658:6:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3105_storage_ptr","typeString":"struct TokenMetadataWithBaseURIStorage.Layout"}},"visibility":"internal"}],"src":"1657:18:29"},"scope":3192,"src":"1617:174:29","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3193,"src":"213:1580:29","usedErrors":[]}],"src":"32:1762:29"},"id":29},"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol","exportedSymbols":{"Bytes32":[3349]},"id":3350,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3194,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:30"},{"abstract":false,"baseContracts":[],"canonicalName":"Bytes32","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3349,"linearizedBaseContracts":[3349],"name":"Bytes32","nameLocation":"65:7:30","nodeType":"ContractDefinition","nodes":[{"body":{"id":3271,"nodeType":"Block","src":"291:553:30","statements":[{"id":3270,"nodeType":"UncheckedBlock","src":"301:537:30","statements":[{"assignments":[3203],"declarations":[{"constant":false,"id":3203,"mutability":"mutable","name":"base32Alphabet","nameLocation":"333:14:30","nodeType":"VariableDeclaration","scope":3270,"src":"325:22:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3202,"name":"bytes32","nodeType":"ElementaryTypeName","src":"325:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3205,"initialValue":{"hexValue":"307836313632363336343635363636373638363936413642364336443645364637303731373237333734373537363737373837393741333233333334333533363337","id":3204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"350:66:30","typeDescriptions":{"typeIdentifier":"t_rational_44048183304486788312148433451363384677562265908331949128489393199232333461047_by_1","typeString":"int_const 4404...(69 digits omitted)...1047"},"value":"0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637"},"nodeType":"VariableDeclarationStatement","src":"325:91:30"},{"assignments":[3207],"declarations":[{"constant":false,"id":3207,"mutability":"mutable","name":"i","nameLocation":"438:1:30","nodeType":"VariableDeclaration","scope":3270,"src":"430:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3206,"name":"uint256","nodeType":"ElementaryTypeName","src":"430:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3212,"initialValue":{"arguments":[{"id":3210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"450:5:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"442:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3208,"name":"uint256","nodeType":"ElementaryTypeName","src":"442:7:30","typeDescriptions":{}}},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"442:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"430:26:30"},{"assignments":[3214],"declarations":[{"constant":false,"id":3214,"mutability":"mutable","name":"k","nameLocation":"478:1:30","nodeType":"VariableDeclaration","scope":3270,"src":"470:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3213,"name":"uint256","nodeType":"ElementaryTypeName","src":"470:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3216,"initialValue":{"hexValue":"3532","id":3215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"482:2:30","typeDescriptions":{"typeIdentifier":"t_rational_52_by_1","typeString":"int_const 52"},"value":"52"},"nodeType":"VariableDeclarationStatement","src":"470:14:30"},{"assignments":[3218],"declarations":[{"constant":false,"id":3218,"mutability":"mutable","name":"bstr","nameLocation":"511:4:30","nodeType":"VariableDeclaration","scope":3270,"src":"498:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3217,"name":"bytes","nodeType":"ElementaryTypeName","src":"498:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3223,"initialValue":{"arguments":[{"id":3221,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"528:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"518:9:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3219,"name":"bytes","nodeType":"ElementaryTypeName","src":"522:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"518:12:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"498:32:30"},{"expression":{"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3224,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"544:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3227,"indexExpression":{"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"549:3:30","subExpression":{"id":3225,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"551:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"544:9:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3228,"name":"base32Alphabet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"556:14:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3238,"indexExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3231,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"578:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"38","id":3232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"582:1:30","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"578:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3234,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"577:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":3235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"588:1:30","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"577:12:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"571:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3229,"name":"uint8","nodeType":"ElementaryTypeName","src":"571:5:30","typeDescriptions":{}}},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"571:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"556:35:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"544:47:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3240,"nodeType":"ExpressionStatement","src":"544:47:30"},{"expression":{"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3241,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"669:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"38","id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"674:1:30","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"669:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3244,"nodeType":"ExpressionStatement","src":"669:6:30"},{"body":{"id":3263,"nodeType":"Block","src":"703:92:30","statements":[{"expression":{"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3248,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"721:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3251,"indexExpression":{"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"726:3:30","subExpression":{"id":3249,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"728:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"721:9:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3252,"name":"base32Alphabet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"733:14:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3256,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3253,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"748:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":3254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:2:30","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"748:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"733:22:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"721:34:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3258,"nodeType":"ExpressionStatement","src":"721:34:30"},{"expression":{"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3259,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"773:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3332","id":3260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"778:2:30","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"773:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3262,"nodeType":"ExpressionStatement","src":"773:7:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3245,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"696:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"700:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"696:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3264,"nodeType":"WhileStatement","src":"689:106:30"},{"expression":{"arguments":[{"id":3267,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"822:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"815:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3265,"name":"string","nodeType":"ElementaryTypeName","src":"815:6:30","typeDescriptions":{}}},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"815:12:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3201,"id":3269,"nodeType":"Return","src":"808:19:30"}]}]},"documentation":{"id":3195,"nodeType":"StructuredDocumentation","src":"79:130:30","text":"@notice Converts bytes32 to base32 string.\n @param value value to convert.\n @return the converted base32 string."},"id":3272,"implemented":true,"kind":"function","modifiers":[],"name":"toBase32String","nameLocation":"223:14:30","nodeType":"FunctionDefinition","parameters":{"id":3198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3197,"mutability":"mutable","name":"value","nameLocation":"246:5:30","nodeType":"VariableDeclaration","scope":3272,"src":"238:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"238:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"237:15:30"},"returnParameters":{"id":3201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3272,"src":"276:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3199,"name":"string","nodeType":"ElementaryTypeName","src":"276:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"275:15:30"},"scope":3349,"src":"214:630:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3347,"nodeType":"Block","src":"1098:501:30","statements":[{"id":3346,"nodeType":"UncheckedBlock","src":"1108:485:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3280,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"1136:5:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783030","id":3281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1145:4:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"src":"1136:13:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3285,"nodeType":"IfStatement","src":"1132:28:30","trueBody":{"expression":{"hexValue":"","id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1158:2:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":3279,"id":3284,"nodeType":"Return","src":"1151:9:30"}},{"assignments":[3287],"declarations":[{"constant":false,"id":3287,"mutability":"mutable","name":"bytesString","nameLocation":"1187:11:30","nodeType":"VariableDeclaration","scope":3346,"src":"1174:24:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3286,"name":"bytes","nodeType":"ElementaryTypeName","src":"1174:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3295,"initialValue":{"arguments":[{"arguments":[{"id":3292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"1224:5:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3290,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1207:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1211:12:30","memberName":"encodePacked","nodeType":"MemberAccess","src":"1207:16:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1207:23:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1201:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3288,"name":"bytes","nodeType":"ElementaryTypeName","src":"1201:5:30","typeDescriptions":{}}},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1201:30:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1174:57:30"},{"assignments":[3297],"declarations":[{"constant":false,"id":3297,"mutability":"mutable","name":"pos","nameLocation":"1253:3:30","nodeType":"VariableDeclaration","scope":3346,"src":"1245:11:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3296,"name":"uint256","nodeType":"ElementaryTypeName","src":"1245:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3299,"initialValue":{"hexValue":"3331","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1259:2:30","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"nodeType":"VariableDeclarationStatement","src":"1245:16:30"},{"body":{"id":3311,"nodeType":"Block","src":"1288:88:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3301,"name":"bytesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"1310:11:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3303,"indexExpression":{"id":3302,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"1322:3:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1310:16:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1330:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1310:21:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3307,"nodeType":"IfStatement","src":"1306:32:30","trueBody":{"id":3306,"nodeType":"Break","src":"1333:5:30"}},{"expression":{"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1356:5:30","subExpression":{"id":3308,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"1358:3:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3310,"nodeType":"ExpressionStatement","src":"1356:5:30"}]},"condition":{"hexValue":"74727565","id":3300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1282:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3312,"nodeType":"WhileStatement","src":"1275:101:30"},{"assignments":[3314],"declarations":[{"constant":false,"id":3314,"mutability":"mutable","name":"asciiString","nameLocation":"1402:11:30","nodeType":"VariableDeclaration","scope":3346,"src":"1389:24:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3313,"name":"bytes","nodeType":"ElementaryTypeName","src":"1389:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3321,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3317,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"1426:3:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1432:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1426:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1416:9:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3315,"name":"bytes","nodeType":"ElementaryTypeName","src":"1420:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1416:18:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1389:45:30"},{"body":{"id":3339,"nodeType":"Block","src":"1479:64:30","statements":[{"expression":{"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3331,"name":"asciiString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"1497:11:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3333,"indexExpression":{"id":3332,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"1509:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1497:14:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3334,"name":"bytesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"1514:11:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3336,"indexExpression":{"id":3335,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"1526:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1514:14:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1497:31:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3338,"nodeType":"ExpressionStatement","src":"1497:31:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3325,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"1464:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3326,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"1469:3:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1464:8:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3340,"initializationExpression":{"assignments":[3323],"declarations":[{"constant":false,"id":3323,"mutability":"mutable","name":"i","nameLocation":"1461:1:30","nodeType":"VariableDeclaration","scope":3340,"src":"1453:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3322,"name":"uint256","nodeType":"ElementaryTypeName","src":"1453:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3324,"nodeType":"VariableDeclarationStatement","src":"1453:9:30"},"loopExpression":{"expression":{"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1474:3:30","subExpression":{"id":3328,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"1476:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3330,"nodeType":"ExpressionStatement","src":"1474:3:30"},"nodeType":"ForStatement","src":"1448:95:30"},{"expression":{"arguments":[{"id":3343,"name":"asciiString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"1570:11:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1563:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3341,"name":"string","nodeType":"ElementaryTypeName","src":"1563:6:30","typeDescriptions":{}}},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1563:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3279,"id":3345,"nodeType":"Return","src":"1556:26:30"}]}]},"documentation":{"id":3273,"nodeType":"StructuredDocumentation","src":"850:167:30","text":"@notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\n @param value value to convert.\n @return the converted ASCII string."},"id":3348,"implemented":true,"kind":"function","modifiers":[],"name":"toASCIIString","nameLocation":"1031:13:30","nodeType":"FunctionDefinition","parameters":{"id":3276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3275,"mutability":"mutable","name":"value","nameLocation":"1053:5:30","nodeType":"VariableDeclaration","scope":3348,"src":"1045:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1045:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1044:15:30"},"returnParameters":{"id":3279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3348,"src":"1083:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3277,"name":"string","nodeType":"ElementaryTypeName","src":"1083:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1082:15:30"},"scope":3349,"src":"1022:577:30","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3350,"src":"57:1544:30","usedErrors":[]}],"src":"32:1570:30"},"id":30},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[3679]},"id":3680,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3351,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:31"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":3352,"nodeType":"StructuredDocumentation","src":"126:67:31","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3679,"linearizedBaseContracts":[3679],"name":"Address","nameLocation":"202:7:31","nodeType":"ContractDefinition","nodes":[{"body":{"id":3366,"nodeType":"Block","src":"1478:254:31","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3360,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3355,"src":"1702:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:31","memberName":"code","nodeType":"MemberAccess","src":"1702:12:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:31","memberName":"length","nodeType":"MemberAccess","src":"1702:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3359,"id":3365,"nodeType":"Return","src":"1695:30:31"}]},"documentation":{"id":3353,"nodeType":"StructuredDocumentation","src":"216:1191:31","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3367,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:31","nodeType":"FunctionDefinition","parameters":{"id":3356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3355,"mutability":"mutable","name":"account","nameLocation":"1440:7:31","nodeType":"VariableDeclaration","scope":3367,"src":"1432:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3354,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:31"},"returnParameters":{"id":3359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3367,"src":"1472:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3357,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:31"},"scope":3679,"src":"1412:320:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3400,"nodeType":"Block","src":"2718:241:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3378,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3679","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3679","typeString":"library Address"}],"id":3377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3376,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:31","typeDescriptions":{}}},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:31","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3381,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"2761:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3375,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3385,"nodeType":"ExpressionStatement","src":"2728:73:31"},{"assignments":[3387,null],"declarations":[{"constant":false,"id":3387,"mutability":"mutable","name":"success","nameLocation":"2818:7:31","nodeType":"VariableDeclaration","scope":3400,"src":"2813:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3386,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3394,"initialValue":{"arguments":[{"hexValue":"","id":3392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3388,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"2831:9:31","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:31","memberName":"call","nodeType":"MemberAccess","src":"2831:14:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3390,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"2853:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:31"},{"expression":{"arguments":[{"id":3396,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3387,"src":"2882:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3395,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3399,"nodeType":"ExpressionStatement","src":"2874:78:31"}]},"documentation":{"id":3368,"nodeType":"StructuredDocumentation","src":"1738:904:31","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3401,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:31","nodeType":"FunctionDefinition","parameters":{"id":3373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3370,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:31","nodeType":"VariableDeclaration","scope":3401,"src":"2666:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3369,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:31","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3372,"mutability":"mutable","name":"amount","nameLocation":"2701:6:31","nodeType":"VariableDeclaration","scope":3401,"src":"2693:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3371,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:31"},"returnParameters":{"id":3374,"nodeType":"ParameterList","parameters":[],"src":"2718:0:31"},"scope":3679,"src":"2647:312:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3418,"nodeType":"Block","src":"3790:96:31","statements":[{"expression":{"arguments":[{"id":3412,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"3829:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3413,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"3837:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3411,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3459,3503],"referencedDeclaration":3503,"src":"3807:21:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3410,"id":3417,"nodeType":"Return","src":"3800:79:31"}]},"documentation":{"id":3402,"nodeType":"StructuredDocumentation","src":"2965:731:31","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3419,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:31","nodeType":"FunctionDefinition","parameters":{"id":3407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3404,"mutability":"mutable","name":"target","nameLocation":"3731:6:31","nodeType":"VariableDeclaration","scope":3419,"src":"3723:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3403,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3406,"mutability":"mutable","name":"data","nameLocation":"3752:4:31","nodeType":"VariableDeclaration","scope":3419,"src":"3739:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3405,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:31"},"returnParameters":{"id":3410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3419,"src":"3776:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3408,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:31"},"scope":3679,"src":"3701:185:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3438,"nodeType":"Block","src":"4255:76:31","statements":[{"expression":{"arguments":[{"id":3432,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"4294:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3433,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"4302:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3435,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"4311:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3431,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3459,3503],"referencedDeclaration":3503,"src":"4272:21:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3430,"id":3437,"nodeType":"Return","src":"4265:59:31"}]},"documentation":{"id":3420,"nodeType":"StructuredDocumentation","src":"3892:211:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3439,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:31","nodeType":"FunctionDefinition","parameters":{"id":3427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3422,"mutability":"mutable","name":"target","nameLocation":"4147:6:31","nodeType":"VariableDeclaration","scope":3439,"src":"4139:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3421,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3424,"mutability":"mutable","name":"data","nameLocation":"4176:4:31","nodeType":"VariableDeclaration","scope":3439,"src":"4163:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3423,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3426,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:31","nodeType":"VariableDeclaration","scope":3439,"src":"4190:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3425,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:31"},"returnParameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3439,"src":"4241:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3428,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:31"},"scope":3679,"src":"4108:223:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3458,"nodeType":"Block","src":"4806:111:31","statements":[{"expression":{"arguments":[{"id":3452,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"4845:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3453,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"4853:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"4859:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3451,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3459,3503],"referencedDeclaration":3503,"src":"4823:21:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3450,"id":3457,"nodeType":"Return","src":"4816:94:31"}]},"documentation":{"id":3440,"nodeType":"StructuredDocumentation","src":"4337:351:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3459,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:31","nodeType":"FunctionDefinition","parameters":{"id":3447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3442,"mutability":"mutable","name":"target","nameLocation":"4732:6:31","nodeType":"VariableDeclaration","scope":3459,"src":"4724:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3441,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3444,"mutability":"mutable","name":"data","nameLocation":"4753:4:31","nodeType":"VariableDeclaration","scope":3459,"src":"4740:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3443,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3446,"mutability":"mutable","name":"value","nameLocation":"4767:5:31","nodeType":"VariableDeclaration","scope":3459,"src":"4759:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3445,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:31"},"returnParameters":{"id":3450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3459,"src":"4792:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3448,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:31"},"scope":3679,"src":"4693:224:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3502,"nodeType":"Block","src":"5344:267:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3476,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3679","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3679","typeString":"library Address"}],"id":3475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3474,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:31","typeDescriptions":{}}},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:31","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"5387:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3473,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3483,"nodeType":"ExpressionStatement","src":"5354:81:31"},{"assignments":[3485,3487],"declarations":[{"constant":false,"id":3485,"mutability":"mutable","name":"success","nameLocation":"5451:7:31","nodeType":"VariableDeclaration","scope":3502,"src":"5446:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3484,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3487,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:31","nodeType":"VariableDeclaration","scope":3502,"src":"5460:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3486,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3494,"initialValue":{"arguments":[{"id":3492,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"5513:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3488,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"5487:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:31","memberName":"call","nodeType":"MemberAccess","src":"5487:11:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"5506:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:31"},{"expression":{"arguments":[{"id":3496,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"5562:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3497,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"5570:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3498,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"5579:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3499,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"5591:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3495,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"5535:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3472,"id":3501,"nodeType":"Return","src":"5528:76:31"}]},"documentation":{"id":3460,"nodeType":"StructuredDocumentation","src":"4923:237:31","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3503,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:31","nodeType":"FunctionDefinition","parameters":{"id":3469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3462,"mutability":"mutable","name":"target","nameLocation":"5213:6:31","nodeType":"VariableDeclaration","scope":3503,"src":"5205:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3461,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3464,"mutability":"mutable","name":"data","nameLocation":"5242:4:31","nodeType":"VariableDeclaration","scope":3503,"src":"5229:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3463,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3466,"mutability":"mutable","name":"value","nameLocation":"5264:5:31","nodeType":"VariableDeclaration","scope":3503,"src":"5256:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3465,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3468,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:31","nodeType":"VariableDeclaration","scope":3503,"src":"5279:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3467,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:31"},"returnParameters":{"id":3472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3503,"src":"5330:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3470,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:31"},"scope":3679,"src":"5165:446:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3519,"nodeType":"Block","src":"5888:97:31","statements":[{"expression":{"arguments":[{"id":3514,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"5924:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3515,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3508,"src":"5932:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3513,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3520,3549],"referencedDeclaration":3549,"src":"5905:18:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3512,"id":3518,"nodeType":"Return","src":"5898:80:31"}]},"documentation":{"id":3504,"nodeType":"StructuredDocumentation","src":"5617:166:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3520,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:31","nodeType":"FunctionDefinition","parameters":{"id":3509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3506,"mutability":"mutable","name":"target","nameLocation":"5824:6:31","nodeType":"VariableDeclaration","scope":3520,"src":"5816:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3505,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3508,"mutability":"mutable","name":"data","nameLocation":"5845:4:31","nodeType":"VariableDeclaration","scope":3520,"src":"5832:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3507,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:31"},"returnParameters":{"id":3512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3520,"src":"5874:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3510,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:31"},"scope":3679,"src":"5788:197:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3548,"nodeType":"Block","src":"6327:168:31","statements":[{"assignments":[3533,3535],"declarations":[{"constant":false,"id":3533,"mutability":"mutable","name":"success","nameLocation":"6343:7:31","nodeType":"VariableDeclaration","scope":3548,"src":"6338:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3532,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3535,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:31","nodeType":"VariableDeclaration","scope":3548,"src":"6352:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3534,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3540,"initialValue":{"arguments":[{"id":3538,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3525,"src":"6397:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3536,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"6379:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:31","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:31","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:31"},{"expression":{"arguments":[{"id":3542,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"6446:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3543,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"6454:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3544,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"6463:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3545,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"6475:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3541,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"6419:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3531,"id":3547,"nodeType":"Return","src":"6412:76:31"}]},"documentation":{"id":3521,"nodeType":"StructuredDocumentation","src":"5991:173:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3549,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:31","nodeType":"FunctionDefinition","parameters":{"id":3528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3523,"mutability":"mutable","name":"target","nameLocation":"6214:6:31","nodeType":"VariableDeclaration","scope":3549,"src":"6206:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3522,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3525,"mutability":"mutable","name":"data","nameLocation":"6243:4:31","nodeType":"VariableDeclaration","scope":3549,"src":"6230:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3524,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3527,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:31","nodeType":"VariableDeclaration","scope":3549,"src":"6257:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3526,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:31"},"returnParameters":{"id":3531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3549,"src":"6313:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3529,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:31"},"scope":3679,"src":"6169:326:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3565,"nodeType":"Block","src":"6771:101:31","statements":[{"expression":{"arguments":[{"id":3560,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"6809:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3561,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"6817:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3559,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3566,3595],"referencedDeclaration":3595,"src":"6788:20:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3558,"id":3564,"nodeType":"Return","src":"6781:84:31"}]},"documentation":{"id":3550,"nodeType":"StructuredDocumentation","src":"6501:168:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3566,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:31","nodeType":"FunctionDefinition","parameters":{"id":3555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3552,"mutability":"mutable","name":"target","nameLocation":"6712:6:31","nodeType":"VariableDeclaration","scope":3566,"src":"6704:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3551,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3554,"mutability":"mutable","name":"data","nameLocation":"6733:4:31","nodeType":"VariableDeclaration","scope":3566,"src":"6720:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3553,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:31"},"returnParameters":{"id":3558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3566,"src":"6757:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3556,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:31"},"scope":3679,"src":"6674:198:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3594,"nodeType":"Block","src":"7213:170:31","statements":[{"assignments":[3579,3581],"declarations":[{"constant":false,"id":3579,"mutability":"mutable","name":"success","nameLocation":"7229:7:31","nodeType":"VariableDeclaration","scope":3594,"src":"7224:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3578,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3581,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:31","nodeType":"VariableDeclaration","scope":3594,"src":"7238:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3580,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3586,"initialValue":{"arguments":[{"id":3584,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"7285:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3582,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"7265:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:31","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:31","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:31"},{"expression":{"arguments":[{"id":3588,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"7334:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3589,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"7342:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3590,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"7351:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3591,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3573,"src":"7363:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3587,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7307:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3577,"id":3593,"nodeType":"Return","src":"7300:76:31"}]},"documentation":{"id":3567,"nodeType":"StructuredDocumentation","src":"6878:175:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3595,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:31","nodeType":"FunctionDefinition","parameters":{"id":3574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3569,"mutability":"mutable","name":"target","nameLocation":"7105:6:31","nodeType":"VariableDeclaration","scope":3595,"src":"7097:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3568,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3571,"mutability":"mutable","name":"data","nameLocation":"7134:4:31","nodeType":"VariableDeclaration","scope":3595,"src":"7121:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3570,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3573,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:31","nodeType":"VariableDeclaration","scope":3595,"src":"7148:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3572,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:31"},"returnParameters":{"id":3577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3595,"src":"7199:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3575,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:31"},"scope":3679,"src":"7058:325:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3633,"nodeType":"Block","src":"7865:434:31","statements":[{"condition":{"id":3609,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"7879:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3631,"nodeType":"Block","src":"8235:58:31","statements":[{"expression":{"arguments":[{"id":3627,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"8257:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3628,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"8269:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3626,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"8249:7:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3630,"nodeType":"ExpressionStatement","src":"8249:33:31"}]},"id":3632,"nodeType":"IfStatement","src":"7875:418:31","trueBody":{"id":3625,"nodeType":"Block","src":"7888:341:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3610,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"7906:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:31","memberName":"length","nodeType":"MemberAccess","src":"7906:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3622,"nodeType":"IfStatement","src":"7902:286:31","trueBody":{"id":3621,"nodeType":"Block","src":"7930:258:31","statements":[{"expression":{"arguments":[{"arguments":[{"id":3616,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"8132:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3615,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"8121:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3614,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3620,"nodeType":"ExpressionStatement","src":"8113:60:31"}]}},{"expression":{"id":3623,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"8208:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3608,"id":3624,"nodeType":"Return","src":"8201:17:31"}]}}]},"documentation":{"id":3596,"nodeType":"StructuredDocumentation","src":"7389:277:31","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3634,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:31","nodeType":"FunctionDefinition","parameters":{"id":3605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3598,"mutability":"mutable","name":"target","nameLocation":"7724:6:31","nodeType":"VariableDeclaration","scope":3634,"src":"7716:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3597,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3600,"mutability":"mutable","name":"success","nameLocation":"7745:7:31","nodeType":"VariableDeclaration","scope":3634,"src":"7740:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3599,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3602,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:31","nodeType":"VariableDeclaration","scope":3634,"src":"7762:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3601,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3604,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:31","nodeType":"VariableDeclaration","scope":3634,"src":"7795:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3603,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:31"},"returnParameters":{"id":3608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3634,"src":"7851:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3606,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:31"},"scope":3679,"src":"7671:628:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3657,"nodeType":"Block","src":"8680:135:31","statements":[{"condition":{"id":3646,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"8694:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3655,"nodeType":"Block","src":"8751:58:31","statements":[{"expression":{"arguments":[{"id":3651,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3639,"src":"8773:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3652,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"8785:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3650,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"8765:7:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3654,"nodeType":"ExpressionStatement","src":"8765:33:31"}]},"id":3656,"nodeType":"IfStatement","src":"8690:119:31","trueBody":{"id":3649,"nodeType":"Block","src":"8703:42:31","statements":[{"expression":{"id":3647,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3639,"src":"8724:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3645,"id":3648,"nodeType":"Return","src":"8717:17:31"}]}}]},"documentation":{"id":3635,"nodeType":"StructuredDocumentation","src":"8305:210:31","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3658,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:31","nodeType":"FunctionDefinition","parameters":{"id":3642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3637,"mutability":"mutable","name":"success","nameLocation":"8560:7:31","nodeType":"VariableDeclaration","scope":3658,"src":"8555:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3636,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3639,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:31","nodeType":"VariableDeclaration","scope":3658,"src":"8577:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3638,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3641,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:31","nodeType":"VariableDeclaration","scope":3658,"src":"8610:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3640,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:31"},"returnParameters":{"id":3645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3644,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3658,"src":"8666:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3643,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:31"},"scope":3679,"src":"8520:295:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3677,"nodeType":"Block","src":"8904:457:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3665,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"8980:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:31","memberName":"length","nodeType":"MemberAccess","src":"8980:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3675,"nodeType":"Block","src":"9310:45:31","statements":[{"expression":{"arguments":[{"id":3672,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"9331:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3671,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:31","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3674,"nodeType":"ExpressionStatement","src":"9324:20:31"}]},"id":3676,"nodeType":"IfStatement","src":"8976:379:31","trueBody":{"id":3670,"nodeType":"Block","src":"9003:301:31","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:31","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:31","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:31"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:31"},"nodeType":"YulFunctionCall","src":"9202:17:31"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:31","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:31","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:31"},"nodeType":"YulFunctionCall","src":"9243:19:31"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:31"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:31"},"nodeType":"YulFunctionCall","src":"9236:44:31"},"nodeType":"YulExpressionStatement","src":"9236:44:31"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3660,"isOffset":false,"isSlot":false,"src":"9208:10:31","valueSize":1},{"declaration":3660,"isOffset":false,"isSlot":false,"src":"9251:10:31","valueSize":1}],"id":3669,"nodeType":"InlineAssembly","src":"9152:142:31"}]}}]},"id":3678,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:31","nodeType":"FunctionDefinition","parameters":{"id":3663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3660,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:31","nodeType":"VariableDeclaration","scope":3678,"src":"8838:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3659,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3662,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:31","nodeType":"VariableDeclaration","scope":3678,"src":"8863:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3661,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:31"},"returnParameters":{"id":3664,"nodeType":"ParameterList","parameters":[],"src":"8904:0:31"},"scope":3679,"src":"8821:540:31","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3680,"src":"194:9169:31","usedErrors":[]}],"src":"101:9263:31"},"id":31},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3701]},"id":3702,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3681,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:32"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3682,"nodeType":"StructuredDocumentation","src":"111:496:32","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3701,"linearizedBaseContracts":[3701],"name":"Context","nameLocation":"626:7:32","nodeType":"ContractDefinition","nodes":[{"body":{"id":3690,"nodeType":"Block","src":"702:34:32","statements":[{"expression":{"expression":{"id":3687,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:32","memberName":"sender","nodeType":"MemberAccess","src":"719:10:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3686,"id":3689,"nodeType":"Return","src":"712:17:32"}]},"id":3691,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:32","nodeType":"FunctionDefinition","parameters":{"id":3683,"nodeType":"ParameterList","parameters":[],"src":"659:2:32"},"returnParameters":{"id":3686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3691,"src":"693:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3684,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:32"},"scope":3701,"src":"640:96:32","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3699,"nodeType":"Block","src":"809:32:32","statements":[{"expression":{"expression":{"id":3696,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:32","memberName":"data","nodeType":"MemberAccess","src":"826:8:32","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3695,"id":3698,"nodeType":"Return","src":"819:15:32"}]},"id":3700,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:32","nodeType":"FunctionDefinition","parameters":{"id":3692,"nodeType":"ParameterList","parameters":[],"src":"759:2:32"},"returnParameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3700,"src":"793:14:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3693,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:32"},"scope":3701,"src":"742:99:32","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3702,"src":"608:235:32","usedErrors":[]}],"src":"86:758:32"},"id":32},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[3811]},"id":3812,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3703,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:33"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":3704,"nodeType":"StructuredDocumentation","src":"218:1201:33","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":3811,"linearizedBaseContracts":[3811],"name":"StorageSlot","nameLocation":"1428:11:33","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":3707,"members":[{"constant":false,"id":3706,"mutability":"mutable","name":"value","nameLocation":"1483:5:33","nodeType":"VariableDeclaration","scope":3707,"src":"1475:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3705,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:33","nodeType":"StructDefinition","scope":3811,"src":"1446:49:33","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":3710,"members":[{"constant":false,"id":3709,"mutability":"mutable","name":"value","nameLocation":"1535:5:33","nodeType":"VariableDeclaration","scope":3710,"src":"1530:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3708,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:33","nodeType":"StructDefinition","scope":3811,"src":"1501:46:33","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":3713,"members":[{"constant":false,"id":3712,"mutability":"mutable","name":"value","nameLocation":"1590:5:33","nodeType":"VariableDeclaration","scope":3713,"src":"1582:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3711,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:33","nodeType":"StructDefinition","scope":3811,"src":"1553:49:33","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":3716,"members":[{"constant":false,"id":3715,"mutability":"mutable","name":"value","nameLocation":"1645:5:33","nodeType":"VariableDeclaration","scope":3716,"src":"1637:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:33","nodeType":"StructDefinition","scope":3811,"src":"1608:49:33","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":3719,"members":[{"constant":false,"id":3718,"mutability":"mutable","name":"value","nameLocation":"1698:5:33","nodeType":"VariableDeclaration","scope":3719,"src":"1691:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3717,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:33","nodeType":"StructDefinition","scope":3811,"src":"1663:47:33","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":3722,"members":[{"constant":false,"id":3721,"mutability":"mutable","name":"value","nameLocation":"1749:5:33","nodeType":"VariableDeclaration","scope":3722,"src":"1743:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3720,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:33","nodeType":"StructDefinition","scope":3811,"src":"1716:45:33","visibility":"public"},{"body":{"id":3732,"nodeType":"Block","src":"1943:106:33","statements":[{"AST":{"nodeType":"YulBlock","src":"2005:38:33","statements":[{"nodeType":"YulAssignment","src":"2019:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"2029:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2019:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3729,"isOffset":false,"isSlot":true,"src":"2019:6:33","suffix":"slot","valueSize":1},{"declaration":3725,"isOffset":false,"isSlot":false,"src":"2029:4:33","valueSize":1}],"id":3731,"nodeType":"InlineAssembly","src":"1996:47:33"}]},"documentation":{"id":3723,"nodeType":"StructuredDocumentation","src":"1767:87:33","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":3733,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:33","nodeType":"FunctionDefinition","parameters":{"id":3726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3725,"mutability":"mutable","name":"slot","nameLocation":"1891:4:33","nodeType":"VariableDeclaration","scope":3733,"src":"1883:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3724,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:33"},"returnParameters":{"id":3730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3729,"mutability":"mutable","name":"r","nameLocation":"1940:1:33","nodeType":"VariableDeclaration","scope":3733,"src":"1920:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3707_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":3728,"nodeType":"UserDefinedTypeName","pathNode":{"id":3727,"name":"AddressSlot","nameLocations":["1920:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":3707,"src":"1920:11:33"},"referencedDeclaration":3707,"src":"1920:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3707_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:33"},"scope":3811,"src":"1859:190:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3743,"nodeType":"Block","src":"2231:106:33","statements":[{"AST":{"nodeType":"YulBlock","src":"2293:38:33","statements":[{"nodeType":"YulAssignment","src":"2307:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"2317:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2307:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3740,"isOffset":false,"isSlot":true,"src":"2307:6:33","suffix":"slot","valueSize":1},{"declaration":3736,"isOffset":false,"isSlot":false,"src":"2317:4:33","valueSize":1}],"id":3742,"nodeType":"InlineAssembly","src":"2284:47:33"}]},"documentation":{"id":3734,"nodeType":"StructuredDocumentation","src":"2055:87:33","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":3744,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:33","nodeType":"FunctionDefinition","parameters":{"id":3737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3736,"mutability":"mutable","name":"slot","nameLocation":"2179:4:33","nodeType":"VariableDeclaration","scope":3744,"src":"2171:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:33"},"returnParameters":{"id":3741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3740,"mutability":"mutable","name":"r","nameLocation":"2228:1:33","nodeType":"VariableDeclaration","scope":3744,"src":"2208:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3710_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":3739,"nodeType":"UserDefinedTypeName","pathNode":{"id":3738,"name":"BooleanSlot","nameLocations":["2208:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":3710,"src":"2208:11:33"},"referencedDeclaration":3710,"src":"2208:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3710_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:33"},"scope":3811,"src":"2147:190:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3754,"nodeType":"Block","src":"2519:106:33","statements":[{"AST":{"nodeType":"YulBlock","src":"2581:38:33","statements":[{"nodeType":"YulAssignment","src":"2595:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"2605:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2595:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3751,"isOffset":false,"isSlot":true,"src":"2595:6:33","suffix":"slot","valueSize":1},{"declaration":3747,"isOffset":false,"isSlot":false,"src":"2605:4:33","valueSize":1}],"id":3753,"nodeType":"InlineAssembly","src":"2572:47:33"}]},"documentation":{"id":3745,"nodeType":"StructuredDocumentation","src":"2343:87:33","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":3755,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:33","nodeType":"FunctionDefinition","parameters":{"id":3748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3747,"mutability":"mutable","name":"slot","nameLocation":"2467:4:33","nodeType":"VariableDeclaration","scope":3755,"src":"2459:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3746,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:33"},"returnParameters":{"id":3752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3751,"mutability":"mutable","name":"r","nameLocation":"2516:1:33","nodeType":"VariableDeclaration","scope":3755,"src":"2496:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3713_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":3750,"nodeType":"UserDefinedTypeName","pathNode":{"id":3749,"name":"Bytes32Slot","nameLocations":["2496:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":3713,"src":"2496:11:33"},"referencedDeclaration":3713,"src":"2496:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3713_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:33"},"scope":3811,"src":"2435:190:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3765,"nodeType":"Block","src":"2807:106:33","statements":[{"AST":{"nodeType":"YulBlock","src":"2869:38:33","statements":[{"nodeType":"YulAssignment","src":"2883:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"2893:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2883:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3762,"isOffset":false,"isSlot":true,"src":"2883:6:33","suffix":"slot","valueSize":1},{"declaration":3758,"isOffset":false,"isSlot":false,"src":"2893:4:33","valueSize":1}],"id":3764,"nodeType":"InlineAssembly","src":"2860:47:33"}]},"documentation":{"id":3756,"nodeType":"StructuredDocumentation","src":"2631:87:33","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":3766,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:33","nodeType":"FunctionDefinition","parameters":{"id":3759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3758,"mutability":"mutable","name":"slot","nameLocation":"2755:4:33","nodeType":"VariableDeclaration","scope":3766,"src":"2747:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:33"},"returnParameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3762,"mutability":"mutable","name":"r","nameLocation":"2804:1:33","nodeType":"VariableDeclaration","scope":3766,"src":"2784:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3716_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":3761,"nodeType":"UserDefinedTypeName","pathNode":{"id":3760,"name":"Uint256Slot","nameLocations":["2784:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":3716,"src":"2784:11:33"},"referencedDeclaration":3716,"src":"2784:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3716_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:33"},"scope":3811,"src":"2723:190:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3776,"nodeType":"Block","src":"3092:106:33","statements":[{"AST":{"nodeType":"YulBlock","src":"3154:38:33","statements":[{"nodeType":"YulAssignment","src":"3168:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"3178:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3168:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3773,"isOffset":false,"isSlot":true,"src":"3168:6:33","suffix":"slot","valueSize":1},{"declaration":3769,"isOffset":false,"isSlot":false,"src":"3178:4:33","valueSize":1}],"id":3775,"nodeType":"InlineAssembly","src":"3145:47:33"}]},"documentation":{"id":3767,"nodeType":"StructuredDocumentation","src":"2919:86:33","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":3777,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:33","nodeType":"FunctionDefinition","parameters":{"id":3770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3769,"mutability":"mutable","name":"slot","nameLocation":"3041:4:33","nodeType":"VariableDeclaration","scope":3777,"src":"3033:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:33"},"returnParameters":{"id":3774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3773,"mutability":"mutable","name":"r","nameLocation":"3089:1:33","nodeType":"VariableDeclaration","scope":3777,"src":"3070:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3719_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":3772,"nodeType":"UserDefinedTypeName","pathNode":{"id":3771,"name":"StringSlot","nameLocations":["3070:10:33"],"nodeType":"IdentifierPath","referencedDeclaration":3719,"src":"3070:10:33"},"referencedDeclaration":3719,"src":"3070:10:33","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3719_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:33"},"scope":3811,"src":"3010:188:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3787,"nodeType":"Block","src":"3400:112:33","statements":[{"AST":{"nodeType":"YulBlock","src":"3462:44:33","statements":[{"nodeType":"YulAssignment","src":"3476:20:33","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3486:10:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3476:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3784,"isOffset":false,"isSlot":true,"src":"3476:6:33","suffix":"slot","valueSize":1},{"declaration":3780,"isOffset":false,"isSlot":true,"src":"3486:10:33","suffix":"slot","valueSize":1}],"id":3786,"nodeType":"InlineAssembly","src":"3453:53:33"}]},"documentation":{"id":3778,"nodeType":"StructuredDocumentation","src":"3204:101:33","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":3788,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:33","nodeType":"FunctionDefinition","parameters":{"id":3781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3780,"mutability":"mutable","name":"store","nameLocation":"3348:5:33","nodeType":"VariableDeclaration","scope":3788,"src":"3333:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3779,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:33"},"returnParameters":{"id":3785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3784,"mutability":"mutable","name":"r","nameLocation":"3397:1:33","nodeType":"VariableDeclaration","scope":3788,"src":"3378:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3719_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":3783,"nodeType":"UserDefinedTypeName","pathNode":{"id":3782,"name":"StringSlot","nameLocations":["3378:10:33"],"nodeType":"IdentifierPath","referencedDeclaration":3719,"src":"3378:10:33"},"referencedDeclaration":3719,"src":"3378:10:33","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3719_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:33"},"scope":3811,"src":"3310:202:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3798,"nodeType":"Block","src":"3688:106:33","statements":[{"AST":{"nodeType":"YulBlock","src":"3750:38:33","statements":[{"nodeType":"YulAssignment","src":"3764:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"3774:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3764:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3795,"isOffset":false,"isSlot":true,"src":"3764:6:33","suffix":"slot","valueSize":1},{"declaration":3791,"isOffset":false,"isSlot":false,"src":"3774:4:33","valueSize":1}],"id":3797,"nodeType":"InlineAssembly","src":"3741:47:33"}]},"documentation":{"id":3789,"nodeType":"StructuredDocumentation","src":"3518:85:33","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":3799,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:33","nodeType":"FunctionDefinition","parameters":{"id":3792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3791,"mutability":"mutable","name":"slot","nameLocation":"3638:4:33","nodeType":"VariableDeclaration","scope":3799,"src":"3630:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3790,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:33"},"returnParameters":{"id":3796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3795,"mutability":"mutable","name":"r","nameLocation":"3685:1:33","nodeType":"VariableDeclaration","scope":3799,"src":"3667:19:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3722_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3794,"nodeType":"UserDefinedTypeName","pathNode":{"id":3793,"name":"BytesSlot","nameLocations":["3667:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":3722,"src":"3667:9:33"},"referencedDeclaration":3722,"src":"3667:9:33","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3722_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:33"},"scope":3811,"src":"3608:186:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3809,"nodeType":"Block","src":"3991:112:33","statements":[{"AST":{"nodeType":"YulBlock","src":"4053:44:33","statements":[{"nodeType":"YulAssignment","src":"4067:20:33","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4077:10:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4067:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3806,"isOffset":false,"isSlot":true,"src":"4067:6:33","suffix":"slot","valueSize":1},{"declaration":3802,"isOffset":false,"isSlot":true,"src":"4077:10:33","suffix":"slot","valueSize":1}],"id":3808,"nodeType":"InlineAssembly","src":"4044:53:33"}]},"documentation":{"id":3800,"nodeType":"StructuredDocumentation","src":"3800:99:33","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":3810,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:33","nodeType":"FunctionDefinition","parameters":{"id":3803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3802,"mutability":"mutable","name":"store","nameLocation":"3940:5:33","nodeType":"VariableDeclaration","scope":3810,"src":"3926:19:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3801,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:33"},"returnParameters":{"id":3807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3806,"mutability":"mutable","name":"r","nameLocation":"3988:1:33","nodeType":"VariableDeclaration","scope":3810,"src":"3970:19:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3722_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3805,"nodeType":"UserDefinedTypeName","pathNode":{"id":3804,"name":"BytesSlot","nameLocations":["3970:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":3722,"src":"3970:9:33"},"referencedDeclaration":3722,"src":"3970:9:33","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3722_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:33"},"scope":3811,"src":"3904:199:33","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3812,"src":"1420:2685:33","usedErrors":[]}],"src":"193:3913:33"},"id":33},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4906],"SignedMath":[5011],"Strings":[4040]},"id":4041,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3813,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:34"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3814,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4041,"sourceUnit":4907,"src":"126:25:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":3815,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4041,"sourceUnit":5012,"src":"152:31:34","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3816,"nodeType":"StructuredDocumentation","src":"185:34:34","text":" @dev String operations."},"fullyImplemented":true,"id":4040,"linearizedBaseContracts":[4040],"name":"Strings","nameLocation":"228:7:34","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3819,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:34","nodeType":"VariableDeclaration","scope":4040,"src":"242:54:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3817,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:34","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3822,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:34","nodeType":"VariableDeclaration","scope":4040,"src":"302:43:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3820,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:34","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:34","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3869,"nodeType":"Block","src":"518:625:34","statements":[{"id":3868,"nodeType":"UncheckedBlock","src":"528:609:34","statements":[{"assignments":[3831],"declarations":[{"constant":false,"id":3831,"mutability":"mutable","name":"length","nameLocation":"560:6:34","nodeType":"VariableDeclaration","scope":3868,"src":"552:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3830,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3838,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"580:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3832,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"569:4:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4906_$","typeString":"type(library Math)"}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:34","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4743,"src":"569:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:34"},{"assignments":[3840],"declarations":[{"constant":false,"id":3840,"mutability":"mutable","name":"buffer","nameLocation":"618:6:34","nodeType":"VariableDeclaration","scope":3868,"src":"604:20:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3839,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3845,"initialValue":{"arguments":[{"id":3843,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"638:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:34","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3841,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:34"},{"assignments":[3847],"declarations":[{"constant":false,"id":3847,"mutability":"mutable","name":"ptr","nameLocation":"667:3:34","nodeType":"VariableDeclaration","scope":3868,"src":"659:11:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3846,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3848,"nodeType":"VariableDeclarationStatement","src":"659:11:34"},{"AST":{"nodeType":"YulBlock","src":"740:67:34","statements":[{"nodeType":"YulAssignment","src":"758:35:34","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:34"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:34","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:34"},"nodeType":"YulFunctionCall","src":"777:15:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:34"},"nodeType":"YulFunctionCall","src":"765:28:34"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:34"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3840,"isOffset":false,"isSlot":false,"src":"769:6:34","valueSize":1},{"declaration":3831,"isOffset":false,"isSlot":false,"src":"785:6:34","valueSize":1},{"declaration":3847,"isOffset":false,"isSlot":false,"src":"758:3:34","valueSize":1}],"id":3849,"nodeType":"InlineAssembly","src":"731:76:34"},{"body":{"id":3864,"nodeType":"Block","src":"833:267:34","statements":[{"expression":{"id":3852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:34","subExpression":{"id":3851,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"851:3:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3853,"nodeType":"ExpressionStatement","src":"851:5:34"},{"AST":{"nodeType":"YulBlock","src":"934:84:34","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:34"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:34","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:34"},"nodeType":"YulFunctionCall","src":"974:14:34"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:34"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:34"},"nodeType":"YulFunctionCall","src":"969:30:34"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:34"},"nodeType":"YulFunctionCall","src":"956:44:34"},"nodeType":"YulExpressionStatement","src":"956:44:34"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3819,"isOffset":false,"isSlot":false,"src":"990:8:34","valueSize":1},{"declaration":3847,"isOffset":false,"isSlot":false,"src":"964:3:34","valueSize":1},{"declaration":3825,"isOffset":false,"isSlot":false,"src":"978:5:34","valueSize":1}],"id":3854,"nodeType":"InlineAssembly","src":"925:93:34"},{"expression":{"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3855,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"1035:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:34","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3858,"nodeType":"ExpressionStatement","src":"1035:11:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3859,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"1068:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3863,"nodeType":"IfStatement","src":"1064:21:34","trueBody":{"id":3862,"nodeType":"Break","src":"1080:5:34"}}]},"condition":{"hexValue":"74727565","id":3850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3865,"nodeType":"WhileStatement","src":"820:280:34"},{"expression":{"id":3866,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"1120:6:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3829,"id":3867,"nodeType":"Return","src":"1113:13:34"}]}]},"documentation":{"id":3823,"nodeType":"StructuredDocumentation","src":"352:90:34","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3870,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:34","nodeType":"FunctionDefinition","parameters":{"id":3826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3825,"mutability":"mutable","name":"value","nameLocation":"473:5:34","nodeType":"VariableDeclaration","scope":3870,"src":"465:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3824,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:34"},"returnParameters":{"id":3829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3870,"src":"503:13:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3827,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:34"},"scope":4040,"src":"447:696:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3897,"nodeType":"Block","src":"1313:103:34","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3882,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"1354:5:34","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:34","trueExpression":{"hexValue":"2d","id":3885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":3891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"1400:5:34","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":3889,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5011,"src":"1385:10:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$5011_$","typeString":"type(library SignedMath)"}},"id":3890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:34","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":5010,"src":"1385:14:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3888,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[3870,3898],"referencedDeclaration":3870,"src":"1376:8:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3880,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:34","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:34","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:34","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:34","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3878,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:34","typeDescriptions":{}}},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3877,"id":3896,"nodeType":"Return","src":"1323:86:34"}]},"documentation":{"id":3871,"nodeType":"StructuredDocumentation","src":"1149:89:34","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":3898,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:34","nodeType":"FunctionDefinition","parameters":{"id":3874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3873,"mutability":"mutable","name":"value","nameLocation":"1268:5:34","nodeType":"VariableDeclaration","scope":3898,"src":"1261:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3872,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:34","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:34"},"returnParameters":{"id":3877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3898,"src":"1298:13:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3875,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:34"},"scope":4040,"src":"1243:173:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3917,"nodeType":"Block","src":"1595:100:34","statements":[{"id":3916,"nodeType":"UncheckedBlock","src":"1605:84:34","statements":[{"expression":{"arguments":[{"id":3907,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"1648:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"1667:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3908,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"1655:4:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4906_$","typeString":"type(library Math)"}},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:34","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4866,"src":"1655:11:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3906,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3918,3994,4014],"referencedDeclaration":3994,"src":"1636:11:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3905,"id":3915,"nodeType":"Return","src":"1629:49:34"}]}]},"documentation":{"id":3899,"nodeType":"StructuredDocumentation","src":"1422:94:34","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3918,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:34","nodeType":"FunctionDefinition","parameters":{"id":3902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3901,"mutability":"mutable","name":"value","nameLocation":"1550:5:34","nodeType":"VariableDeclaration","scope":3918,"src":"1542:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3900,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:34"},"returnParameters":{"id":3905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3918,"src":"1580:13:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3903,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:34"},"scope":4040,"src":"1521:174:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3993,"nodeType":"Block","src":"1908:347:34","statements":[{"assignments":[3929],"declarations":[{"constant":false,"id":3929,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:34","nodeType":"VariableDeclaration","scope":3993,"src":"1918:19:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3928,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3938,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:34","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3933,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3923,"src":"1954:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:34","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:34","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3930,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:34"},{"expression":{"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3939,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"1975:6:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3941,"indexExpression":{"hexValue":"30","id":3940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3944,"nodeType":"ExpressionStatement","src":"1975:15:34"},{"expression":{"id":3949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3945,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"2000:6:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3947,"indexExpression":{"hexValue":"31","id":3946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3950,"nodeType":"ExpressionStatement","src":"2000:15:34"},{"body":{"id":3979,"nodeType":"Block","src":"2070:83:34","statements":[{"expression":{"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3965,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"2084:6:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3967,"indexExpression":{"id":3966,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"2091:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3968,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"2096:8:34","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3972,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3921,"src":"2105:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:34","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:34","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3974,"nodeType":"ExpressionStatement","src":"2084:33:34"},{"expression":{"id":3977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3975,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3921,"src":"2131:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:34","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3978,"nodeType":"ExpressionStatement","src":"2131:11:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3959,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"2058:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3980,"initializationExpression":{"assignments":[3952],"declarations":[{"constant":false,"id":3952,"mutability":"mutable","name":"i","nameLocation":"2038:1:34","nodeType":"VariableDeclaration","scope":3980,"src":"2030:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3951,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3958,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:34","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3954,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3923,"src":"2046:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:34"},"loopExpression":{"expression":{"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:34","subExpression":{"id":3962,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"2067:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3964,"nodeType":"ExpressionStatement","src":"2065:3:34"},"nodeType":"ForStatement","src":"2025:128:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3921,"src":"2170:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3981,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3987,"nodeType":"ExpressionStatement","src":"2162:55:34"},{"expression":{"arguments":[{"id":3990,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"2241:6:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:34","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3988,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:34","typeDescriptions":{}}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3927,"id":3992,"nodeType":"Return","src":"2227:21:34"}]},"documentation":{"id":3919,"nodeType":"StructuredDocumentation","src":"1701:112:34","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3994,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:34","nodeType":"FunctionDefinition","parameters":{"id":3924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3921,"mutability":"mutable","name":"value","nameLocation":"1847:5:34","nodeType":"VariableDeclaration","scope":3994,"src":"1839:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3920,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3923,"mutability":"mutable","name":"length","nameLocation":"1862:6:34","nodeType":"VariableDeclaration","scope":3994,"src":"1854:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3922,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:34"},"returnParameters":{"id":3927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3994,"src":"1893:13:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3925,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:34"},"scope":4040,"src":"1818:437:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4013,"nodeType":"Block","src":"2480:76:34","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":4007,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3997,"src":"2525:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4006,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4005,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:34","typeDescriptions":{}}},"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4003,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:34","typeDescriptions":{}}},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4010,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"2533:15:34","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4002,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3918,3994,4014],"referencedDeclaration":3994,"src":"2497:11:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4001,"id":4012,"nodeType":"Return","src":"2490:59:34"}]},"documentation":{"id":3995,"nodeType":"StructuredDocumentation","src":"2261:141:34","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":4014,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:34","nodeType":"FunctionDefinition","parameters":{"id":3998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3997,"mutability":"mutable","name":"addr","nameLocation":"2436:4:34","nodeType":"VariableDeclaration","scope":4014,"src":"2428:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3996,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:34"},"returnParameters":{"id":4001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4014,"src":"2465:13:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3999,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:34"},"scope":4040,"src":"2407:149:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4038,"nodeType":"Block","src":"2711:66:34","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4027,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"2744:1:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:34","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4025,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:34","typeDescriptions":{}}},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4024,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:34","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":4033,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"2767:1:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:34","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4031,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:34","typeDescriptions":{}}},"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4030,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:34","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4023,"id":4037,"nodeType":"Return","src":"2721:49:34"}]},"documentation":{"id":4015,"nodeType":"StructuredDocumentation","src":"2562:66:34","text":" @dev Returns true if the two strings are equal."},"id":4039,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:34","nodeType":"FunctionDefinition","parameters":{"id":4020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4017,"mutability":"mutable","name":"a","nameLocation":"2662:1:34","nodeType":"VariableDeclaration","scope":4039,"src":"2648:15:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4016,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4019,"mutability":"mutable","name":"b","nameLocation":"2679:1:34","nodeType":"VariableDeclaration","scope":4039,"src":"2665:15:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4018,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:34"},"returnParameters":{"id":4023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4039,"src":"2705:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4021,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:34"},"scope":4040,"src":"2633:144:34","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4041,"src":"220:2559:34","usedErrors":[]}],"src":"101:2679:34"},"id":34},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4906]},"id":4907,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4042,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:35"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":4043,"nodeType":"StructuredDocumentation","src":"128:73:35","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4906,"linearizedBaseContracts":[4906],"name":"Math","nameLocation":"210:4:35","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":4047,"members":[{"id":4044,"name":"Down","nameLocation":"245:4:35","nodeType":"EnumValue","src":"245:4:35"},{"id":4045,"name":"Up","nameLocation":"287:2:35","nodeType":"EnumValue","src":"287:2:35"},{"id":4046,"name":"Zero","nameLocation":"318:4:35","nodeType":"EnumValue","src":"318:4:35"}],"name":"Rounding","nameLocation":"226:8:35","nodeType":"EnumDefinition","src":"221:122:35"},{"body":{"id":4064,"nodeType":"Block","src":"480:37:35","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4057,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"497:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4058,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"501:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4061,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"509:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:35","trueExpression":{"id":4060,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"505:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4056,"id":4063,"nodeType":"Return","src":"490:20:35"}]},"documentation":{"id":4048,"nodeType":"StructuredDocumentation","src":"349:59:35","text":" @dev Returns the largest of two numbers."},"id":4065,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:35","nodeType":"FunctionDefinition","parameters":{"id":4053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4050,"mutability":"mutable","name":"a","nameLocation":"434:1:35","nodeType":"VariableDeclaration","scope":4065,"src":"426:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4049,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4052,"mutability":"mutable","name":"b","nameLocation":"445:1:35","nodeType":"VariableDeclaration","scope":4065,"src":"437:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4051,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:35"},"returnParameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4065,"src":"471:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4054,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:35"},"scope":4906,"src":"413:104:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4082,"nodeType":"Block","src":"655:37:35","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4075,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4068,"src":"672:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4076,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4070,"src":"676:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4079,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4070,"src":"684:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:35","trueExpression":{"id":4078,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4068,"src":"680:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4074,"id":4081,"nodeType":"Return","src":"665:20:35"}]},"documentation":{"id":4066,"nodeType":"StructuredDocumentation","src":"523:60:35","text":" @dev Returns the smallest of two numbers."},"id":4083,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:35","nodeType":"FunctionDefinition","parameters":{"id":4071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4068,"mutability":"mutable","name":"a","nameLocation":"609:1:35","nodeType":"VariableDeclaration","scope":4083,"src":"601:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4067,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4070,"mutability":"mutable","name":"b","nameLocation":"620:1:35","nodeType":"VariableDeclaration","scope":4083,"src":"612:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4069,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:35"},"returnParameters":{"id":4074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4073,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4083,"src":"646:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4072,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:35"},"scope":4906,"src":"588:104:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4105,"nodeType":"Block","src":"876:82:35","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4093,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"931:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4094,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"935:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4096,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4097,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"941:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4098,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"945:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4100,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4092,"id":4104,"nodeType":"Return","src":"923:28:35"}]},"documentation":{"id":4084,"nodeType":"StructuredDocumentation","src":"698:102:35","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":4106,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:35","nodeType":"FunctionDefinition","parameters":{"id":4089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4086,"mutability":"mutable","name":"a","nameLocation":"830:1:35","nodeType":"VariableDeclaration","scope":4106,"src":"822:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4085,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4088,"mutability":"mutable","name":"b","nameLocation":"841:1:35","nodeType":"VariableDeclaration","scope":4106,"src":"833:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4087,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:35"},"returnParameters":{"id":4092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4106,"src":"867:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4090,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:35"},"scope":4906,"src":"805:153:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4130,"nodeType":"Block","src":"1228:123:35","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4116,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"1316:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4120,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"1330:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4123,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4124,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"1339:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:35","trueExpression":{"hexValue":"30","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4115,"id":4129,"nodeType":"Return","src":"1309:35:35"}]},"documentation":{"id":4107,"nodeType":"StructuredDocumentation","src":"964:188:35","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":4131,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:35","nodeType":"FunctionDefinition","parameters":{"id":4112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4109,"mutability":"mutable","name":"a","nameLocation":"1182:1:35","nodeType":"VariableDeclaration","scope":4131,"src":"1174:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4108,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4111,"mutability":"mutable","name":"b","nameLocation":"1193:1:35","nodeType":"VariableDeclaration","scope":4131,"src":"1185:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4110,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:35"},"returnParameters":{"id":4115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4131,"src":"1219:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4113,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:35"},"scope":4906,"src":"1157:194:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4253,"nodeType":"Block","src":"1765:4115:35","statements":[{"id":4252,"nodeType":"UncheckedBlock","src":"1775:4099:35","statements":[{"assignments":[4144],"declarations":[{"constant":false,"id":4144,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:35","nodeType":"VariableDeclaration","scope":4252,"src":"2096:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4143,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4145,"nodeType":"VariableDeclarationStatement","src":"2096:13:35"},{"assignments":[4147],"declarations":[{"constant":false,"id":4147,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:35","nodeType":"VariableDeclaration","scope":4252,"src":"2168:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4146,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4148,"nodeType":"VariableDeclarationStatement","src":"2168:13:35"},{"AST":{"nodeType":"YulBlock","src":"2248:157:35","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:35","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:35"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:35","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:35"},"nodeType":"YulFunctionCall","src":"2289:6:35"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:35"},"nodeType":"YulFunctionCall","src":"2276:20:35"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:35","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:35","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:35"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:35"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:35"},"nodeType":"YulFunctionCall","src":"2322:9:35"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:35"}]},{"nodeType":"YulAssignment","src":"2348:43:35","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:35"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:35"},"nodeType":"YulFunctionCall","src":"2361:14:35"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:35"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:35"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:35"},"nodeType":"YulFunctionCall","src":"2377:13:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:35"},"nodeType":"YulFunctionCall","src":"2357:34:35"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:35"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4144,"isOffset":false,"isSlot":false,"src":"2313:5:35","valueSize":1},{"declaration":4144,"isOffset":false,"isSlot":false,"src":"2369:5:35","valueSize":1},{"declaration":4144,"isOffset":false,"isSlot":false,"src":"2384:5:35","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"2348:5:35","valueSize":1},{"declaration":4134,"isOffset":false,"isSlot":false,"src":"2283:1:35","valueSize":1},{"declaration":4134,"isOffset":false,"isSlot":false,"src":"2326:1:35","valueSize":1},{"declaration":4136,"isOffset":false,"isSlot":false,"src":"2286:1:35","valueSize":1},{"declaration":4136,"isOffset":false,"isSlot":false,"src":"2329:1:35","valueSize":1}],"id":4149,"nodeType":"InlineAssembly","src":"2239:166:35"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4150,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4147,"src":"2486:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4158,"nodeType":"IfStatement","src":"2482:368:35","trueBody":{"id":4157,"nodeType":"Block","src":"2498:352:35","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4153,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"2816:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4154,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"2824:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4142,"id":4156,"nodeType":"Return","src":"2809:26:35"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4160,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"2960:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4161,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4147,"src":"2974:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":4163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":4159,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:35","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4165,"nodeType":"ExpressionStatement","src":"2952:53:35"},{"assignments":[4167],"declarations":[{"constant":false,"id":4167,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:35","nodeType":"VariableDeclaration","scope":4252,"src":"3261:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4166,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4168,"nodeType":"VariableDeclarationStatement","src":"3261:17:35"},{"AST":{"nodeType":"YulBlock","src":"3301:291:35","statements":[{"nodeType":"YulAssignment","src":"3370:38:35","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:35"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:35"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:35"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:35"},"nodeType":"YulFunctionCall","src":"3383:25:35"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:35"}]},{"nodeType":"YulAssignment","src":"3490:41:35","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:35"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:35"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:35"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:35"},"nodeType":"YulFunctionCall","src":"3510:20:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:35"},"nodeType":"YulFunctionCall","src":"3499:32:35"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:35"}]},{"nodeType":"YulAssignment","src":"3548:30:35","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:35"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:35"},"nodeType":"YulFunctionCall","src":"3557:21:35"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:35"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4138,"isOffset":false,"isSlot":false,"src":"3396:11:35","valueSize":1},{"declaration":4144,"isOffset":false,"isSlot":false,"src":"3524:5:35","valueSize":1},{"declaration":4144,"isOffset":false,"isSlot":false,"src":"3548:5:35","valueSize":1},{"declaration":4144,"isOffset":false,"isSlot":false,"src":"3561:5:35","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"3490:5:35","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"3503:5:35","valueSize":1},{"declaration":4167,"isOffset":false,"isSlot":false,"src":"3370:9:35","valueSize":1},{"declaration":4167,"isOffset":false,"isSlot":false,"src":"3513:9:35","valueSize":1},{"declaration":4167,"isOffset":false,"isSlot":false,"src":"3568:9:35","valueSize":1},{"declaration":4134,"isOffset":false,"isSlot":false,"src":"3390:1:35","valueSize":1},{"declaration":4136,"isOffset":false,"isSlot":false,"src":"3393:1:35","valueSize":1}],"id":4169,"nodeType":"InlineAssembly","src":"3292:300:35"},{"assignments":[4171],"declarations":[{"constant":false,"id":4171,"mutability":"mutable","name":"twos","nameLocation":"3907:4:35","nodeType":"VariableDeclaration","scope":4252,"src":"3899:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4170,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4179,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4172,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"3914:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:35","subExpression":{"id":4173,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"3930:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4177,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:35"},{"AST":{"nodeType":"YulBlock","src":"3969:362:35","statements":[{"nodeType":"YulAssignment","src":"4034:37:35","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:35"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:35"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:35"},"nodeType":"YulFunctionCall","src":"4049:22:35"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:35"}]},{"nodeType":"YulAssignment","src":"4138:25:35","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:35"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:35"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:35"},"nodeType":"YulFunctionCall","src":"4147:16:35"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:35"}]},{"nodeType":"YulAssignment","src":"4278:39:35","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:35","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:35"},"nodeType":"YulFunctionCall","src":"4294:12:35"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:35"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:35"},"nodeType":"YulFunctionCall","src":"4290:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:35","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:35"},"nodeType":"YulFunctionCall","src":"4286:31:35"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:35"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4138,"isOffset":false,"isSlot":false,"src":"4034:11:35","valueSize":1},{"declaration":4138,"isOffset":false,"isSlot":false,"src":"4053:11:35","valueSize":1},{"declaration":4144,"isOffset":false,"isSlot":false,"src":"4138:5:35","valueSize":1},{"declaration":4144,"isOffset":false,"isSlot":false,"src":"4151:5:35","valueSize":1},{"declaration":4171,"isOffset":false,"isSlot":false,"src":"4066:4:35","valueSize":1},{"declaration":4171,"isOffset":false,"isSlot":false,"src":"4158:4:35","valueSize":1},{"declaration":4171,"isOffset":false,"isSlot":false,"src":"4278:4:35","valueSize":1},{"declaration":4171,"isOffset":false,"isSlot":false,"src":"4301:4:35","valueSize":1},{"declaration":4171,"isOffset":false,"isSlot":false,"src":"4308:4:35","valueSize":1}],"id":4180,"nodeType":"InlineAssembly","src":"3960:371:35"},{"expression":{"id":4185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4181,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"4397:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4182,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4147,"src":"4406:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4183,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"4414:4:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4186,"nodeType":"ExpressionStatement","src":"4397:21:35"},{"assignments":[4188],"declarations":[{"constant":false,"id":4188,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:35","nodeType":"VariableDeclaration","scope":4252,"src":"4736:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4187,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4195,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:35","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4190,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"4759:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4192,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:35"},{"expression":{"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4196,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"4992:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4198,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"5007:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4199,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5021:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4203,"nodeType":"ExpressionStatement","src":"4992:36:35"},{"expression":{"id":4210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4204,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5061:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4206,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"5076:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4207,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5090:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4211,"nodeType":"ExpressionStatement","src":"5061:36:35"},{"expression":{"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4212,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5131:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4214,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"5146:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4215,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5160:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4219,"nodeType":"ExpressionStatement","src":"5131:36:35"},{"expression":{"id":4226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4220,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5201:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4222,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"5216:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4223,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5230:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4227,"nodeType":"ExpressionStatement","src":"5201:36:35"},{"expression":{"id":4234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4228,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5271:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4230,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"5286:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4231,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5300:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4235,"nodeType":"ExpressionStatement","src":"5271:36:35"},{"expression":{"id":4242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4236,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5342:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4238,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"5357:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4239,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5371:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4243,"nodeType":"ExpressionStatement","src":"5342:36:35"},{"expression":{"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4244,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"5812:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4245,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"5821:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4246,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5829:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4249,"nodeType":"ExpressionStatement","src":"5812:24:35"},{"expression":{"id":4250,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"5857:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4142,"id":4251,"nodeType":"Return","src":"5850:13:35"}]}]},"documentation":{"id":4132,"nodeType":"StructuredDocumentation","src":"1357:305:35","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":4254,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:35","nodeType":"FunctionDefinition","parameters":{"id":4139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4134,"mutability":"mutable","name":"x","nameLocation":"1691:1:35","nodeType":"VariableDeclaration","scope":4254,"src":"1683:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4133,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4136,"mutability":"mutable","name":"y","nameLocation":"1702:1:35","nodeType":"VariableDeclaration","scope":4254,"src":"1694:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4135,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4138,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:35","nodeType":"VariableDeclaration","scope":4254,"src":"1705:19:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4137,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:35"},"returnParameters":{"id":4142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4141,"mutability":"mutable","name":"result","nameLocation":"1757:6:35","nodeType":"VariableDeclaration","scope":4254,"src":"1749:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4140,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:35"},"scope":4906,"src":"1667:4213:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4297,"nodeType":"Block","src":"6122:189:35","statements":[{"assignments":[4270],"declarations":[{"constant":false,"id":4270,"mutability":"mutable","name":"result","nameLocation":"6140:6:35","nodeType":"VariableDeclaration","scope":4297,"src":"6132:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4269,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4276,"initialValue":{"arguments":[{"id":4272,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"6156:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4273,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4259,"src":"6159:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4274,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"6162:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4271,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4254,4298],"referencedDeclaration":4254,"src":"6149:6:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:35"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4277,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"6188:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4278,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"6200:8:35","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4047_$","typeString":"type(enum Math.Rounding)"}},"id":4279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:35","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4045,"src":"6200:11:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"src":"6188:23:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4282,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"6222:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4283,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4259,"src":"6225:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4284,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"6228:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4281,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:35","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4294,"nodeType":"IfStatement","src":"6184:98:35","trueBody":{"id":4293,"nodeType":"Block","src":"6246:36:35","statements":[{"expression":{"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4289,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"6260:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4292,"nodeType":"ExpressionStatement","src":"6260:11:35"}]}},{"expression":{"id":4295,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"6298:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4268,"id":4296,"nodeType":"Return","src":"6291:13:35"}]},"documentation":{"id":4255,"nodeType":"StructuredDocumentation","src":"5886:121:35","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4298,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:35","nodeType":"FunctionDefinition","parameters":{"id":4265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4257,"mutability":"mutable","name":"x","nameLocation":"6036:1:35","nodeType":"VariableDeclaration","scope":4298,"src":"6028:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4256,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4259,"mutability":"mutable","name":"y","nameLocation":"6047:1:35","nodeType":"VariableDeclaration","scope":4298,"src":"6039:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4258,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4261,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:35","nodeType":"VariableDeclaration","scope":4298,"src":"6050:19:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4260,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4264,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:35","nodeType":"VariableDeclaration","scope":4298,"src":"6071:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"typeName":{"id":4263,"nodeType":"UserDefinedTypeName","pathNode":{"id":4262,"name":"Rounding","nameLocations":["6071:8:35"],"nodeType":"IdentifierPath","referencedDeclaration":4047,"src":"6071:8:35"},"referencedDeclaration":4047,"src":"6071:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:35"},"returnParameters":{"id":4268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4298,"src":"6113:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4266,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:35"},"scope":4906,"src":"6012:299:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4409,"nodeType":"Block","src":"6587:1585:35","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4306,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"6601:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4312,"nodeType":"IfStatement","src":"6597:45:35","trueBody":{"id":4311,"nodeType":"Block","src":"6609:33:35","statements":[{"expression":{"hexValue":"30","id":4309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4305,"id":4310,"nodeType":"Return","src":"6623:8:35"}]}},{"assignments":[4314],"declarations":[{"constant":false,"id":4314,"mutability":"mutable","name":"result","nameLocation":"7329:6:35","nodeType":"VariableDeclaration","scope":4409,"src":"7321:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4313,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4323,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4317,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"7349:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4316,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4578,4614],"referencedDeclaration":4578,"src":"7344:4:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4321,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:35"},{"id":4408,"nodeType":"UncheckedBlock","src":"7758:408:35","statements":[{"expression":{"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7782:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4325,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7792:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4326,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"7801:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4327,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7805:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4330,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4334,"nodeType":"ExpressionStatement","src":"7782:35:35"},{"expression":{"id":4344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4335,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7831:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4336,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7841:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4337,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"7850:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4338,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7854:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4341,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4345,"nodeType":"ExpressionStatement","src":"7831:35:35"},{"expression":{"id":4355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4346,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7880:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4347,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7890:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4348,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"7899:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4349,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7903:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4352,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4356,"nodeType":"ExpressionStatement","src":"7880:35:35"},{"expression":{"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7929:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4358,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7939:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4359,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"7948:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4360,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7952:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4363,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4367,"nodeType":"ExpressionStatement","src":"7929:35:35"},{"expression":{"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4368,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7978:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4369,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"7988:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4370,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"7997:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"8001:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4374,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4378,"nodeType":"ExpressionStatement","src":"7978:35:35"},{"expression":{"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4379,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"8027:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4380,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"8037:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4381,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"8046:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"8050:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4385,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4389,"nodeType":"ExpressionStatement","src":"8027:35:35"},{"expression":{"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4390,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"8076:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4391,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"8086:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4392,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"8095:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4393,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"8099:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4396,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4400,"nodeType":"ExpressionStatement","src":"8076:35:35"},{"expression":{"arguments":[{"id":4402,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"8136:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4403,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"8144:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4404,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"8148:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4401,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"8132:3:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4305,"id":4407,"nodeType":"Return","src":"8125:30:35"}]}]},"documentation":{"id":4299,"nodeType":"StructuredDocumentation","src":"6317:208:35","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4410,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:35","nodeType":"FunctionDefinition","parameters":{"id":4302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4301,"mutability":"mutable","name":"a","nameLocation":"6552:1:35","nodeType":"VariableDeclaration","scope":4410,"src":"6544:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4300,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:35"},"returnParameters":{"id":4305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4410,"src":"6578:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4303,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:35"},"scope":4906,"src":"6530:1642:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4445,"nodeType":"Block","src":"8348:161:35","statements":[{"id":4444,"nodeType":"UncheckedBlock","src":"8358:145:35","statements":[{"assignments":[4422],"declarations":[{"constant":false,"id":4422,"mutability":"mutable","name":"result","nameLocation":"8390:6:35","nodeType":"VariableDeclaration","scope":4444,"src":"8382:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4421,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4426,"initialValue":{"arguments":[{"id":4424,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"8404:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4423,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4410,4446],"referencedDeclaration":4410,"src":"8399:4:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:35"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4427,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4422,"src":"8427:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4428,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"8437:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4429,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"8449:8:35","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4047_$","typeString":"type(enum Math.Rounding)"}},"id":4430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:35","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4045,"src":"8449:11:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"src":"8437:23:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4432,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4422,"src":"8464:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4433,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4422,"src":"8473:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4435,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"8482:1:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:35","trueExpression":{"hexValue":"31","id":4438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4441,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4420,"id":4443,"nodeType":"Return","src":"8420:72:35"}]}]},"documentation":{"id":4411,"nodeType":"StructuredDocumentation","src":"8178:89:35","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4446,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:35","nodeType":"FunctionDefinition","parameters":{"id":4417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4413,"mutability":"mutable","name":"a","nameLocation":"8294:1:35","nodeType":"VariableDeclaration","scope":4446,"src":"8286:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4412,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4416,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:35","nodeType":"VariableDeclaration","scope":4446,"src":"8297:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"typeName":{"id":4415,"nodeType":"UserDefinedTypeName","pathNode":{"id":4414,"name":"Rounding","nameLocations":["8297:8:35"],"nodeType":"IdentifierPath","referencedDeclaration":4047,"src":"8297:8:35"},"referencedDeclaration":4047,"src":"8297:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:35"},"returnParameters":{"id":4420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4446,"src":"8339:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4418,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:35"},"scope":4906,"src":"8272:237:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4577,"nodeType":"Block","src":"8694:922:35","statements":[{"assignments":[4455],"declarations":[{"constant":false,"id":4455,"mutability":"mutable","name":"result","nameLocation":"8712:6:35","nodeType":"VariableDeclaration","scope":4577,"src":"8704:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4454,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4457,"initialValue":{"hexValue":"30","id":4456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:35"},{"id":4574,"nodeType":"UncheckedBlock","src":"8732:855:35","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"8760:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:35","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4472,"nodeType":"IfStatement","src":"8756:99:35","trueBody":{"id":4471,"nodeType":"Block","src":"8778:77:35","statements":[{"expression":{"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"8796:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:35","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4466,"nodeType":"ExpressionStatement","src":"8796:13:35"},{"expression":{"id":4469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4467,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"8827:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:35","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4470,"nodeType":"ExpressionStatement","src":"8827:13:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"8872:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:35","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4487,"nodeType":"IfStatement","src":"8868:96:35","trueBody":{"id":4486,"nodeType":"Block","src":"8889:75:35","statements":[{"expression":{"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"8907:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:35","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4481,"nodeType":"ExpressionStatement","src":"8907:12:35"},{"expression":{"id":4484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4482,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"8937:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:35","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4485,"nodeType":"ExpressionStatement","src":"8937:12:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4488,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"8981:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:35","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4502,"nodeType":"IfStatement","src":"8977:96:35","trueBody":{"id":4501,"nodeType":"Block","src":"8998:75:35","statements":[{"expression":{"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9016:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:35","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4496,"nodeType":"ExpressionStatement","src":"9016:12:35"},{"expression":{"id":4499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4497,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"9046:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:35","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4500,"nodeType":"ExpressionStatement","src":"9046:12:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4503,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9090:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:35","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4517,"nodeType":"IfStatement","src":"9086:96:35","trueBody":{"id":4516,"nodeType":"Block","src":"9107:75:35","statements":[{"expression":{"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9125:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:35","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4511,"nodeType":"ExpressionStatement","src":"9125:12:35"},{"expression":{"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4512,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"9155:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:35","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4515,"nodeType":"ExpressionStatement","src":"9155:12:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9199:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:35","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4532,"nodeType":"IfStatement","src":"9195:93:35","trueBody":{"id":4531,"nodeType":"Block","src":"9215:73:35","statements":[{"expression":{"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9233:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:35","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4526,"nodeType":"ExpressionStatement","src":"9233:11:35"},{"expression":{"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4527,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"9262:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:35","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4530,"nodeType":"ExpressionStatement","src":"9262:11:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9305:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:35","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4547,"nodeType":"IfStatement","src":"9301:93:35","trueBody":{"id":4546,"nodeType":"Block","src":"9321:73:35","statements":[{"expression":{"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9339:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:35","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4541,"nodeType":"ExpressionStatement","src":"9339:11:35"},{"expression":{"id":4544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4542,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"9368:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:35","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4545,"nodeType":"ExpressionStatement","src":"9368:11:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4548,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9411:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4562,"nodeType":"IfStatement","src":"9407:93:35","trueBody":{"id":4561,"nodeType":"Block","src":"9427:73:35","statements":[{"expression":{"id":4555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9445:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4556,"nodeType":"ExpressionStatement","src":"9445:11:35"},{"expression":{"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4557,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"9474:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4560,"nodeType":"ExpressionStatement","src":"9474:11:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9517:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4573,"nodeType":"IfStatement","src":"9513:64:35","trueBody":{"id":4572,"nodeType":"Block","src":"9533:44:35","statements":[{"expression":{"id":4570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4568,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"9551:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4571,"nodeType":"ExpressionStatement","src":"9551:11:35"}]}}]},{"expression":{"id":4575,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"9603:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4453,"id":4576,"nodeType":"Return","src":"9596:13:35"}]},"documentation":{"id":4447,"nodeType":"StructuredDocumentation","src":"8515:113:35","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4578,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:35","nodeType":"FunctionDefinition","parameters":{"id":4450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4449,"mutability":"mutable","name":"value","nameLocation":"8655:5:35","nodeType":"VariableDeclaration","scope":4578,"src":"8647:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4448,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:35"},"returnParameters":{"id":4453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4578,"src":"8685:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4451,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:35"},"scope":4906,"src":"8633:983:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4613,"nodeType":"Block","src":"9849:165:35","statements":[{"id":4612,"nodeType":"UncheckedBlock","src":"9859:149:35","statements":[{"assignments":[4590],"declarations":[{"constant":false,"id":4590,"mutability":"mutable","name":"result","nameLocation":"9891:6:35","nodeType":"VariableDeclaration","scope":4612,"src":"9883:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4589,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4594,"initialValue":{"arguments":[{"id":4592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4581,"src":"9905:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4591,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4578,4614],"referencedDeclaration":4578,"src":"9900:4:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:35"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"9932:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"id":4599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4596,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"9942:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4597,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"9954:8:35","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4047_$","typeString":"type(enum Math.Rounding)"}},"id":4598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:35","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4045,"src":"9954:11:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"src":"9942:23:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4601,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"9974:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4581,"src":"9983:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:35","trueExpression":{"hexValue":"31","id":4606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4609,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4588,"id":4611,"nodeType":"Return","src":"9925:72:35"}]}]},"documentation":{"id":4579,"nodeType":"StructuredDocumentation","src":"9622:142:35","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4614,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:35","nodeType":"FunctionDefinition","parameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4581,"mutability":"mutable","name":"value","nameLocation":"9791:5:35","nodeType":"VariableDeclaration","scope":4614,"src":"9783:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4580,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4584,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:35","nodeType":"VariableDeclaration","scope":4614,"src":"9798:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"typeName":{"id":4583,"nodeType":"UserDefinedTypeName","pathNode":{"id":4582,"name":"Rounding","nameLocations":["9798:8:35"],"nodeType":"IdentifierPath","referencedDeclaration":4047,"src":"9798:8:35"},"referencedDeclaration":4047,"src":"9798:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:35"},"returnParameters":{"id":4588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4614,"src":"9840:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4586,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:35"},"scope":4906,"src":"9769:245:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4742,"nodeType":"Block","src":"10201:854:35","statements":[{"assignments":[4623],"declarations":[{"constant":false,"id":4623,"mutability":"mutable","name":"result","nameLocation":"10219:6:35","nodeType":"VariableDeclaration","scope":4742,"src":"10211:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4622,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4625,"initialValue":{"hexValue":"30","id":4624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:35"},{"id":4739,"nodeType":"UncheckedBlock","src":"10239:787:35","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4626,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10267:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:35","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:35","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4642,"nodeType":"IfStatement","src":"10263:103:35","trueBody":{"id":4641,"nodeType":"Block","src":"10286:80:35","statements":[{"expression":{"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4631,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10304:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:35","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:35","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4636,"nodeType":"ExpressionStatement","src":"10304:17:35"},{"expression":{"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4637,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"10339:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:35","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4640,"nodeType":"ExpressionStatement","src":"10339:12:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10383:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:35","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:35","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4659,"nodeType":"IfStatement","src":"10379:103:35","trueBody":{"id":4658,"nodeType":"Block","src":"10402:80:35","statements":[{"expression":{"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10420:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:35","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:35","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4653,"nodeType":"ExpressionStatement","src":"10420:17:35"},{"expression":{"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4654,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"10455:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:35","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4657,"nodeType":"ExpressionStatement","src":"10455:12:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4660,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10499:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:35","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:35","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4676,"nodeType":"IfStatement","src":"10495:103:35","trueBody":{"id":4675,"nodeType":"Block","src":"10518:80:35","statements":[{"expression":{"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10536:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:35","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:35","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4670,"nodeType":"ExpressionStatement","src":"10536:17:35"},{"expression":{"id":4673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4671,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"10571:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:35","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4674,"nodeType":"ExpressionStatement","src":"10571:12:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10615:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:35","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:35","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4693,"nodeType":"IfStatement","src":"10611:100:35","trueBody":{"id":4692,"nodeType":"Block","src":"10633:78:35","statements":[{"expression":{"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4682,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10651:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:35","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:35","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4687,"nodeType":"ExpressionStatement","src":"10651:16:35"},{"expression":{"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"10685:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:35","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4691,"nodeType":"ExpressionStatement","src":"10685:11:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10728:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:35","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:35","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4710,"nodeType":"IfStatement","src":"10724:100:35","trueBody":{"id":4709,"nodeType":"Block","src":"10746:78:35","statements":[{"expression":{"id":4703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10764:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:35","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:35","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4704,"nodeType":"ExpressionStatement","src":"10764:16:35"},{"expression":{"id":4707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"10798:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:35","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4708,"nodeType":"ExpressionStatement","src":"10798:11:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4711,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10841:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:35","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4727,"nodeType":"IfStatement","src":"10837:100:35","trueBody":{"id":4726,"nodeType":"Block","src":"10859:78:35","statements":[{"expression":{"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4716,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10877:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:35","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4721,"nodeType":"ExpressionStatement","src":"10877:16:35"},{"expression":{"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4722,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"10911:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4725,"nodeType":"ExpressionStatement","src":"10911:11:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"10954:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4738,"nodeType":"IfStatement","src":"10950:66:35","trueBody":{"id":4737,"nodeType":"Block","src":"10972:44:35","statements":[{"expression":{"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4733,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"10990:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4736,"nodeType":"ExpressionStatement","src":"10990:11:35"}]}}]},{"expression":{"id":4740,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"11042:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4621,"id":4741,"nodeType":"Return","src":"11035:13:35"}]},"documentation":{"id":4615,"nodeType":"StructuredDocumentation","src":"10020:114:35","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4743,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:35","nodeType":"FunctionDefinition","parameters":{"id":4618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4617,"mutability":"mutable","name":"value","nameLocation":"10162:5:35","nodeType":"VariableDeclaration","scope":4743,"src":"10154:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4616,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:35"},"returnParameters":{"id":4621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4743,"src":"10192:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4619,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:35"},"scope":4906,"src":"10139:916:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4778,"nodeType":"Block","src":"11290:167:35","statements":[{"id":4777,"nodeType":"UncheckedBlock","src":"11300:151:35","statements":[{"assignments":[4755],"declarations":[{"constant":false,"id":4755,"mutability":"mutable","name":"result","nameLocation":"11332:6:35","nodeType":"VariableDeclaration","scope":4777,"src":"11324:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4754,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4759,"initialValue":{"arguments":[{"id":4757,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"11347:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4756,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4743,4779],"referencedDeclaration":4743,"src":"11341:5:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:35"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4760,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"11374:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"id":4764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4761,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"11384:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4762,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"11396:8:35","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4047_$","typeString":"type(enum Math.Rounding)"}},"id":4763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:35","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4045,"src":"11396:11:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"src":"11384:23:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:35","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4766,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"11417:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4768,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"11426:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:35","trueExpression":{"hexValue":"31","id":4771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4774,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4753,"id":4776,"nodeType":"Return","src":"11367:73:35"}]}]},"documentation":{"id":4744,"nodeType":"StructuredDocumentation","src":"11061:143:35","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4779,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:35","nodeType":"FunctionDefinition","parameters":{"id":4750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4746,"mutability":"mutable","name":"value","nameLocation":"11232:5:35","nodeType":"VariableDeclaration","scope":4779,"src":"11224:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4745,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4749,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:35","nodeType":"VariableDeclaration","scope":4779,"src":"11239:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"typeName":{"id":4748,"nodeType":"UserDefinedTypeName","pathNode":{"id":4747,"name":"Rounding","nameLocations":["11239:8:35"],"nodeType":"IdentifierPath","referencedDeclaration":4047,"src":"11239:8:35"},"referencedDeclaration":4047,"src":"11239:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:35"},"returnParameters":{"id":4753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4779,"src":"11281:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4751,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:35"},"scope":4906,"src":"11209:248:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4865,"nodeType":"Block","src":"11771:600:35","statements":[{"assignments":[4788],"declarations":[{"constant":false,"id":4788,"mutability":"mutable","name":"result","nameLocation":"11789:6:35","nodeType":"VariableDeclaration","scope":4865,"src":"11781:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4787,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4790,"initialValue":{"hexValue":"30","id":4789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:35"},{"id":4862,"nodeType":"UncheckedBlock","src":"11809:533:35","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"11837:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:35","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4805,"nodeType":"IfStatement","src":"11833:98:35","trueBody":{"id":4804,"nodeType":"Block","src":"11855:76:35","statements":[{"expression":{"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"11873:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:35","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4799,"nodeType":"ExpressionStatement","src":"11873:13:35"},{"expression":{"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4800,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"11904:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:35","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4803,"nodeType":"ExpressionStatement","src":"11904:12:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4806,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"11948:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:35","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4820,"nodeType":"IfStatement","src":"11944:95:35","trueBody":{"id":4819,"nodeType":"Block","src":"11965:74:35","statements":[{"expression":{"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"11983:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:35","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4814,"nodeType":"ExpressionStatement","src":"11983:12:35"},{"expression":{"id":4817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4815,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"12013:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:35","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4818,"nodeType":"ExpressionStatement","src":"12013:11:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4821,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"12056:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:35","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4835,"nodeType":"IfStatement","src":"12052:95:35","trueBody":{"id":4834,"nodeType":"Block","src":"12073:74:35","statements":[{"expression":{"id":4828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"12091:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:35","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4829,"nodeType":"ExpressionStatement","src":"12091:12:35"},{"expression":{"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4830,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"12121:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:35","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4833,"nodeType":"ExpressionStatement","src":"12121:11:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4836,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"12164:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:35","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4850,"nodeType":"IfStatement","src":"12160:95:35","trueBody":{"id":4849,"nodeType":"Block","src":"12181:74:35","statements":[{"expression":{"id":4843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4841,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"12199:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:35","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4844,"nodeType":"ExpressionStatement","src":"12199:12:35"},{"expression":{"id":4847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4845,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"12229:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4848,"nodeType":"ExpressionStatement","src":"12229:11:35"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"12272:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:35","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4861,"nodeType":"IfStatement","src":"12268:64:35","trueBody":{"id":4860,"nodeType":"Block","src":"12288:44:35","statements":[{"expression":{"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4856,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"12306:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4859,"nodeType":"ExpressionStatement","src":"12306:11:35"}]}}]},{"expression":{"id":4863,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"12358:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4786,"id":4864,"nodeType":"Return","src":"12351:13:35"}]},"documentation":{"id":4780,"nodeType":"StructuredDocumentation","src":"11463:240:35","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4866,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:35","nodeType":"FunctionDefinition","parameters":{"id":4783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4782,"mutability":"mutable","name":"value","nameLocation":"11732:5:35","nodeType":"VariableDeclaration","scope":4866,"src":"11724:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4781,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:35"},"returnParameters":{"id":4786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4866,"src":"11762:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4784,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:35"},"scope":4906,"src":"11708:663:35","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4904,"nodeType":"Block","src":"12608:174:35","statements":[{"id":4903,"nodeType":"UncheckedBlock","src":"12618:158:35","statements":[{"assignments":[4878],"declarations":[{"constant":false,"id":4878,"mutability":"mutable","name":"result","nameLocation":"12650:6:35","nodeType":"VariableDeclaration","scope":4903,"src":"12642:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4877,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4882,"initialValue":{"arguments":[{"id":4880,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4869,"src":"12666:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4879,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4866,4905],"referencedDeclaration":4866,"src":"12659:6:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:35"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4883,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"12693:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4884,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4872,"src":"12703:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4885,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"12715:8:35","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4047_$","typeString":"type(enum Math.Rounding)"}},"id":4886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:35","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4045,"src":"12715:11:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"src":"12703:23:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4889,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"12736:6:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:35","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4892,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4869,"src":"12751:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:35","trueExpression":{"hexValue":"31","id":4897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4900,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4876,"id":4902,"nodeType":"Return","src":"12686:79:35"}]}]},"documentation":{"id":4867,"nodeType":"StructuredDocumentation","src":"12377:144:35","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4905,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:35","nodeType":"FunctionDefinition","parameters":{"id":4873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4869,"mutability":"mutable","name":"value","nameLocation":"12550:5:35","nodeType":"VariableDeclaration","scope":4905,"src":"12542:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4868,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4872,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:35","nodeType":"VariableDeclaration","scope":4905,"src":"12557:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"},"typeName":{"id":4871,"nodeType":"UserDefinedTypeName","pathNode":{"id":4870,"name":"Rounding","nameLocations":["12557:8:35"],"nodeType":"IdentifierPath","referencedDeclaration":4047,"src":"12557:8:35"},"referencedDeclaration":4047,"src":"12557:8:35","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4047","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:35"},"returnParameters":{"id":4876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4875,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4905,"src":"12599:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4874,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:35"},"scope":4906,"src":"12526:256:35","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4907,"src":"202:12582:35","usedErrors":[]}],"src":"103:12682:35"},"id":35},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[5011]},"id":5012,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4908,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:36"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":4909,"nodeType":"StructuredDocumentation","src":"134:80:36","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5011,"linearizedBaseContracts":[5011],"name":"SignedMath","nameLocation":"223:10:36","nodeType":"ContractDefinition","nodes":[{"body":{"id":4926,"nodeType":"Block","src":"375:37:36","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4919,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"392:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4920,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4914,"src":"396:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4923,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4914,"src":"404:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:36","trueExpression":{"id":4922,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"400:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4918,"id":4925,"nodeType":"Return","src":"385:20:36"}]},"documentation":{"id":4910,"nodeType":"StructuredDocumentation","src":"240:66:36","text":" @dev Returns the largest of two signed numbers."},"id":4927,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:36","nodeType":"FunctionDefinition","parameters":{"id":4915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4912,"mutability":"mutable","name":"a","nameLocation":"331:1:36","nodeType":"VariableDeclaration","scope":4927,"src":"324:8:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4911,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4914,"mutability":"mutable","name":"b","nameLocation":"341:1:36","nodeType":"VariableDeclaration","scope":4927,"src":"334:8:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4913,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:36"},"returnParameters":{"id":4918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4927,"src":"367:6:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4916,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:36"},"scope":5011,"src":"311:101:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4944,"nodeType":"Block","src":"554:37:36","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4937,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4930,"src":"571:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4938,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"575:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4941,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"583:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:36","trueExpression":{"id":4940,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4930,"src":"579:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4936,"id":4943,"nodeType":"Return","src":"564:20:36"}]},"documentation":{"id":4928,"nodeType":"StructuredDocumentation","src":"418:67:36","text":" @dev Returns the smallest of two signed numbers."},"id":4945,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:36","nodeType":"FunctionDefinition","parameters":{"id":4933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4930,"mutability":"mutable","name":"a","nameLocation":"510:1:36","nodeType":"VariableDeclaration","scope":4945,"src":"503:8:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4929,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4932,"mutability":"mutable","name":"b","nameLocation":"520:1:36","nodeType":"VariableDeclaration","scope":4945,"src":"513:8:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4931,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:36"},"returnParameters":{"id":4936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4945,"src":"546:6:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4934,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:36"},"scope":5011,"src":"490:101:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4988,"nodeType":"Block","src":"796:162:36","statements":[{"assignments":[4956],"declarations":[{"constant":false,"id":4956,"mutability":"mutable","name":"x","nameLocation":"865:1:36","nodeType":"VariableDeclaration","scope":4988,"src":"858:8:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4955,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4969,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4957,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"870:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4958,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4950,"src":"874:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4961,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"881:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4962,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4950,"src":"885:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4964,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:36","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:36"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4970,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4956,"src":"910:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4975,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4956,"src":"930:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4973,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:36","typeDescriptions":{}}},"id":4976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:36","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:36","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4971,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:36","typeDescriptions":{}}},"id":4979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4980,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"944:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4981,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4950,"src":"948:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4983,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4985,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4954,"id":4987,"nodeType":"Return","src":"903:48:36"}]},"documentation":{"id":4946,"nodeType":"StructuredDocumentation","src":"597:126:36","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4989,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:36","nodeType":"FunctionDefinition","parameters":{"id":4951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4948,"mutability":"mutable","name":"a","nameLocation":"752:1:36","nodeType":"VariableDeclaration","scope":4989,"src":"745:8:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4947,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4950,"mutability":"mutable","name":"b","nameLocation":"762:1:36","nodeType":"VariableDeclaration","scope":4989,"src":"755:8:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4949,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:36"},"returnParameters":{"id":4954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4953,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4989,"src":"788:6:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4952,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:36"},"scope":5011,"src":"728:230:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5009,"nodeType":"Block","src":"1102:158:36","statements":[{"id":5008,"nodeType":"UncheckedBlock","src":"1112:142:36","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4999,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4992,"src":"1227:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":5000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:36","subExpression":{"id":5003,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4992,"src":"1241:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:36","trueExpression":{"id":5002,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4992,"src":"1236:1:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4997,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:36","typeDescriptions":{}}},"id":5006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4996,"id":5007,"nodeType":"Return","src":"1212:31:36"}]}]},"documentation":{"id":4990,"nodeType":"StructuredDocumentation","src":"964:78:36","text":" @dev Returns the absolute unsigned value of a signed value."},"id":5010,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:36","nodeType":"FunctionDefinition","parameters":{"id":4993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4992,"mutability":"mutable","name":"n","nameLocation":"1067:1:36","nodeType":"VariableDeclaration","scope":5010,"src":"1060:8:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4991,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:36"},"returnParameters":{"id":4996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5010,"src":"1093:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4994,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:36"},"scope":5011,"src":"1047:213:36","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5012,"src":"215:1047:36","usedErrors":[]}],"src":"109:1154:36"},"id":36},"contracts/DemoNFT.sol":{"ast":{"absolutePath":"contracts/DemoNFT.sol","exportedSymbols":{"AccessControlStorage":[480],"Context":[3701],"ContractOwnership":[44],"ContractOwnershipStorage":[682],"DemoNFT":[5244],"ERC1155":[1186],"ERC1155Burnable":[1206],"ERC1155MetadataURIWithBaseURI":[1236],"ERC1155Mintable":[1260],"ERC1155Storage":[3089],"Pause":[857],"PauseStorage":[1123]},"id":5245,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5013,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:37"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol","id":5015,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":1187,"src":"57:88:37","symbolAliases":[{"foreign":{"id":5014,"name":"ERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"65:7:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol","id":5017,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":1261,"src":"146:104:37","symbolAliases":[{"foreign":{"id":5016,"name":"ERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"154:15:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol","id":5019,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":1207,"src":"251:104:37","symbolAliases":[{"foreign":{"id":5018,"name":"ERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"259:15:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol","id":5021,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":1237,"src":"356:132:37","symbolAliases":[{"foreign":{"id":5020,"name":"ERC1155MetadataURIWithBaseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"364:29:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":5023,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":45,"src":"489:101:37","symbolAliases":[{"foreign":{"id":5022,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"497:17:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","id":5025,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":481,"src":"591:117:37","symbolAliases":[{"foreign":{"id":5024,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"599:20:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":5027,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":683,"src":"709:125:37","symbolAliases":[{"foreign":{"id":5026,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"717:24:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol","file":"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol","id":5029,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":858,"src":"835:80:37","symbolAliases":[{"foreign":{"id":5028,"name":"Pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"843:5:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","file":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","id":5031,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":1124,"src":"916:104:37","symbolAliases":[{"foreign":{"id":5030,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"924:12:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":5033,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":3702,"src":"1021:66:37","symbolAliases":[{"foreign":{"id":5032,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"1029:7:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol","id":5035,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5245,"sourceUnit":3090,"src":"1088:112:37","symbolAliases":[{"foreign":{"id":5034,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1096:14:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5036,"name":"ERC1155","nameLocations":["1226:7:37"],"nodeType":"IdentifierPath","referencedDeclaration":1186,"src":"1226:7:37"},"id":5037,"nodeType":"InheritanceSpecifier","src":"1226:7:37"},{"baseName":{"id":5038,"name":"ERC1155Mintable","nameLocations":["1239:15:37"],"nodeType":"IdentifierPath","referencedDeclaration":1260,"src":"1239:15:37"},"id":5039,"nodeType":"InheritanceSpecifier","src":"1239:15:37"},{"baseName":{"id":5040,"name":"ERC1155Burnable","nameLocations":["1260:15:37"],"nodeType":"IdentifierPath","referencedDeclaration":1206,"src":"1260:15:37"},"id":5041,"nodeType":"InheritanceSpecifier","src":"1260:15:37"},{"baseName":{"id":5042,"name":"Pause","nameLocations":["1281:5:37"],"nodeType":"IdentifierPath","referencedDeclaration":857,"src":"1281:5:37"},"id":5043,"nodeType":"InheritanceSpecifier","src":"1281:5:37"},{"baseName":{"id":5044,"name":"ERC1155MetadataURIWithBaseURI","nameLocations":["1292:29:37"],"nodeType":"IdentifierPath","referencedDeclaration":1236,"src":"1292:29:37"},"id":5045,"nodeType":"InheritanceSpecifier","src":"1292:29:37"}],"canonicalName":"DemoNFT","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5244,"linearizedBaseContracts":[5244,1236,857,1206,1492,1835,1260,11,44,1186,713,725,232,255,1581,1866,938,182,1690,1896,1424,1809,3701],"name":"DemoNFT","nameLocation":"1211:7:37","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"4460bdd6","id":5048,"mutability":"constant","name":"SUPER_ADMIN_ROLE","nameLocation":"1352:16:37","nodeType":"VariableDeclaration","scope":5244,"src":"1328:56:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5046,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1328:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"73757065725f61646d696e","id":5047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1371:13:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_f014dfcfaccf8bfc092855dc3f860234be55540220c4585bcaf494852dd3667d","typeString":"literal_string \"super_admin\""},"value":"super_admin"},"visibility":"public"},{"constant":true,"functionSelector":"75b238fc","id":5051,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"1414:10:37","nodeType":"VariableDeclaration","scope":5244,"src":"1390:44:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5049,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1390:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"61646d696e","id":5050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1427:7:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_f23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d8","typeString":"literal_string \"admin\""},"value":"admin"},"visibility":"public"},{"global":false,"id":5055,"libraryName":{"id":5052,"name":"AccessControlStorage","nameLocations":["1447:20:37"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"1447:20:37"},"nodeType":"UsingForDirective","src":"1441:59:37","typeName":{"id":5054,"nodeType":"UserDefinedTypeName","pathNode":{"id":5053,"name":"AccessControlStorage.Layout","nameLocations":["1472:20:37","1493:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"1472:27:37"},"referencedDeclaration":273,"src":"1472:27:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":5059,"libraryName":{"id":5056,"name":"ERC1155Storage","nameLocations":["1511:14:37"],"nodeType":"IdentifierPath","referencedDeclaration":3089,"src":"1511:14:37"},"nodeType":"UsingForDirective","src":"1505:47:37","typeName":{"id":5058,"nodeType":"UserDefinedTypeName","pathNode":{"id":5057,"name":"ERC1155Storage.Layout","nameLocations":["1530:14:37","1545:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"1530:21:37"},"referencedDeclaration":1978,"src":"1530:21:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout"}}},{"global":false,"id":5063,"libraryName":{"id":5060,"name":"PauseStorage","nameLocations":["1563:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":1123,"src":"1563:12:37"},"nodeType":"UsingForDirective","src":"1557:43:37","typeName":{"id":5062,"nodeType":"UserDefinedTypeName","pathNode":{"id":5061,"name":"PauseStorage.Layout","nameLocations":["1580:12:37","1593:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"1580:19:37"},"referencedDeclaration":949,"src":"1580:19:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"global":false,"id":5067,"libraryName":{"id":5064,"name":"ContractOwnershipStorage","nameLocations":["1611:24:37"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"1611:24:37"},"nodeType":"UsingForDirective","src":"1605:67:37","typeName":{"id":5066,"nodeType":"UserDefinedTypeName","pathNode":{"id":5065,"name":"ContractOwnershipStorage.Layout","nameLocations":["1640:24:37","1665:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"1640:31:37"},"referencedDeclaration":499,"src":"1640:31:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":5101,"nodeType":"Block","src":"1735:283:37","statements":[{"expression":{"arguments":[{"id":5082,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"1798:16:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5083,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1828:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5085,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1854:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1854:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5077,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"1745:20:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":5079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1766:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"1745:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":5080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1745:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":5081,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1775:9:37","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":340,"src":"1745:39:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1745:131:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5088,"nodeType":"ExpressionStatement","src":"1745:131:37"},{"expression":{"arguments":[{"id":5094,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5051,"src":"1939:10:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5095,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1963:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5097,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1989:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1989:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5089,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"1886:20:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":5091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1907:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"1886:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":5092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1886:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":5093,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1916:9:37","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":340,"src":"1886:39:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":5099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1886:125:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5100,"nodeType":"ExpressionStatement","src":"1886:125:37"}]},"id":5102,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"66616c7365","id":5070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1698:5:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"id":5071,"kind":"baseConstructorSpecifier","modifierName":{"id":5069,"name":"Pause","nameLocations":["1692:5:37"],"nodeType":"IdentifierPath","referencedDeclaration":857,"src":"1692:5:37"},"nodeType":"ModifierInvocation","src":"1692:12:37"},{"arguments":[{"expression":{"id":5073,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1723:3:37","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1727:6:37","memberName":"sender","nodeType":"MemberAccess","src":"1723:10:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5075,"kind":"baseConstructorSpecifier","modifierName":{"id":5072,"name":"ContractOwnership","nameLocations":["1705:17:37"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"1705:17:37"},"nodeType":"ModifierInvocation","src":"1705:29:37"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5068,"nodeType":"ParameterList","parameters":[],"src":"1689:2:37"},"returnParameters":{"id":5076,"nodeType":"ParameterList","parameters":[],"src":"1735:0:37"},"scope":5244,"src":"1678:340:37","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1647],"body":{"id":5147,"nodeType":"Block","src":"2166:244:37","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5114,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"2176:12:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$1123_$","typeString":"type(library PauseStorage)"}},"id":5116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2189:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1122,"src":"2176:19:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":5117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2176:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$949_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":5118,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2198:18:37","memberName":"enforceIsNotPaused","nodeType":"MemberAccess","referencedDeclaration":1110,"src":"2176:40:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$949_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$949_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view"}},"id":5119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2176:42:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5120,"nodeType":"ExpressionStatement","src":"2176:42:37"},{"assignments":[5122],"declarations":[{"constant":false,"id":5122,"mutability":"mutable","name":"sender","nameLocation":"2236:6:37","nodeType":"VariableDeclaration","scope":5147,"src":"2228:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5121,"name":"address","nodeType":"ElementaryTypeName","src":"2228:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5125,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5123,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"2245:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2245:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2228:29:37"},{"expression":{"arguments":[{"id":5131,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"2312:11:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5132,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5122,"src":"2325:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5126,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2267:20:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2288:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"2267:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":5129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2267:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":5130,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2297:14:37","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":467,"src":"2267:44:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":5133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2267:65:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5134,"nodeType":"ExpressionStatement","src":"2267:65:37"},{"expression":{"arguments":[{"id":5140,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5122,"src":"2375:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5141,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"2383:2:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5142,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5106,"src":"2387:2:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5143,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5108,"src":"2391:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5144,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5110,"src":"2398:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5135,"name":"ERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"2342:14:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155Storage_$3089_$","typeString":"type(library ERC1155Storage)"}},"id":5137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2357:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"2342:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Storage.Layout storage pointer)"}},"id":5138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2342:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1978_storage_ptr","typeString":"struct ERC1155Storage.Layout storage pointer"}},"id":5139,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2366:8:37","memberName":"safeMint","nodeType":"MemberAccess","referencedDeclaration":2358,"src":"2342:32:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1978_storage_ptr_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_Layout_$1978_storage_ptr_$","typeString":"function (struct ERC1155Storage.Layout storage pointer,address,address,uint256,uint256,bytes memory)"}},"id":5145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2342:61:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5146,"nodeType":"ExpressionStatement","src":"2342:61:37"}]},"functionSelector":"5cfa9297","id":5148,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"2033:8:37","nodeType":"FunctionDefinition","overrides":{"id":5112,"nodeType":"OverrideSpecifier","overrides":[],"src":"2157:8:37"},"parameters":{"id":5111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5104,"mutability":"mutable","name":"to","nameLocation":"2059:2:37","nodeType":"VariableDeclaration","scope":5148,"src":"2051:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5103,"name":"address","nodeType":"ElementaryTypeName","src":"2051:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5106,"mutability":"mutable","name":"id","nameLocation":"2079:2:37","nodeType":"VariableDeclaration","scope":5148,"src":"2071:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5105,"name":"uint256","nodeType":"ElementaryTypeName","src":"2071:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5108,"mutability":"mutable","name":"value","nameLocation":"2099:5:37","nodeType":"VariableDeclaration","scope":5148,"src":"2091:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5107,"name":"uint256","nodeType":"ElementaryTypeName","src":"2091:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5110,"mutability":"mutable","name":"data","nameLocation":"2129:4:37","nodeType":"VariableDeclaration","scope":5148,"src":"2114:19:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5109,"name":"bytes","nodeType":"ElementaryTypeName","src":"2114:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2041:98:37"},"returnParameters":{"id":5113,"nodeType":"ParameterList","parameters":[],"src":"2166:0:37"},"scope":5244,"src":"2024:386:37","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[231],"body":{"id":5176,"nodeType":"Block","src":"2485:319:37","statements":[{"expression":{"arguments":[{"arguments":[{"id":5159,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"2571:16:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5160,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"2605:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2605:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5155,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2516:20:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2537:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"2516:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":5157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2516:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":5158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2546:7:37","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"2516:37:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":5162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2516:115:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f524e463a206e6f742073757065722061646d696e","id":5163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2645:23:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff","typeString":"literal_string \"ORNF: not super admin\""},"value":"ORNF: not super admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff","typeString":"literal_string \"ORNF: not super admin\""}],"id":5154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2495:7:37","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2495:183:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5165,"nodeType":"ExpressionStatement","src":"2495:183:37"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5171,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"2753:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2753:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5173,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"2779:8:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5166,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"2688:24:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":5168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2713:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"2688:31:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2688:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":5170,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2722:17:37","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":638,"src":"2688:51:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$499_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":5174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2688:109:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5175,"nodeType":"ExpressionStatement","src":"2688:109:37"}]},"functionSelector":"f2fde38b","id":5177,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"2425:17:37","nodeType":"FunctionDefinition","overrides":{"id":5152,"nodeType":"OverrideSpecifier","overrides":[],"src":"2476:8:37"},"parameters":{"id":5151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5150,"mutability":"mutable","name":"newOwner","nameLocation":"2451:8:37","nodeType":"VariableDeclaration","scope":5177,"src":"2443:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5149,"name":"address","nodeType":"ElementaryTypeName","src":"2443:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2442:18:37"},"returnParameters":{"id":5153,"nodeType":"ParameterList","parameters":[],"src":"2485:0:37"},"scope":5244,"src":"2416:388:37","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":5209,"nodeType":"Block","src":"2868:321:37","statements":[{"assignments":[5183],"declarations":[{"constant":false,"id":5183,"mutability":"mutable","name":"operator","nameLocation":"2886:8:37","nodeType":"VariableDeclaration","scope":5209,"src":"2878:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5182,"name":"address","nodeType":"ElementaryTypeName","src":"2878:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5186,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5184,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"2897:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2897:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2878:31:37"},{"expression":{"arguments":[{"arguments":[{"id":5192,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"2995:16:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5193,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"3029:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3029:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5188,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2940:20:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":5189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2961:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"2940:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2940:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":5191,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2970:7:37","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"2940:37:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":5195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2940:115:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f524e463a206e6f742073757065722061646d696e","id":5196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3069:23:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff","typeString":"literal_string \"ORNF: not super admin\""},"value":"ORNF: not super admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff","typeString":"literal_string \"ORNF: not super admin\""}],"id":5187,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2919:7:37","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2919:183:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5198,"nodeType":"ExpressionStatement","src":"2919:183:37"},{"expression":{"arguments":[{"id":5204,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5051,"src":"3152:10:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5205,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5179,"src":"3164:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5206,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5183,"src":"3173:8:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5199,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"3112:20:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":5201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3133:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"3112:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":5202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3112:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":5203,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3142:9:37","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":340,"src":"3112:39:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":5207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3112:70:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5208,"nodeType":"ExpressionStatement","src":"3112:70:37"}]},"functionSelector":"c634b78e","id":5210,"implemented":true,"kind":"function","modifiers":[],"name":"grantAdminRole","nameLocation":"2819:14:37","nodeType":"FunctionDefinition","parameters":{"id":5180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5179,"mutability":"mutable","name":"account","nameLocation":"2842:7:37","nodeType":"VariableDeclaration","scope":5210,"src":"2834:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5178,"name":"address","nodeType":"ElementaryTypeName","src":"2834:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2833:17:37"},"returnParameters":{"id":5181,"nodeType":"ParameterList","parameters":[],"src":"2868:0:37"},"scope":5244,"src":"2810:379:37","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":5242,"nodeType":"Block","src":"3254:264:37","statements":[{"assignments":[5216],"declarations":[{"constant":false,"id":5216,"mutability":"mutable","name":"operator","nameLocation":"3272:8:37","nodeType":"VariableDeclaration","scope":5242,"src":"3264:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5215,"name":"address","nodeType":"ElementaryTypeName","src":"3264:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5219,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5217,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"3283:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3283:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3264:31:37"},{"expression":{"arguments":[{"arguments":[{"id":5225,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5051,"src":"3364:10:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5226,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"3376:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3376:12:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5221,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"3326:20:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":5222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3347:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"3326:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":5223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3326:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":5224,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3356:7:37","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"3326:37:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":5228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3326:63:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f524e463a206e6f742061646d696e","id":5229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3403:17:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f","typeString":"literal_string \"ORNF: not admin\""},"value":"ORNF: not admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f","typeString":"literal_string \"ORNF: not admin\""}],"id":5220,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3305:7:37","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3305:125:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5231,"nodeType":"ExpressionStatement","src":"3305:125:37"},{"expression":{"arguments":[{"id":5237,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"3480:11:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5238,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"3493:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5239,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5216,"src":"3502:8:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5232,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"3440:20:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":5234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3461:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"3440:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":5235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3440:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":5236,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3470:9:37","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":340,"src":"3440:39:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":5240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3440:71:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5241,"nodeType":"ExpressionStatement","src":"3440:71:37"}]},"functionSelector":"3dd1eb61","id":5243,"implemented":true,"kind":"function","modifiers":[],"name":"grantMinterRole","nameLocation":"3204:15:37","nodeType":"FunctionDefinition","parameters":{"id":5213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5212,"mutability":"mutable","name":"account","nameLocation":"3228:7:37","nodeType":"VariableDeclaration","scope":5243,"src":"3220:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5211,"name":"address","nodeType":"ElementaryTypeName","src":"3220:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3219:17:37"},"returnParameters":{"id":5214,"nodeType":"ParameterList","parameters":[],"src":"3254:0:37"},"scope":5244,"src":"3195:323:37","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":5245,"src":"1202:2318:37","usedErrors":[]}],"src":"32:3489:37"},"id":37}},"contracts":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"the account granted with the role.","operator":"the initiator of the grant.","role":"the granted role."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"the account losing the role.","operator":"the initiator of the revocation, or identical to `account` for a renouncement.","role":"the revoked or renounced role."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"_0":"whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Access control via roles management (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"the account granted with the role.\",\"operator\":\"the initiator of the grant.\",\"role\":\"the granted role.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"the account losing the role.\",\"operator\":\"the initiator of the revocation, or identical to `account` for a renouncement.\",\"role\":\"the revoked or renounced role.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"_0\":\"whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Access control via roles management (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when a role is granted.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when a role is revoked or renounced.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xad30286210b6693b212a323037dde404939d7745e4578ee1a899cce60b3aa216\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when a role is granted.\\n    /// @param role the granted role.\\n    /// @param account the account granted with the role.\\n    /// @param operator the initiator of the grant.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when a role is revoked or renounced.\\n    /// @param role the revoked or renounced role.\\n    /// @param account the account losing the role.\\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if the sender does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xbf8f619858115dc1f3d4a3214a651753a3a3ba4e53b0837a03054ae471e10410\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96af8a6ddb3c9f1649d7ce512cd9cb87f643cea11ca100c857aac087a839272\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when a role is granted."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when a role is revoked or renounced."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"AccessControlBase":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"the account granted with the role.","operator":"the initiator of the grant.","role":"the granted role."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"the account losing the role.","operator":"the initiator of the revocation, or identical to `account` for a renouncement.","role":"the revoked or renounced role."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"_0":"whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}}},"title":"Access control via roles management (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"the account granted with the role.\",\"operator\":\"the initiator of the grant.\",\"role\":\"the granted role.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"the account losing the role.\",\"operator\":\"the initiator of the revocation, or identical to `account` for a renouncement.\",\"role\":\"the revoked or renounced role.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"_0\":\"whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}}},\"title\":\"Access control via roles management (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when a role is granted.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when a role is revoked or renounced.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":\"AccessControlBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when a role is granted.\\n    /// @param role the granted role.\\n    /// @param account the account granted with the role.\\n    /// @param operator the initiator of the grant.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when a role is revoked or renounced.\\n    /// @param role the revoked or renounced role.\\n    /// @param account the account losing the role.\\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if the sender does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xbf8f619858115dc1f3d4a3214a651753a3a3ba4e53b0837a03054ae471e10410\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96af8a6ddb3c9f1649d7ce512cd9cb87f643cea11ca100c857aac087a839272\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when a role is granted."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when a role is revoked or renounced."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"AccessControlStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220289ff56504ef4b8595d9171fc0891f5ba4c5d74b1f951f854c17ba016caf227964736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 SWAP16 CREATE2 PUSH6 0x4EF4B8595D9 OR 0x1F 0xC0 DUP10 0x1F JUMPDEST LOG4 0xC5 0xD7 0x4B 0x1F SWAP6 0x1F DUP6 0x4C OR 0xBA ADD PUSH13 0xAF227964736F6C634300081200 CALLER ","sourceMap":"119:3126:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220289ff56504ef4b8595d9171fc0891f5ba4c5d74b1f951f854c17ba016caf227964736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 SWAP16 CREATE2 PUSH6 0x4EF4B8595D9 OR 0x1F 0xC0 DUP10 0x1F JUMPDEST LOG4 0xC5 0xD7 0x4B 0x1F SWAP6 0x1F DUP6 0x4C OR 0xBA ADD PUSH13 0xAF227964736F6C634300081200 CALLER ","sourceMap":"119:3126:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"enforceHasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","grantRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite","hasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","layout()":"infinite","renounceRole(struct AccessControlStorage.Layout storage pointer,address,bytes32)":"infinite","revokeRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":\"AccessControlStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96af8a6ddb3c9f1649d7ce512cd9cb87f643cea11ca100c857aac087a839272\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220664f6539db0f9aca487e7e7c5db8ba4d64709ba22abd4b9ed4f18625fadf98c564736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x4F6539DB0F9ACA BASEFEE PUSH31 0x7E7C5DB8BA4D64709BA22ABD4B9ED4F18625FADF98C564736F6C6343000812 STOP CALLER ","sourceMap":"301:3582:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220664f6539db0f9aca487e7e7c5db8ba4d64709ba22abd4b9ed4f18625fadf98c564736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x4F6539DB0F9ACA BASEFEE PUSH31 0x7E7C5DB8BA4D64709BA22ABD4B9ED4F18625FADF98C564736F6C6343000812 STOP CALLER ","sourceMap":"301:3582:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f161e47751622f07ccfbc8682c2591db4e916b19351f7f16c42e568691d166664736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x161E47751622F07CCFBC8682C2591DB4 0xE9 AND 0xB1 SWAP4 MLOAD 0xF7 CALL PUSH13 0x42E568691D166664736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"111:1678:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f161e47751622f07ccfbc8682c2591db4e916b19351f7f16c42e568691d166664736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x161E47751622F07CCFBC8682C2591DB4 0xE9 AND 0xB1 SWAP4 MLOAD 0xF7 CALL PUSH13 0x42E568691D166664736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"111:1678:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol":{"Pause":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpaused","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits a {Paused} event if `isPaused` is true.","params":{"isPaused":"The initial pause state."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"pause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event."},"paused()":{"returns":{"_0":"isPaused The paused state of the contract."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"unpause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event."}},"title":"Pausing mechanism (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits a {Paused} event if `isPaused` is true.\",\"params\":{\"isPaused\":\"The initial pause state.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"pause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event.\"},\"paused()\":{\"returns\":{\"_0\":\"isPaused The paused state of the contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"unpause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.\"}},\"title\":\"Pausing mechanism (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"Paused()\":{\"notice\":\"Emitted when the pause is triggered.\"},\"Unpaused()\":{\"notice\":\"Emitted when the pause is lifted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial pause state.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol\":\"Pause\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./libraries/PauseStorage.sol\\\";\\nimport {PauseBase} from \\\"./base/PauseBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Pausing mechanism (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract Pause is PauseBase, ContractOwnership {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial pause state.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    constructor(bool isPaused) {\\n        PauseStorage.layout().constructorInit(isPaused);\\n    }\\n}\\n\",\"keccak256\":\"0x8fa8023486d561e0a2941485e1d02d9db3f899f143c7f8a6ab0643beeb3258de\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./../libraries/PauseStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Pausing mechanism (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PauseBase is Context {\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the pause is triggered.\\n    event Paused();\\n\\n    /// @notice Emitted when the pause is lifted.\\n    event Unpaused();\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool) {\\n        return PauseStorage.layout().paused();\\n    }\\n}\\n\",\"keccak256\":\"0x771539326a06f752e7fe6bca3e1f36668749a158bef6e9107e8502d16abe9fd1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        require(s.isPaused, \\\"Pause: not paused\\\");\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        require(!s.isPaused, \\\"Pause: paused\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb10c9dfe4535fea92eb0975b33171b65bdb955d997771cb1abf7adb4d27d4756\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"Paused()":{"notice":"Emitted when the pause is triggered."},"Unpaused()":{"notice":"Emitted when the pause is lifted."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial pause state."},"owner()":{"notice":"Gets the address of the contract owner."},"pause()":{"notice":"Pauses the contract."},"paused()":{"notice":"Gets the paused state of the contract."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"unpause()":{"notice":"Unpauses the contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol":{"PauseBase":{"abi":[{"anonymous":false,"inputs":[],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpaused","type":"event"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","kind":"dev","methods":{"pause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event."},"paused()":{"returns":{"_0":"isPaused The paused state of the contract."}},"unpause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event."}},"title":"Pausing mechanism (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pause()":"8456cb59","paused()":"5c975abb","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"kind\":\"dev\",\"methods\":{\"pause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event.\"},\"paused()\":{\"returns\":{\"_0\":\"isPaused The paused state of the contract.\"}},\"unpause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.\"}},\"title\":\"Pausing mechanism (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"Paused()\":{\"notice\":\"Emitted when the pause is triggered.\"},\"Unpaused()\":{\"notice\":\"Emitted when the pause is lifted.\"}},\"kind\":\"user\",\"methods\":{\"pause()\":{\"notice\":\"Pauses the contract.\"},\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":\"PauseBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./../libraries/PauseStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Pausing mechanism (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PauseBase is Context {\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the pause is triggered.\\n    event Paused();\\n\\n    /// @notice Emitted when the pause is lifted.\\n    event Unpaused();\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool) {\\n        return PauseStorage.layout().paused();\\n    }\\n}\\n\",\"keccak256\":\"0x771539326a06f752e7fe6bca3e1f36668749a158bef6e9107e8502d16abe9fd1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        require(s.isPaused, \\\"Pause: not paused\\\");\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        require(!s.isPaused, \\\"Pause: paused\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb10c9dfe4535fea92eb0975b33171b65bdb955d997771cb1abf7adb4d27d4756\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Paused()":{"notice":"Emitted when the pause is triggered."},"Unpaused()":{"notice":"Emitted when the pause is lifted."}},"kind":"user","methods":{"pause()":{"notice":"Pauses the contract."},"paused()":{"notice":"Gets the paused state of the contract."},"unpause()":{"notice":"Unpauses the contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol":{"PauseStorage":{"abi":[{"anonymous":false,"inputs":[],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpaused","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d02f336ccf85a6913105e5e1b3e71bb366099787bff8a3f3f4b39e5144c20ed764736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 0x2F CALLER PUSH13 0xCF85A6913105E5E1B3E71BB366 MULMOD SWAP8 DUP8 0xBF 0xF8 LOG3 RETURN DELEGATECALL 0xB3 SWAP15 MLOAD PREVRANDAO 0xC2 0xE 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"143:2892:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d02f336ccf85a6913105e5e1b3e71bb366099787bff8a3f3f4b39e5144c20ed764736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 0x2F CALLER PUSH13 0xCF85A6913105E5E1B3E71BB366 MULMOD SWAP8 DUP8 0xBF 0xF8 LOG3 RETURN DELEGATECALL 0xB3 SWAP15 MLOAD PREVRANDAO 0xC2 0xE 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"143:2892:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"constructorInit(struct PauseStorage.Layout storage pointer,bool)":"infinite","enforceIsNotPaused(struct PauseStorage.Layout storage pointer)":"infinite","enforceIsPaused(struct PauseStorage.Layout storage pointer)":"infinite","layout()":"infinite","pause(struct PauseStorage.Layout storage pointer)":"infinite","paused(struct PauseStorage.Layout storage pointer)":"infinite","proxyInit(struct PauseStorage.Layout storage pointer,bool)":"infinite","unpause(struct PauseStorage.Layout storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":\"PauseStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        require(s.isPaused, \\\"Pause: not paused\\\");\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        require(!s.isPaused, \\\"Pause: paused\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb10c9dfe4535fea92eb0975b33171b65bdb955d997771cb1abf7adb4d27d4756\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207db0582870db7706404c68f2d29b6b344835297b4fc36decf5a29585a4b08f4f64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xB0582870DB7706404C68F2D29B6B344835297B4FC36DECF5A29585A4B08F 0x4F PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"225:593:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207db0582870db7706404c68f2d29b6b344835297b4fc36decf5a29585a4b08f4f64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xB0582870DB7706404C68F2D29B6B344835297B4FC36DECF5A29585A4B08F 0x4F PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"225:593:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol":{"ERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","events":{"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"TransferBatch(address,address,address,uint256[],uint256[])":{"params":{"from":"The previous tokens owner.","ids":"The transferred tokens identifiers.","operator":"The initiator of the transfer.","to":"The new tokens owner.","values":"The amounts of tokens."}},"TransferSingle(address,address,address,uint256,uint256)":{"params":{"from":"The previous token owner.","id":"The transferred token identifier.","operator":"The initiator of the transfer.","to":"The new token owner.","value":"The amount of token."}},"URI(string,uint256)":{"params":{"id":"The token identifier.","value":"The token metadata URI."}}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"id":"The identifier to retrieve the balance of.","owner":"The account to retrieve the balance of."},"returns":{"balance":"The balance of `id` owned by account `owner`."}},"balanceOfBatch(address[],uint256[])":{"details":"Reverts if `owners` and `ids` have different lengths.","params":{"ids":"The identifiers to retrieve the balance of.","owners":"The addresses of the token holders"},"returns":{"balances":"The balances of `ids` owned by accounts `owners`."}},"isApprovedForAll(address,address)":{"params":{"operator":"Address of the operator.","owner":"Address of the authorisation giver."},"returns":{"approvedForAll":"True if the operator is approved, false if not."}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current tokens owner.","ids":"Identifiers of the tokens to transfer.","to":"Address of the new tokens owner.","values":"Amounts of tokens to transfer."}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current token owner.","id":"Identifier of the token to transfer.","to":"Address of the new token owner.","value":"Amount of token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Emits an {ApprovalForAll} event.","params":{"approved":"True to approve the operator, false to revoke its approval.","operator":"Address of the operator."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC1155 Multi Token Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"params\":{\"from\":\"The previous tokens owner.\",\"ids\":\"The transferred tokens identifiers.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new tokens owner.\",\"values\":\"The amounts of tokens.\"}},\"TransferSingle(address,address,address,uint256,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"id\":\"The transferred token identifier.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new token owner.\",\"value\":\"The amount of token.\"}},\"URI(string,uint256)\":{\"params\":{\"id\":\"The token identifier.\",\"value\":\"The token metadata URI.\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"The identifier to retrieve the balance of.\",\"owner\":\"The account to retrieve the balance of.\"},\"returns\":{\"balance\":\"The balance of `id` owned by account `owner`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `ids` have different lengths.\",\"params\":{\"ids\":\"The identifiers to retrieve the balance of.\",\"owners\":\"The addresses of the token holders\"},\"returns\":{\"balances\":\"The balances of `ids` owned by accounts `owners`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"Address of the operator.\",\"owner\":\"Address of the authorisation giver.\"},\"returns\":{\"approvedForAll\":\"True if the operator is approved, false if not.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current tokens owner.\",\"ids\":\"Identifiers of the tokens to transfer.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to transfer.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current token owner.\",\"id\":\"Identifier of the token to transfer.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to approve the operator, false to revoke its approval.\",\"operator\":\"Address of the operator.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC1155 Multi Token Standard (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"notice\":\"Emitted when a batch of tokens is transferred.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when some token is transferred.\"},\"URI(string,uint256)\":{\"notice\":\"Emitted optionally when a token metadata URI is set.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Retrieves the balance of `id` owned by account `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Retrieves the balances of `ids` owned by accounts `owners`.\"},\"constructor\":{\"notice\":\"Marks the following ERC165 interfaces as supported: ERC1155.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Retrieves the approval status of an operator for a given owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely transfers a batch of tokens.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Safely transfers some token.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enables or disables an operator's approval.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC1155Storage} from \\\"./libraries/ERC1155Storage.sol\\\";\\nimport {ERC1155Base} from \\\"./base/ERC1155Base.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155 is ERC1155Base, InterfaceDetection {\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155.\\n    constructor() {\\n        ERC1155Storage.init();\\n    }\\n}\\n\",\"keccak256\":\"0x1bfdcf2b4e1fcca4de2d1b5cbe942ed6b058d3067b1c7abec230ec9f326a876a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC1155Base is Context, IERC1155 {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n\\n    /// @inheritdoc IERC1155\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\\n        ERC1155Storage.layout().safeTransferFrom(_msgSender(), from, to, id, value, data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external virtual override {\\n        ERC1155Storage.layout().safeBatchTransferFrom(_msgSender(), from, to, ids, values, data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        ERC1155Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool approvedForAll) {\\n        return ERC1155Storage.layout().isApprovedForAll(owner, operator);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function balanceOf(address owner, uint256 id) external view virtual override returns (uint256 balance) {\\n        return ERC1155Storage.layout().balanceOf(owner, id);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view virtual override returns (uint256[] memory balances) {\\n        return ERC1155Storage.layout().balanceOfBatch(owners, ids);\\n    }\\n}\\n\",\"keccak256\":\"0xf59b067620f7905751fe9353e0416ca8eeb9d6ebd705f36b0366f81f44897cc9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"TransferBatch(address,address,address,uint256[],uint256[])":{"notice":"Emitted when a batch of tokens is transferred."},"TransferSingle(address,address,address,uint256,uint256)":{"notice":"Emitted when some token is transferred."},"URI(string,uint256)":{"notice":"Emitted optionally when a token metadata URI is set."}},"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Retrieves the balance of `id` owned by account `owner`."},"balanceOfBatch(address[],uint256[])":{"notice":"Retrieves the balances of `ids` owned by accounts `owners`."},"constructor":{"notice":"Marks the following ERC165 interfaces as supported: ERC1155."},"isApprovedForAll(address,address)":{"notice":"Retrieves the approval status of an operator for a given owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Safely transfers a batch of tokens."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Safely transfers some token."},"setApprovalForAll(address,bool)":{"notice":"Enables or disables an operator's approval."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol":{"ERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}}},"title":"ERC1155 Multi Token Standard, optional extension: Burnable (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"},\"constructor\":{\"notice\":\"Marks the fllowing ERC165 interface(s) as supported: ERC1155Burnable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol\":\"ERC1155Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC1155Storage} from \\\"./libraries/ERC1155Storage.sol\\\";\\nimport {ERC1155BurnableBase} from \\\"./base/ERC1155BurnableBase.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155Burnable is ERC1155BurnableBase {\\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Burnable\\n    constructor() {\\n        ERC1155Storage.initERC1155Burnable();\\n    }\\n}\\n\",\"keccak256\":\"0x2b5cbff4206ce4a691da0f85256de705d685f51de51821f4f1c9343dd08c6bb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155BurnableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\nabstract contract ERC1155BurnableBase is Context, IERC1155Burnable {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n\\n    /// @inheritdoc IERC1155Burnable\\n    function burnFrom(address from, uint256 id, uint256 value) external virtual override {\\n        ERC1155Storage.layout().burnFrom(_msgSender(), from, id, value);\\n    }\\n\\n    /// @inheritdoc IERC1155Burnable\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external virtual override {\\n        ERC1155Storage.layout().batchBurnFrom(_msgSender(), from, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xcbe7df476ad6f481222ab3f37350196b238a6be163c79f6f3a6b4f175cfec4f0\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."},"constructor":{"notice":"Marks the fllowing ERC165 interface(s) as supported: ERC1155Burnable"}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol":{"ERC1155MetadataURIWithBaseURI":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"baseMetadataURI","type":"string"}],"name":"BaseMetadataURISet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"baseMetadataURI","outputs":[{"internalType":"string","name":"baseURI","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"baseURI","type":"string"}],"name":"setBaseMetadataURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"metadataURI","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","events":{"BaseMetadataURISet(string)":{"params":{"baseMetadataURI":"The new base metadata URI."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"baseMetadataURI()":{"returns":{"baseURI":"The base metadata URI."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setBaseMetadataURI(string)":{"details":"Reverts if the sender is not the contract owner.Emits a {BaseMetadataURISet} event.","params":{"baseURI":"The base metadata URI."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"uri(uint256)":{"details":"URIs are defined in RFC 3986.The URI MUST point to a JSON file that conforms to the \"ERC1155 Metadata URI JSON Schema\".The uri function SHOULD be used to retrieve values if no event was emitted.The uri function MUST return the same value as the latest event for an _id if it was emitted.The uri function MUST NOT be used to check for the existence of a token as it is possible for  an implementation to return a valid string even if the token does not exist.","returns":{"metadataURI":"The URI associated to the token."}}},"title":"ERC1155 Multi Token Standard, optional extension: MetadataURIPerToken (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"baseMetadataURI()":"5b2bd79e","owner()":"8da5cb5b","setBaseMetadataURI(string)":"7e518ec8","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseMetadataURI\",\"type\":\"string\"}],\"name\":\"BaseMetadataURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"events\":{\"BaseMetadataURISet(string)\":{\"params\":{\"baseMetadataURI\":\"The new base metadata URI.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"baseMetadataURI()\":{\"returns\":{\"baseURI\":\"The base metadata URI.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setBaseMetadataURI(string)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {BaseMetadataURISet} event.\",\"params\":{\"baseURI\":\"The base metadata URI.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"uri(uint256)\":{\"details\":\"URIs are defined in RFC 3986.The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".The uri function SHOULD be used to retrieve values if no event was emitted.The uri function MUST return the same value as the latest event for an _id if it was emitted.The uri function MUST NOT be used to check for the existence of a token as it is possible for  an implementation to return a valid string even if the token does not exist.\",\"returns\":{\"metadataURI\":\"The URI associated to the token.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: MetadataURIPerToken (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"BaseMetadataURISet(string)\":{\"notice\":\"Emitted when the base token metadata URI is updated.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"baseMetadataURI()\":{\"notice\":\"Gets the base metadata URI.\"},\"constructor\":{\"notice\":\"Marks the fllowing ERC165 interface(s) as supported: ERC1155MetadataURI\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setBaseMetadataURI(string)\":{\"notice\":\"Sets the base metadata URI.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"uri(uint256)\":{\"notice\":\"Retrieves the URI for a given token.\"}},\"notice\":\"ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol\":\"ERC1155MetadataURIWithBaseURI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC1155Storage} from \\\"./libraries/ERC1155Storage.sol\\\";\\nimport {TokenMetadataWithBaseURIStorage} from \\\"./../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\\\";\\nimport {ERC1155MetadataURIWithBaseURIBase} from \\\"./base/ERC1155MetadataURIWithBaseURIBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: MetadataURIPerToken (immutable version).\\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155MetadataURIWithBaseURI is ERC1155MetadataURIWithBaseURIBase, ContractOwnership {\\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\\n\\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155MetadataURI\\n    constructor() {\\n        ERC1155Storage.initERC1155MetadataURI();\\n    }\\n}\\n\",\"keccak256\":\"0x9a3cbb7039610ae65f7b466e55ea3f72cbe560a775e7ef2a74bdbc5144e51f8e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {TokenMetadataWithBaseURIStorage} from \\\"./../../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard (proxiable version), optional extension: Metadata URI (proxiable version).\\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract ERC1155MetadataURIWithBaseURIBase is Context, IERC1155MetadataURI {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the base token metadata URI is updated.\\n    /// @param baseMetadataURI The new base metadata URI.\\n    event BaseMetadataURISet(string baseMetadataURI);\\n\\n    /// @notice Sets the base metadata URI.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {BaseMetadataURISet} event.\\n    /// @param baseURI The base metadata URI.\\n    function setBaseMetadataURI(string calldata baseURI) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenMetadataWithBaseURIStorage.layout().setBaseMetadataURI(baseURI);\\n    }\\n\\n    /// @notice Gets the base metadata URI.\\n    /// @return baseURI The base metadata URI.\\n    function baseMetadataURI() external view returns (string memory baseURI) {\\n        return TokenMetadataWithBaseURIStorage.layout().baseMetadataURI();\\n    }\\n\\n    /// @inheritdoc IERC1155MetadataURI\\n    function uri(uint256 id) external view override returns (string memory metadataURI) {\\n        return TokenMetadataWithBaseURIStorage.layout().tokenMetadataURI(id);\\n    }\\n}\\n\",\"keccak256\":\"0xea9e3ab829fdaafb384b57755feee1fa2ba04effb28393603dc975e732f11712\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary TokenMetadataWithBaseURIStorage {\\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\\n    using Strings for uint256;\\n\\n    struct Layout {\\n        string baseURI;\\n    }\\n\\n    bytes32 public constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadataWithBaseURI.storage\\\")) - 1);\\n\\n    event BaseMetadataURISet(string baseMetadataURI);\\n\\n    /// @notice Sets the base metadata URI.\\n    /// @dev Emits a {BaseMetadataURISet} event.\\n    /// @param baseURI The base metadata URI.\\n    function setBaseMetadataURI(Layout storage s, string calldata baseURI) internal {\\n        s.baseURI = baseURI;\\n        emit BaseMetadataURISet(baseURI);\\n    }\\n\\n    /// @notice Gets the base metadata URI.\\n    /// @return baseURI The base metadata URI.\\n    function baseMetadataURI(Layout storage s) internal view returns (string memory baseURI) {\\n        return s.baseURI;\\n    }\\n\\n    /// @notice Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identfier.\\n    /// @param id The token identifier.\\n    /// @return tokenURI The token metadata URI as the concatenation of the base metadata URI and the token identfier.\\n    function tokenMetadataURI(Layout storage s, uint256 id) internal view returns (string memory tokenURI) {\\n        return string(abi.encodePacked(s.baseURI, id.toString()));\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x59ef2fafcf83742310ac25c160903f89baff367af24471a12b1b38179df9b81f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"BaseMetadataURISet(string)":{"notice":"Emitted when the base token metadata URI is updated."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"baseMetadataURI()":{"notice":"Gets the base metadata URI."},"constructor":{"notice":"Marks the fllowing ERC165 interface(s) as supported: ERC1155MetadataURI"},"owner()":{"notice":"Gets the address of the contract owner."},"setBaseMetadataURI(string)":{"notice":"Sets the base metadata URI."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"uri(uint256)":{"notice":"Retrieves the URI for a given token."}},"notice":"ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol":{"ERC1155Mintable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"the account granted with the role.","operator":"the initiator of the grant.","role":"the granted role."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"the account losing the role.","operator":"the initiator of the revocation, or identical to `account` for a renouncement.","role":"the revoked or renounced role."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"_0":"whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC1155 Multi Token Standard, optional extension: Mintable (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"MINTER_ROLE()":"d5391393","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeMint(address,uint256,uint256,bytes)":"5cfa9297","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"the account granted with the role.\",\"operator\":\"the initiator of the grant.\",\"role\":\"the granted role.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"the account losing the role.\",\"operator\":\"the initiator of the revocation, or identical to `account` for a renouncement.\",\"role\":\"the revoked or renounced role.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"_0\":\"whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Mintable (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when a role is granted.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when a role is revoked or renounced.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the fllowing ERC165 interface(s) as supported: ERC1155Mintable\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol\":\"ERC1155Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xad30286210b6693b212a323037dde404939d7745e4578ee1a899cce60b3aa216\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when a role is granted.\\n    /// @param role the granted role.\\n    /// @param account the account granted with the role.\\n    /// @param operator the initiator of the grant.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when a role is revoked or renounced.\\n    /// @param role the revoked or renounced role.\\n    /// @param account the account losing the role.\\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if the sender does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xbf8f619858115dc1f3d4a3214a651753a3a3ba4e53b0837a03054ae471e10410\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96af8a6ddb3c9f1649d7ce512cd9cb87f643cea11ca100c857aac087a839272\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC1155Storage} from \\\"./libraries/ERC1155Storage.sol\\\";\\nimport {ERC1155MintableBase} from \\\"./base/ERC1155MintableBase.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155Mintable is ERC1155MintableBase, AccessControl {\\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Mintable\\n    constructor() {\\n        ERC1155Storage.initERC1155Mintable();\\n    }\\n}\\n\",\"keccak256\":\"0xd661158628ee63e7452e96203b3ac03c0f8e0e0993a021c0d639442cb8928562\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MintableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../../access/libraries/AccessControlStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\n/// @dev Note: This contract requires AccessControl.\\nabstract contract ERC1155MintableBase is Context, IERC1155Mintable {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n\\n    /// @inheritdoc IERC1155Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\\n        ERC1155Storage.layout().safeMint(sender, to, id, value, data);\\n    }\\n\\n    /// @inheritdoc IERC1155Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external virtual override {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\\n        ERC1155Storage.layout().safeBatchMint(sender, to, ids, values, data);\\n    }\\n}\\n\",\"keccak256\":\"0xb5cc941581921eb5d0691c07b67ac4e4a675264c135e9614843e1af24359bc36\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when a role is granted."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when a role is revoked or renounced."}},"kind":"user","methods":{"constructor":{"notice":"Marks the fllowing ERC165 interface(s) as supported: ERC1155Mintable"},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155Base.sol":{"ERC1155Base":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","events":{"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"TransferBatch(address,address,address,uint256[],uint256[])":{"params":{"from":"The previous tokens owner.","ids":"The transferred tokens identifiers.","operator":"The initiator of the transfer.","to":"The new tokens owner.","values":"The amounts of tokens."}},"TransferSingle(address,address,address,uint256,uint256)":{"params":{"from":"The previous token owner.","id":"The transferred token identifier.","operator":"The initiator of the transfer.","to":"The new token owner.","value":"The amount of token."}},"URI(string,uint256)":{"params":{"id":"The token identifier.","value":"The token metadata URI."}}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"id":"The identifier to retrieve the balance of.","owner":"The account to retrieve the balance of."},"returns":{"balance":"The balance of `id` owned by account `owner`."}},"balanceOfBatch(address[],uint256[])":{"details":"Reverts if `owners` and `ids` have different lengths.","params":{"ids":"The identifiers to retrieve the balance of.","owners":"The addresses of the token holders"},"returns":{"balances":"The balances of `ids` owned by accounts `owners`."}},"isApprovedForAll(address,address)":{"params":{"operator":"Address of the operator.","owner":"Address of the authorisation giver."},"returns":{"approvedForAll":"True if the operator is approved, false if not."}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current tokens owner.","ids":"Identifiers of the tokens to transfer.","to":"Address of the new tokens owner.","values":"Amounts of tokens to transfer."}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current token owner.","id":"Identifier of the token to transfer.","to":"Address of the new token owner.","value":"Amount of token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Emits an {ApprovalForAll} event.","params":{"approved":"True to approve the operator, false to revoke its approval.","operator":"Address of the operator."}}},"title":"ERC1155 Multi Token Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"params\":{\"from\":\"The previous tokens owner.\",\"ids\":\"The transferred tokens identifiers.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new tokens owner.\",\"values\":\"The amounts of tokens.\"}},\"TransferSingle(address,address,address,uint256,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"id\":\"The transferred token identifier.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new token owner.\",\"value\":\"The amount of token.\"}},\"URI(string,uint256)\":{\"params\":{\"id\":\"The token identifier.\",\"value\":\"The token metadata URI.\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"The identifier to retrieve the balance of.\",\"owner\":\"The account to retrieve the balance of.\"},\"returns\":{\"balance\":\"The balance of `id` owned by account `owner`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `ids` have different lengths.\",\"params\":{\"ids\":\"The identifiers to retrieve the balance of.\",\"owners\":\"The addresses of the token holders\"},\"returns\":{\"balances\":\"The balances of `ids` owned by accounts `owners`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"Address of the operator.\",\"owner\":\"Address of the authorisation giver.\"},\"returns\":{\"approvedForAll\":\"True if the operator is approved, false if not.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current tokens owner.\",\"ids\":\"Identifiers of the tokens to transfer.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to transfer.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current token owner.\",\"id\":\"Identifier of the token to transfer.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to approve the operator, false to revoke its approval.\",\"operator\":\"Address of the operator.\"}}},\"title\":\"ERC1155 Multi Token Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"notice\":\"Emitted when a batch of tokens is transferred.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when some token is transferred.\"},\"URI(string,uint256)\":{\"notice\":\"Emitted optionally when a token metadata URI is set.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Retrieves the balance of `id` owned by account `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Retrieves the balances of `ids` owned by accounts `owners`.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Retrieves the approval status of an operator for a given owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely transfers a batch of tokens.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Safely transfers some token.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enables or disables an operator's approval.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155Base.sol\":\"ERC1155Base\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC1155Base is Context, IERC1155 {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n\\n    /// @inheritdoc IERC1155\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\\n        ERC1155Storage.layout().safeTransferFrom(_msgSender(), from, to, id, value, data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external virtual override {\\n        ERC1155Storage.layout().safeBatchTransferFrom(_msgSender(), from, to, ids, values, data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        ERC1155Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool approvedForAll) {\\n        return ERC1155Storage.layout().isApprovedForAll(owner, operator);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function balanceOf(address owner, uint256 id) external view virtual override returns (uint256 balance) {\\n        return ERC1155Storage.layout().balanceOf(owner, id);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view virtual override returns (uint256[] memory balances) {\\n        return ERC1155Storage.layout().balanceOfBatch(owners, ids);\\n    }\\n}\\n\",\"keccak256\":\"0xf59b067620f7905751fe9353e0416ca8eeb9d6ebd705f36b0366f81f44897cc9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"TransferBatch(address,address,address,uint256[],uint256[])":{"notice":"Emitted when a batch of tokens is transferred."},"TransferSingle(address,address,address,uint256,uint256)":{"notice":"Emitted when some token is transferred."},"URI(string,uint256)":{"notice":"Emitted optionally when a token metadata URI is set."}},"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Retrieves the balance of `id` owned by account `owner`."},"balanceOfBatch(address[],uint256[])":{"notice":"Retrieves the balances of `ids` owned by accounts `owners`."},"isApprovedForAll(address,address)":{"notice":"Retrieves the approval status of an operator for a given owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Safely transfers a batch of tokens."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Safely transfers some token."},"setApprovalForAll(address,bool)":{"notice":"Enables or disables an operator's approval."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155BurnableBase.sol":{"ERC1155BurnableBase":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC1155 (Multi Token Standard).","kind":"dev","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}}},"title":"ERC1155 Multi Token Standard, optional extension: Burnable (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC1155 (Multi Token Standard).\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155BurnableBase.sol\":\"ERC1155BurnableBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155BurnableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\nabstract contract ERC1155BurnableBase is Context, IERC1155Burnable {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n\\n    /// @inheritdoc IERC1155Burnable\\n    function burnFrom(address from, uint256 id, uint256 value) external virtual override {\\n        ERC1155Storage.layout().burnFrom(_msgSender(), from, id, value);\\n    }\\n\\n    /// @inheritdoc IERC1155Burnable\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external virtual override {\\n        ERC1155Storage.layout().batchBurnFrom(_msgSender(), from, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xcbe7df476ad6f481222ab3f37350196b238a6be163c79f6f3a6b4f175cfec4f0\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol":{"ERC1155MetadataURIWithBaseURIBase":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"baseMetadataURI","type":"string"}],"name":"BaseMetadataURISet","type":"event"},{"inputs":[],"name":"baseMetadataURI","outputs":[{"internalType":"string","name":"baseURI","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"baseURI","type":"string"}],"name":"setBaseMetadataURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"metadataURI","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC1155 (Multi Token Standard).Note: This contract requires ERC173 (Contract Ownership standard).","events":{"BaseMetadataURISet(string)":{"params":{"baseMetadataURI":"The new base metadata URI."}}},"kind":"dev","methods":{"baseMetadataURI()":{"returns":{"baseURI":"The base metadata URI."}},"setBaseMetadataURI(string)":{"details":"Reverts if the sender is not the contract owner.Emits a {BaseMetadataURISet} event.","params":{"baseURI":"The base metadata URI."}},"uri(uint256)":{"details":"URIs are defined in RFC 3986.The URI MUST point to a JSON file that conforms to the \"ERC1155 Metadata URI JSON Schema\".The uri function SHOULD be used to retrieve values if no event was emitted.The uri function MUST return the same value as the latest event for an _id if it was emitted.The uri function MUST NOT be used to check for the existence of a token as it is possible for  an implementation to return a valid string even if the token does not exist.","returns":{"metadataURI":"The URI associated to the token."}}},"title":"ERC1155 Multi Token Standard (proxiable version), optional extension: Metadata URI (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"baseMetadataURI()":"5b2bd79e","setBaseMetadataURI(string)":"7e518ec8","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseMetadataURI\",\"type\":\"string\"}],\"name\":\"BaseMetadataURISet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC1155 (Multi Token Standard).Note: This contract requires ERC173 (Contract Ownership standard).\",\"events\":{\"BaseMetadataURISet(string)\":{\"params\":{\"baseMetadataURI\":\"The new base metadata URI.\"}}},\"kind\":\"dev\",\"methods\":{\"baseMetadataURI()\":{\"returns\":{\"baseURI\":\"The base metadata URI.\"}},\"setBaseMetadataURI(string)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {BaseMetadataURISet} event.\",\"params\":{\"baseURI\":\"The base metadata URI.\"}},\"uri(uint256)\":{\"details\":\"URIs are defined in RFC 3986.The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".The uri function SHOULD be used to retrieve values if no event was emitted.The uri function MUST return the same value as the latest event for an _id if it was emitted.The uri function MUST NOT be used to check for the existence of a token as it is possible for  an implementation to return a valid string even if the token does not exist.\",\"returns\":{\"metadataURI\":\"The URI associated to the token.\"}}},\"title\":\"ERC1155 Multi Token Standard (proxiable version), optional extension: Metadata URI (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"BaseMetadataURISet(string)\":{\"notice\":\"Emitted when the base token metadata URI is updated.\"}},\"kind\":\"user\",\"methods\":{\"baseMetadataURI()\":{\"notice\":\"Gets the base metadata URI.\"},\"setBaseMetadataURI(string)\":{\"notice\":\"Sets the base metadata URI.\"},\"uri(uint256)\":{\"notice\":\"Retrieves the URI for a given token.\"}},\"notice\":\"ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol\":\"ERC1155MetadataURIWithBaseURIBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {TokenMetadataWithBaseURIStorage} from \\\"./../../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard (proxiable version), optional extension: Metadata URI (proxiable version).\\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract ERC1155MetadataURIWithBaseURIBase is Context, IERC1155MetadataURI {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the base token metadata URI is updated.\\n    /// @param baseMetadataURI The new base metadata URI.\\n    event BaseMetadataURISet(string baseMetadataURI);\\n\\n    /// @notice Sets the base metadata URI.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {BaseMetadataURISet} event.\\n    /// @param baseURI The base metadata URI.\\n    function setBaseMetadataURI(string calldata baseURI) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenMetadataWithBaseURIStorage.layout().setBaseMetadataURI(baseURI);\\n    }\\n\\n    /// @notice Gets the base metadata URI.\\n    /// @return baseURI The base metadata URI.\\n    function baseMetadataURI() external view returns (string memory baseURI) {\\n        return TokenMetadataWithBaseURIStorage.layout().baseMetadataURI();\\n    }\\n\\n    /// @inheritdoc IERC1155MetadataURI\\n    function uri(uint256 id) external view override returns (string memory metadataURI) {\\n        return TokenMetadataWithBaseURIStorage.layout().tokenMetadataURI(id);\\n    }\\n}\\n\",\"keccak256\":\"0xea9e3ab829fdaafb384b57755feee1fa2ba04effb28393603dc975e732f11712\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary TokenMetadataWithBaseURIStorage {\\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\\n    using Strings for uint256;\\n\\n    struct Layout {\\n        string baseURI;\\n    }\\n\\n    bytes32 public constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadataWithBaseURI.storage\\\")) - 1);\\n\\n    event BaseMetadataURISet(string baseMetadataURI);\\n\\n    /// @notice Sets the base metadata URI.\\n    /// @dev Emits a {BaseMetadataURISet} event.\\n    /// @param baseURI The base metadata URI.\\n    function setBaseMetadataURI(Layout storage s, string calldata baseURI) internal {\\n        s.baseURI = baseURI;\\n        emit BaseMetadataURISet(baseURI);\\n    }\\n\\n    /// @notice Gets the base metadata URI.\\n    /// @return baseURI The base metadata URI.\\n    function baseMetadataURI(Layout storage s) internal view returns (string memory baseURI) {\\n        return s.baseURI;\\n    }\\n\\n    /// @notice Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identfier.\\n    /// @param id The token identifier.\\n    /// @return tokenURI The token metadata URI as the concatenation of the base metadata URI and the token identfier.\\n    function tokenMetadataURI(Layout storage s, uint256 id) internal view returns (string memory tokenURI) {\\n        return string(abi.encodePacked(s.baseURI, id.toString()));\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x59ef2fafcf83742310ac25c160903f89baff367af24471a12b1b38179df9b81f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"BaseMetadataURISet(string)":{"notice":"Emitted when the base token metadata URI is updated."}},"kind":"user","methods":{"baseMetadataURI()":{"notice":"Gets the base metadata URI."},"setBaseMetadataURI(string)":{"notice":"Sets the base metadata URI."},"uri(uint256)":{"notice":"Retrieves the URI for a given token."}},"notice":"ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MintableBase.sol":{"ERC1155MintableBase":{"abi":[{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC1155 (Multi Token Standard).Note: This contract requires AccessControl.","kind":"dev","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}}},"title":"ERC1155 Multi Token Standard, optional extension: Mintable (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"MINTER_ROLE()":"d5391393","safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeMint(address,uint256,uint256,bytes)":"5cfa9297"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC1155 (Multi Token Standard).Note: This contract requires AccessControl.\",\"kind\":\"dev\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Mintable (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MintableBase.sol\":\"ERC1155MintableBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96af8a6ddb3c9f1649d7ce512cd9cb87f643cea11ca100c857aac087a839272\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MintableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../../access/libraries/AccessControlStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\n/// @dev Note: This contract requires AccessControl.\\nabstract contract ERC1155MintableBase is Context, IERC1155Mintable {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n\\n    /// @inheritdoc IERC1155Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\\n        ERC1155Storage.layout().safeMint(sender, to, id, value, data);\\n    }\\n\\n    /// @inheritdoc IERC1155Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external virtual override {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\\n        ERC1155Storage.layout().safeBatchMint(sender, to, ids, values, data);\\n    }\\n}\\n\",\"keccak256\":\"0xb5cc941581921eb5d0691c07b67ac4e4a675264c135e9614843e1af24359bc36\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xd9b67a26.","events":{"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"TransferBatch(address,address,address,uint256[],uint256[])":{"params":{"from":"The previous tokens owner.","ids":"The transferred tokens identifiers.","operator":"The initiator of the transfer.","to":"The new tokens owner.","values":"The amounts of tokens."}},"TransferSingle(address,address,address,uint256,uint256)":{"params":{"from":"The previous token owner.","id":"The transferred token identifier.","operator":"The initiator of the transfer.","to":"The new token owner.","value":"The amount of token."}},"URI(string,uint256)":{"params":{"id":"The token identifier.","value":"The token metadata URI."}}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"id":"The identifier to retrieve the balance of.","owner":"The account to retrieve the balance of."},"returns":{"balance":"The balance of `id` owned by account `owner`."}},"balanceOfBatch(address[],uint256[])":{"details":"Reverts if `owners` and `ids` have different lengths.","params":{"ids":"The identifiers to retrieve the balance of.","owners":"The addresses of the token holders"},"returns":{"balances":"The balances of `ids` owned by accounts `owners`."}},"isApprovedForAll(address,address)":{"params":{"operator":"Address of the operator.","owner":"Address of the authorisation giver."},"returns":{"approved":"True if the operator is approved, false if not."}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current tokens owner.","ids":"Identifiers of the tokens to transfer.","to":"Address of the new tokens owner.","values":"Amounts of tokens to transfer."}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current token owner.","id":"Identifier of the token to transfer.","to":"Address of the new token owner.","value":"Amount of token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Emits an {ApprovalForAll} event.","params":{"approved":"True to approve the operator, false to revoke its approval.","operator":"Address of the operator."}}},"title":"ERC1155 Multi Token Standard, basic interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xd9b67a26.\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"params\":{\"from\":\"The previous tokens owner.\",\"ids\":\"The transferred tokens identifiers.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new tokens owner.\",\"values\":\"The amounts of tokens.\"}},\"TransferSingle(address,address,address,uint256,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"id\":\"The transferred token identifier.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new token owner.\",\"value\":\"The amount of token.\"}},\"URI(string,uint256)\":{\"params\":{\"id\":\"The token identifier.\",\"value\":\"The token metadata URI.\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"The identifier to retrieve the balance of.\",\"owner\":\"The account to retrieve the balance of.\"},\"returns\":{\"balance\":\"The balance of `id` owned by account `owner`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `ids` have different lengths.\",\"params\":{\"ids\":\"The identifiers to retrieve the balance of.\",\"owners\":\"The addresses of the token holders\"},\"returns\":{\"balances\":\"The balances of `ids` owned by accounts `owners`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"Address of the operator.\",\"owner\":\"Address of the authorisation giver.\"},\"returns\":{\"approved\":\"True if the operator is approved, false if not.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current tokens owner.\",\"ids\":\"Identifiers of the tokens to transfer.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to transfer.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current token owner.\",\"id\":\"Identifier of the token to transfer.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to approve the operator, false to revoke its approval.\",\"operator\":\"Address of the operator.\"}}},\"title\":\"ERC1155 Multi Token Standard, basic interface.\",\"version\":1},\"userdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"notice\":\"Emitted when a batch of tokens is transferred.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when some token is transferred.\"},\"URI(string,uint256)\":{\"notice\":\"Emitted optionally when a token metadata URI is set.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Retrieves the balance of `id` owned by account `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Retrieves the balances of `ids` owned by accounts `owners`.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Retrieves the approval status of an operator for a given owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely transfers a batch of tokens.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Safely transfers some token.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enables or disables an operator's approval.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"TransferBatch(address,address,address,uint256[],uint256[])":{"notice":"Emitted when a batch of tokens is transferred."},"TransferSingle(address,address,address,uint256,uint256)":{"notice":"Emitted when some token is transferred."},"URI(string,uint256)":{"notice":"Emitted optionally when a token metadata URI is set."}},"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Retrieves the balance of `id` owned by account `owner`."},"balanceOfBatch(address[],uint256[])":{"notice":"Retrieves the balances of `ids` owned by accounts `owners`."},"isApprovedForAll(address,address)":{"notice":"Retrieves the approval status of an operator for a given owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Safely transfers a batch of tokens."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Safely transfers some token."},"setApprovalForAll(address,bool)":{"notice":"Enables or disables an operator's approval."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"IERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.","kind":"dev","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}}},"title":"ERC1155 Multi Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":\"IERC1155Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol":{"IERC1155Deliverable":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeDeliver","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.","kind":"dev","methods":{"safeDeliver(address[],uint256[],uint256[],bytes)":{"details":"Reverts if `recipients`, `ids` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if one of `recipients` balance overflows.Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","recipients":"Addresses of the new tokens owners.","values":"Amounts of tokens to mint."}}},"title":"ERC1155 Multi Token Standard, optional extension: Deliverable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeDeliver(address[],uint256[],uint256[],bytes)":"e8ab9ccc"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeDeliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\",\"kind\":\"dev\",\"methods\":{\"safeDeliver(address[],uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `recipients`, `ids` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if one of `recipients` balance overflows.Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"recipients\":\"Addresses of the new tokens owners.\",\"values\":\"Amounts of tokens to mint.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Deliverable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeDeliver(address[],uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints tokens to multiple recipients.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":\"IERC1155Deliverable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeDeliver(address[],uint256[],uint256[],bytes)":{"notice":"Safely mints tokens to multiple recipients."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol":{"IERC1155MetadataURI":{"abi":[{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"metadataURI","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x0e89341c.","kind":"dev","methods":{"uri(uint256)":{"details":"URIs are defined in RFC 3986.The URI MUST point to a JSON file that conforms to the \"ERC1155 Metadata URI JSON Schema\".The uri function SHOULD be used to retrieve values if no event was emitted.The uri function MUST return the same value as the latest event for an _id if it was emitted.The uri function MUST NOT be used to check for the existence of a token as it is possible for  an implementation to return a valid string even if the token does not exist.","returns":{"metadataURI":"The URI associated to the token."}}},"title":"ERC1155 Multi Token Standard, optional extension: Metadata URI.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x0e89341c.\",\"kind\":\"dev\",\"methods\":{\"uri(uint256)\":{\"details\":\"URIs are defined in RFC 3986.The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".The uri function SHOULD be used to retrieve values if no event was emitted.The uri function MUST return the same value as the latest event for an _id if it was emitted.The uri function MUST NOT be used to check for the existence of a token as it is possible for  an implementation to return a valid string even if the token does not exist.\",\"returns\":{\"metadataURI\":\"The URI associated to the token.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Metadata URI.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uri(uint256)\":{\"notice\":\"Retrieves the URI for a given token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":\"IERC1155MetadataURI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"uri(uint256)":{"notice":"Retrieves the URI for a given token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"IERC1155Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.","kind":"dev","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}}},"title":"ERC1155 Multi Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeMint(address,uint256,uint256,bytes)":"5cfa9297"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.\",\"kind\":\"dev\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":\"IERC1155Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"IERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}}},"title":"ERC1155 Multi Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}}},\"title\":\"ERC1155 Multi Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"}},\"notice\":\"Interface for any contract that wants to support transfers from ERC1155 asset contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":\"IERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."}},"notice":"Interface for any contract that wants to support transfers from ERC1155 asset contracts.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol":{"ERC1155Storage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202188427913d094a78ce4f38e3eecc6acf6a1c2b45db8ab0d8a5d28b3eb08286d64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 DUP9 TIMESTAMP PUSH26 0x13D094A78CE4F38E3EECC6ACF6A1C2B45DB8AB0D8A5D28B3EB08 0x28 PUSH14 0x64736F6C63430008120033000000 ","sourceMap":"753:18223:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202188427913d094a78ce4f38e3eecc6acf6a1c2b45db8ab0d8a5d28b3eb08286d64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 DUP9 TIMESTAMP PUSH26 0x13D094A78CE4F38E3EECC6ACF6A1C2B45DB8AB0D8A5D28B3EB08 0x28 PUSH14 0x64736F6C63430008120033000000 ","sourceMap":"753:18223:28:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_burnToken(struct ERC1155Storage.Layout storage pointer,address,uint256,uint256)":"infinite","_callOnERC1155BatchReceived(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_callOnERC1155Received(address,address,address,uint256,uint256,bytes memory)":"infinite","_isOperatable(struct ERC1155Storage.Layout storage pointer,address,address)":"infinite","_mintToken(struct ERC1155Storage.Layout storage pointer,address,uint256,uint256)":"infinite","_transferToken(struct ERC1155Storage.Layout storage pointer,address,address,uint256,uint256)":"infinite","balanceOf(struct ERC1155Storage.Layout storage pointer,address,uint256)":"infinite","balanceOfBatch(struct ERC1155Storage.Layout storage pointer,address[] calldata,uint256[] calldata)":"infinite","batchBurnFrom(struct ERC1155Storage.Layout storage pointer,address,address,uint256[] calldata,uint256[] calldata)":"infinite","burnFrom(struct ERC1155Storage.Layout storage pointer,address,address,uint256,uint256)":"infinite","init()":"infinite","initERC1155Burnable()":"infinite","initERC1155Deliverable()":"infinite","initERC1155MetadataURI()":"infinite","initERC1155Mintable()":"infinite","isApprovedForAll(struct ERC1155Storage.Layout storage pointer,address,address)":"infinite","layout()":"infinite","safeBatchMint(struct ERC1155Storage.Layout storage pointer,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","safeBatchTransferFrom(struct ERC1155Storage.Layout storage pointer,address,address,address,uint256[] calldata,uint256[] calldata,bytes calldata)":"infinite","safeDeliver(struct ERC1155Storage.Layout storage pointer,address,address[] memory,uint256[] memory,uint256[] memory,bytes memory)":"infinite","safeMint(struct ERC1155Storage.Layout storage pointer,address,address,uint256,uint256,bytes memory)":"infinite","safeTransferFrom(struct ERC1155Storage.Layout storage pointer,address,address,address,uint256,uint256,bytes calldata)":"infinite","setApprovalForAll(struct ERC1155Storage.Layout storage pointer,address,address,bool)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":\"ERC1155Storage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol":{"TokenMetadataWithBaseURIStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"baseMetadataURI","type":"string"}],"name":"BaseMetadataURISet","type":"event"},{"inputs":[],"name":"LAYOUT_STORAGE_SLOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"610165610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806396c3092d1461003a575b600080fd5b610042610058565b60405161004f91906100a7565b60405180910390f35b60017fe94434e3c6b941c5d90218142fadcc69cb2e13723993540bfa1c131dd1d3475a60001c61008891906100fb565b60001b81565b6000819050919050565b6100a18161008e565b82525050565b60006020820190506100bc6000830184610098565b92915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610106826100c2565b9150610111836100c2565b9250828203905081811115610129576101286100cc565b5b9291505056fea264697066735822122093f87c43f849c347667c6dd574b7235f037e3a0465d5c979e5bf25ad199a0c9364736f6c63430008120033","opcodes":"PUSH2 0x165 PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x96C3092D EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x42 PUSH2 0x58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F SWAP2 SWAP1 PUSH2 0xA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH32 0xE94434E3C6B941C5D90218142FADCC69CB2E13723993540BFA1C131DD1D3475A PUSH1 0x0 SHR PUSH2 0x88 SWAP2 SWAP1 PUSH2 0xFB JUMP JUMPDEST PUSH1 0x0 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA1 DUP2 PUSH2 0x8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x98 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0xC2 JUMP JUMPDEST SWAP2 POP PUSH2 0x111 DUP4 PUSH2 0xC2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x129 JUMPI PUSH2 0x128 PUSH2 0xCC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xF8 PUSH29 0x43F849C347667C6DD574B7235F037E3A0465D5C979E5BF25AD199A0C93 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"213:1580:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@LAYOUT_STORAGE_SLOT_3118":{"entryPoint":88,"id":3118,"parameterSlots":0,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack_library":{"entryPoint":152,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed":{"entryPoint":167,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":251,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":142,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":194,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":204,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:932:38","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:38","statements":[{"nodeType":"YulAssignment","src":"62:16:38","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:38"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:38","type":""}],"src":"7:77:38"},{"body":{"nodeType":"YulBlock","src":"163:53:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"180:3:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"203:5:38"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"185:17:38"},"nodeType":"YulFunctionCall","src":"185:24:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"173:6:38"},"nodeType":"YulFunctionCall","src":"173:37:38"},"nodeType":"YulExpressionStatement","src":"173:37:38"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"151:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"158:3:38","type":""}],"src":"90:126:38"},{"body":{"nodeType":"YulBlock","src":"328:132:38","statements":[{"nodeType":"YulAssignment","src":"338:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"350:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"361:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"346:3:38"},"nodeType":"YulFunctionCall","src":"346:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"338:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"426:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"439:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"450:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"435:3:38"},"nodeType":"YulFunctionCall","src":"435:17:38"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulIdentifier","src":"374:51:38"},"nodeType":"YulFunctionCall","src":"374:79:38"},"nodeType":"YulExpressionStatement","src":"374:79:38"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"300:9:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"312:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"323:4:38","type":""}],"src":"222:238:38"},{"body":{"nodeType":"YulBlock","src":"511:32:38","statements":[{"nodeType":"YulAssignment","src":"521:16:38","value":{"name":"value","nodeType":"YulIdentifier","src":"532:5:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:38"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:38","type":""}],"src":"466:77:38"},{"body":{"nodeType":"YulBlock","src":"577:152:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"594:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"597:77:38","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"587:6:38"},"nodeType":"YulFunctionCall","src":"587:88:38"},"nodeType":"YulExpressionStatement","src":"587:88:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"691:1:38","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"694:4:38","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"684:6:38"},"nodeType":"YulFunctionCall","src":"684:15:38"},"nodeType":"YulExpressionStatement","src":"684:15:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"715:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"718:4:38","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"708:6:38"},"nodeType":"YulFunctionCall","src":"708:15:38"},"nodeType":"YulExpressionStatement","src":"708:15:38"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"549:180:38"},{"body":{"nodeType":"YulBlock","src":"780:149:38","statements":[{"nodeType":"YulAssignment","src":"790:25:38","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"813:1:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"795:17:38"},"nodeType":"YulFunctionCall","src":"795:20:38"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"790:1:38"}]},{"nodeType":"YulAssignment","src":"824:25:38","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"847:1:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"829:17:38"},"nodeType":"YulFunctionCall","src":"829:20:38"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"824:1:38"}]},{"nodeType":"YulAssignment","src":"858:17:38","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"870:1:38"},{"name":"y","nodeType":"YulIdentifier","src":"873:1:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"866:3:38"},"nodeType":"YulFunctionCall","src":"866:9:38"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"858:4:38"}]},{"body":{"nodeType":"YulBlock","src":"900:22:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"902:16:38"},"nodeType":"YulFunctionCall","src":"902:18:38"},"nodeType":"YulExpressionStatement","src":"902:18:38"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"891:4:38"},{"name":"x","nodeType":"YulIdentifier","src":"897:1:38"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"888:2:38"},"nodeType":"YulFunctionCall","src":"888:11:38"},"nodeType":"YulIf","src":"885:37:38"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"766:1:38","type":""},{"name":"y","nodeType":"YulTypedName","src":"769:1:38","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"775:4:38","type":""}],"src":"735:194:38"}]},"contents":"{\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n}\n","id":38,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806396c3092d1461003a575b600080fd5b610042610058565b60405161004f91906100a7565b60405180910390f35b60017fe94434e3c6b941c5d90218142fadcc69cb2e13723993540bfa1c131dd1d3475a60001c61008891906100fb565b60001b81565b6000819050919050565b6100a18161008e565b82525050565b60006020820190506100bc6000830184610098565b92915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610106826100c2565b9150610111836100c2565b9250828203905081811115610129576101286100cc565b5b9291505056fea264697066735822122093f87c43f849c347667c6dd574b7235f037e3a0465d5c979e5bf25ad199a0c9364736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x96C3092D EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x42 PUSH2 0x58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F SWAP2 SWAP1 PUSH2 0xA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH32 0xE94434E3C6B941C5D90218142FADCC69CB2E13723993540BFA1C131DD1D3475A PUSH1 0x0 SHR PUSH2 0x88 SWAP2 SWAP1 PUSH2 0xFB JUMP JUMPDEST PUSH1 0x0 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA1 DUP2 PUSH2 0x8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x98 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0xC2 JUMP JUMPDEST SWAP2 POP PUSH2 0x111 DUP4 PUSH2 0xC2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x129 JUMPI PUSH2 0x128 PUSH2 0xCC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xF8 PUSH29 0x43F849C347667C6DD574B7235F037E3A0465D5C979E5BF25AD199A0C93 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"213:1580:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;428:136;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;562:1;490:68;482:77;;:81;;;;:::i;:::-;474:90;;428:136;:::o;7:77:38:-;44:7;73:5;62:16;;7:77;;;:::o;90:126::-;185:24;203:5;185:24;:::i;:::-;180:3;173:37;90:126;;:::o;222:238::-;323:4;361:2;350:9;346:18;338:26;;374:79;450:1;439:9;435:17;426:6;374:79;:::i;:::-;222:238;;;;:::o;466:77::-;503:7;532:5;521:16;;466:77;;;:::o;549:180::-;597:77;594:1;587:88;694:4;691:1;684:15;718:4;715:1;708:15;735:194;775:4;795:20;813:1;795:20;:::i;:::-;790:25;;829:20;847:1;829:20;:::i;:::-;824:25;;873:1;870;866:9;858:17;;897:1;891:4;888:11;885:37;;;902:18;;:::i;:::-;885:37;735:194;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"71400","executionCost":"148","totalCost":"71548"},"external":{"LAYOUT_STORAGE_SLOT()":"infinite"},"internal":{"baseMetadataURI(struct TokenMetadataWithBaseURIStorage.Layout storage pointer)":"infinite","layout()":"infinite","setBaseMetadataURI(struct TokenMetadataWithBaseURIStorage.Layout storage pointer,string calldata)":"infinite","tokenMetadataURI(struct TokenMetadataWithBaseURIStorage.Layout storage pointer,uint256)":"infinite"}},"methodIdentifiers":{"LAYOUT_STORAGE_SLOT()":"96c3092d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseMetadataURI\",\"type\":\"string\"}],\"name\":\"BaseMetadataURISet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LAYOUT_STORAGE_SLOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol\":\"TokenMetadataWithBaseURIStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary TokenMetadataWithBaseURIStorage {\\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\\n    using Strings for uint256;\\n\\n    struct Layout {\\n        string baseURI;\\n    }\\n\\n    bytes32 public constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadataWithBaseURI.storage\\\")) - 1);\\n\\n    event BaseMetadataURISet(string baseMetadataURI);\\n\\n    /// @notice Sets the base metadata URI.\\n    /// @dev Emits a {BaseMetadataURISet} event.\\n    /// @param baseURI The base metadata URI.\\n    function setBaseMetadataURI(Layout storage s, string calldata baseURI) internal {\\n        s.baseURI = baseURI;\\n        emit BaseMetadataURISet(baseURI);\\n    }\\n\\n    /// @notice Gets the base metadata URI.\\n    /// @return baseURI The base metadata URI.\\n    function baseMetadataURI(Layout storage s) internal view returns (string memory baseURI) {\\n        return s.baseURI;\\n    }\\n\\n    /// @notice Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identfier.\\n    /// @param id The token identifier.\\n    /// @return tokenURI The token metadata URI as the concatenation of the base metadata URI and the token identfier.\\n    function tokenMetadataURI(Layout storage s, uint256 id) internal view returns (string memory tokenURI) {\\n        return string(abi.encodePacked(s.baseURI, id.toString()));\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x59ef2fafcf83742310ac25c160903f89baff367af24471a12b1b38179df9b81f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol":{"Bytes32":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122074d468f54841cf6d4ba13a5a34799bb18ccafefbb5e96cdb67d8d14b659e059f64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0xD468F54841CF6D4BA13A5A34799BB18CCAFEFBB5E9 PUSH13 0xDB67D8D14B659E059F64736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"57:1544:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122074d468f54841cf6d4ba13a5a34799bb18ccafefbb5e96cdb67d8d14b659e059f64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0xD468F54841CF6D4BA13A5A34799BB18CCAFEFBB5E9 PUSH13 0xDB67D8D14B659E059F64736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"57:1544:30:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toASCIIString(bytes32)":"infinite","toBase32String(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":\"Bytes32\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122044203285c768a6cfdb15c34d545ebeabb0d1eca8785f7226e13240b8d37a326b64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO KECCAK256 ORIGIN DUP6 0xC7 PUSH9 0xA6CFDB15C34D545EBE 0xAB 0xB0 0xD1 0xEC 0xA8 PUSH25 0x5F7226E13240B8D37A326B64736F6C63430008120033000000 ","sourceMap":"194:9169:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122044203285c768a6cfdb15c34d545ebeabb0d1eca8785f7226e13240b8d37a326b64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO KECCAK256 ORIGIN DUP6 0xC7 PUSH9 0xA6CFDB15C34D545EBE 0xAB 0xB0 0xD1 0xEC 0xA8 PUSH25 0x5F7226E13240B8D37A326B64736F6C63430008120033000000 ","sourceMap":"194:9169:31:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ea3cbd27cf0602e3e923220fe528cc4e8200e77bb21c2de35a06890bd7088fc464736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA EXTCODECOPY 0xBD 0x27 0xCF MOD MUL 0xE3 0xE9 0x23 0x22 0xF 0xE5 0x28 0xCC 0x4E DUP3 STOP 0xE7 PUSH28 0xB21C2DE35A06890BD7088FC464736F6C634300081200330000000000 ","sourceMap":"1420:2685:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ea3cbd27cf0602e3e923220fe528cc4e8200e77bb21c2de35a06890bd7088fc464736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA EXTCODECOPY 0xBD 0x27 0xCF MOD MUL 0xE3 0xE9 0x23 0x22 0xF 0xE5 0x28 0xCC 0x4E DUP3 STOP 0xE7 PUSH28 0xB21C2DE35A06890BD7088FC464736F6C634300081200330000000000 ","sourceMap":"1420:2685:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f309647bf8103ce698bf52bb76c3497fead7d06919b9f69b777e6651857f07a64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x309647BF8103CE698BF52BB76C3497FE 0xAD PUSH30 0x6919B9F69B777E6651857F07A64736F6C63430008120033000000000000 ","sourceMap":"220:2559:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f309647bf8103ce698bf52bb76c3497fead7d06919b9f69b777e6651857f07a64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x309647BF8103CE698BF52BB76C3497FE 0xAD PUSH30 0x6919B9F69B777E6651857F07A64736F6C63430008120033000000000000 ","sourceMap":"220:2559:34:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bb5628773684aef89cfc79db470cdbe579a679654cae57342a2d3cf2049844e264736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB JUMP 0x28 PUSH24 0x3684AEF89CFC79DB470CDBE579A679654CAE57342A2D3CF2 DIV SWAP9 PREVRANDAO 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12582:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bb5628773684aef89cfc79db470cdbe579a679654cae57342a2d3cf2049844e264736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB JUMP 0x28 PUSH24 0x3684AEF89CFC79DB470CDBE579A679654CAE57342A2D3CF2 DIV SWAP9 PREVRANDAO 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12582:35:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220180902dbf67ca73306a34fde98a53759fe734eb0fb323bd6dffcba183062105764736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR MULMOD MUL 0xDB 0xF6 PUSH29 0xA73306A34FDE98A53759FE734EB0FB323BD6DFFCBA183062105764736F PUSH13 0x63430008120033000000000000 ","sourceMap":"215:1047:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220180902dbf67ca73306a34fde98a53759fe734eb0fb323bd6dffcba183062105764736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR MULMOD MUL 0xDB 0xF6 PUSH29 0xA73306A34FDE98A53759FE734EB0FB323BD6DFFCBA183062105764736F PUSH13 0x63430008120033000000000000 ","sourceMap":"215:1047:36:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/DemoNFT.sol":{"DemoNFT":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"baseMetadataURI","type":"string"}],"name":"BaseMetadataURISet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SUPER_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseMetadataURI","outputs":[{"internalType":"string","name":"baseURI","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantAdminRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantMinterRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"baseURI","type":"string"}],"name":"setBaseMetadataURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"metadataURI","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"BaseMetadataURISet(string)":{"params":{"baseMetadataURI":"The new base metadata URI."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"the account granted with the role.","operator":"the initiator of the grant.","role":"the granted role."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"the account losing the role.","operator":"the initiator of the revocation, or identical to `account` for a renouncement.","role":"the revoked or renounced role."}},"TransferBatch(address,address,address,uint256[],uint256[])":{"params":{"from":"The previous tokens owner.","ids":"The transferred tokens identifiers.","operator":"The initiator of the transfer.","to":"The new tokens owner.","values":"The amounts of tokens."}},"TransferSingle(address,address,address,uint256,uint256)":{"params":{"from":"The previous token owner.","id":"The transferred token identifier.","operator":"The initiator of the transfer.","to":"The new token owner.","value":"The amount of token."}},"URI(string,uint256)":{"params":{"id":"The token identifier.","value":"The token metadata URI."}}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"id":"The identifier to retrieve the balance of.","owner":"The account to retrieve the balance of."},"returns":{"balance":"The balance of `id` owned by account `owner`."}},"balanceOfBatch(address[],uint256[])":{"details":"Reverts if `owners` and `ids` have different lengths.","params":{"ids":"The identifiers to retrieve the balance of.","owners":"The addresses of the token holders"},"returns":{"balances":"The balances of `ids` owned by accounts `owners`."}},"baseMetadataURI()":{"returns":{"baseURI":"The base metadata URI."}},"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}},"grantRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"_0":"whether `account` has `role`."}},"isApprovedForAll(address,address)":{"params":{"operator":"Address of the operator.","owner":"Address of the authorisation giver."},"returns":{"approvedForAll":"True if the operator is approved, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"pause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event."},"paused()":{"returns":{"_0":"isPaused The paused state of the contract."}},"renounceRole(bytes32)":{"details":"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current tokens owner.","ids":"Identifiers of the tokens to transfer.","to":"Address of the new tokens owner.","values":"Amounts of tokens to transfer."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current token owner.","id":"Identifier of the token to transfer.","to":"Address of the new token owner.","value":"Amount of token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Emits an {ApprovalForAll} event.","params":{"approved":"True to approve the operator, false to revoke its approval.","operator":"Address of the operator."}},"setBaseMetadataURI(string)":{"details":"Reverts if the sender is not the contract owner.Emits a {BaseMetadataURISet} event.","params":{"baseURI":"The base metadata URI."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"unpause()":{"details":"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event."},"uri(uint256)":{"details":"URIs are defined in RFC 3986.The URI MUST point to a JSON file that conforms to the \"ERC1155 Metadata URI JSON Schema\".The uri function SHOULD be used to retrieve values if no event was emitted.The uri function MUST return the same value as the latest event for an _id if it was emitted.The uri function MUST NOT be used to check for the existence of a token as it is possible for  an implementation to return a valid string even if the token does not exist.","returns":{"metadataURI":"The URI associated to the token."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1185":{"entryPoint":null,"id":1185,"parameterSlots":0,"returnSlots":0},"@_1205":{"entryPoint":null,"id":1205,"parameterSlots":0,"returnSlots":0},"@_1235":{"entryPoint":null,"id":1235,"parameterSlots":0,"returnSlots":0},"@_1259":{"entryPoint":null,"id":1259,"parameterSlots":0,"returnSlots":0},"@_43":{"entryPoint":null,"id":43,"parameterSlots":1,"returnSlots":0},"@_5102":{"entryPoint":null,"id":5102,"parameterSlots":0,"returnSlots":0},"@_856":{"entryPoint":null,"id":856,"parameterSlots":1,"returnSlots":0},"@_msgSender_3691":{"entryPoint":1273,"id":3691,"parameterSlots":0,"returnSlots":1},"@constructorInit_1001":{"entryPoint":1105,"id":1001,"parameterSlots":2,"returnSlots":0},"@constructorInit_575":{"entryPoint":577,"id":575,"parameterSlots":2,"returnSlots":0},"@grantRole_340":{"entryPoint":1346,"id":340,"parameterSlots":4,"returnSlots":0},"@hasRole_433":{"entryPoint":1869,"id":433,"parameterSlots":3,"returnSlots":1},"@initERC1155Burnable_2126":{"entryPoint":957,"id":2126,"parameterSlots":0,"returnSlots":0},"@initERC1155MetadataURI_2075":{"entryPoint":1190,"id":2075,"parameterSlots":0,"returnSlots":0},"@initERC1155Mintable_2092":{"entryPoint":874,"id":2092,"parameterSlots":0,"returnSlots":0},"@init_2058":{"entryPoint":429,"id":2058,"parameterSlots":0,"returnSlots":0},"@layout_1122":{"entryPoint":1040,"id":1122,"parameterSlots":0,"returnSlots":1},"@layout_479":{"entryPoint":1281,"id":479,"parameterSlots":0,"returnSlots":1},"@layout_681":{"entryPoint":512,"id":681,"parameterSlots":0,"returnSlots":1},"@layout_823":{"entryPoint":1554,"id":823,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_777":{"entryPoint":1619,"id":777,"parameterSlots":3,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2171,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":2102,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack":{"entryPoint":2307,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":2188,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2346,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2249,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2033,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2151,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2092,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2119,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1976,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":1986,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300":{"entryPoint":2266,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2645:38","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:38","statements":[{"nodeType":"YulAssignment","src":"62:16:38","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:38"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:38","type":""}],"src":"7:77:38"},{"body":{"nodeType":"YulBlock","src":"118:152:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"135:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"138:77:38","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"128:6:38"},"nodeType":"YulFunctionCall","src":"128:88:38"},"nodeType":"YulExpressionStatement","src":"128:88:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"232:1:38","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:38","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"225:6:38"},"nodeType":"YulFunctionCall","src":"225:15:38"},"nodeType":"YulExpressionStatement","src":"225:15:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"256:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"259:4:38","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"249:6:38"},"nodeType":"YulFunctionCall","src":"249:15:38"},"nodeType":"YulExpressionStatement","src":"249:15:38"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"90:180:38"},{"body":{"nodeType":"YulBlock","src":"321:149:38","statements":[{"nodeType":"YulAssignment","src":"331:25:38","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"354:1:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"336:17:38"},"nodeType":"YulFunctionCall","src":"336:20:38"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"331:1:38"}]},{"nodeType":"YulAssignment","src":"365:25:38","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"388:1:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"370:17:38"},"nodeType":"YulFunctionCall","src":"370:20:38"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"365:1:38"}]},{"nodeType":"YulAssignment","src":"399:17:38","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"411:1:38"},{"name":"y","nodeType":"YulIdentifier","src":"414:1:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"407:3:38"},"nodeType":"YulFunctionCall","src":"407:9:38"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"399:4:38"}]},{"body":{"nodeType":"YulBlock","src":"441:22:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"443:16:38"},"nodeType":"YulFunctionCall","src":"443:18:38"},"nodeType":"YulExpressionStatement","src":"443:18:38"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"432:4:38"},{"name":"x","nodeType":"YulIdentifier","src":"438:1:38"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"429:2:38"},"nodeType":"YulFunctionCall","src":"429:11:38"},"nodeType":"YulIf","src":"426:37:38"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"307:1:38","type":""},{"name":"y","nodeType":"YulTypedName","src":"310:1:38","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"316:4:38","type":""}],"src":"276:194:38"},{"body":{"nodeType":"YulBlock","src":"521:32:38","statements":[{"nodeType":"YulAssignment","src":"531:16:38","value":{"name":"value","nodeType":"YulIdentifier","src":"542:5:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"531:7:38"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"503:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"513:7:38","type":""}],"src":"476:77:38"},{"body":{"nodeType":"YulBlock","src":"624:53:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"641:3:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"664:5:38"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"646:17:38"},"nodeType":"YulFunctionCall","src":"646:24:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"634:6:38"},"nodeType":"YulFunctionCall","src":"634:37:38"},"nodeType":"YulExpressionStatement","src":"634:37:38"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"612:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"619:3:38","type":""}],"src":"559:118:38"},{"body":{"nodeType":"YulBlock","src":"728:81:38","statements":[{"nodeType":"YulAssignment","src":"738:65:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"753:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"760:42:38","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"749:3:38"},"nodeType":"YulFunctionCall","src":"749:54:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"738:7:38"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"710:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"720:7:38","type":""}],"src":"683:126:38"},{"body":{"nodeType":"YulBlock","src":"860:51:38","statements":[{"nodeType":"YulAssignment","src":"870:35:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"899:5:38"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"881:17:38"},"nodeType":"YulFunctionCall","src":"881:24:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"870:7:38"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"842:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"852:7:38","type":""}],"src":"815:96:38"},{"body":{"nodeType":"YulBlock","src":"982:53:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"999:3:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:38"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1004:17:38"},"nodeType":"YulFunctionCall","src":"1004:24:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"992:6:38"},"nodeType":"YulFunctionCall","src":"992:37:38"},"nodeType":"YulExpressionStatement","src":"992:37:38"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"970:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"977:3:38","type":""}],"src":"917:118:38"},{"body":{"nodeType":"YulBlock","src":"1195:288:38","statements":[{"nodeType":"YulAssignment","src":"1205:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1217:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"1228:2:38","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1213:3:38"},"nodeType":"YulFunctionCall","src":"1213:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1205:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1285:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1298:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"1309:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1294:3:38"},"nodeType":"YulFunctionCall","src":"1294:17:38"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"1241:43:38"},"nodeType":"YulFunctionCall","src":"1241:71:38"},"nodeType":"YulExpressionStatement","src":"1241:71:38"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1366:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1379:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"1390:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1375:3:38"},"nodeType":"YulFunctionCall","src":"1375:18:38"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"1322:43:38"},"nodeType":"YulFunctionCall","src":"1322:72:38"},"nodeType":"YulExpressionStatement","src":"1322:72:38"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1448:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1461:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"1472:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1457:3:38"},"nodeType":"YulFunctionCall","src":"1457:18:38"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"1404:43:38"},"nodeType":"YulFunctionCall","src":"1404:72:38"},"nodeType":"YulExpressionStatement","src":"1404:72:38"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1151:9:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1163:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1171:6:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1179:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1190:4:38","type":""}],"src":"1041:442:38"},{"body":{"nodeType":"YulBlock","src":"1585:73:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1602:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"1607:6:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1595:6:38"},"nodeType":"YulFunctionCall","src":"1595:19:38"},"nodeType":"YulExpressionStatement","src":"1595:19:38"},{"nodeType":"YulAssignment","src":"1623:29:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1642:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"1647:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1638:3:38"},"nodeType":"YulFunctionCall","src":"1638:14:38"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1623:11:38"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1557:3:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"1562:6:38","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1573:11:38","type":""}],"src":"1489:169:38"},{"body":{"nodeType":"YulBlock","src":"1770:75:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1792:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"1800:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1788:3:38"},"nodeType":"YulFunctionCall","src":"1788:14:38"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"1804:33:38","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1781:6:38"},"nodeType":"YulFunctionCall","src":"1781:57:38"},"nodeType":"YulExpressionStatement","src":"1781:57:38"}]},"name":"store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1762:6:38","type":""}],"src":"1664:181:38"},{"body":{"nodeType":"YulBlock","src":"1997:220:38","statements":[{"nodeType":"YulAssignment","src":"2007:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2073:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"2078:2:38","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2014:58:38"},"nodeType":"YulFunctionCall","src":"2014:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2007:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2179:3:38"}],"functionName":{"name":"store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","nodeType":"YulIdentifier","src":"2090:88:38"},"nodeType":"YulFunctionCall","src":"2090:93:38"},"nodeType":"YulExpressionStatement","src":"2090:93:38"},{"nodeType":"YulAssignment","src":"2192:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2203:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"2208:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2199:3:38"},"nodeType":"YulFunctionCall","src":"2199:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2192:3:38"}]}]},"name":"abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1985:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1993:3:38","type":""}],"src":"1851:366:38"},{"body":{"nodeType":"YulBlock","src":"2394:248:38","statements":[{"nodeType":"YulAssignment","src":"2404:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2416:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"2427:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2412:3:38"},"nodeType":"YulFunctionCall","src":"2412:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2404:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2451:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"2462:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2447:3:38"},"nodeType":"YulFunctionCall","src":"2447:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2470:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"2476:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2466:3:38"},"nodeType":"YulFunctionCall","src":"2466:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2440:6:38"},"nodeType":"YulFunctionCall","src":"2440:47:38"},"nodeType":"YulExpressionStatement","src":"2440:47:38"},{"nodeType":"YulAssignment","src":"2496:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2630:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2504:124:38"},"nodeType":"YulFunctionCall","src":"2504:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2496:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2374:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2389:4:38","type":""}],"src":"2223:419:38"}]},"contents":"{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300(memPtr) {\n\n        mstore(add(memPtr, 0), \"InterfaceDetection: wrong value\")\n\n    }\n\n    function abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":38,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506000336200002a620001ad60201b62000d6b1760201c565b6200005881620000446200020060201b62000daa1760201c565b6200024160201b62000de91790919060201c565b506200006e6200036a60201b62000efd1760201c565b62000083620003bd60201b62000f3c1760201c565b620000b1816200009d6200041060201b62000f7b1760201c565b6200045160201b62000fba1790919060201c565b50620000c7620004a660201b6200100e1760201c565b620001377f73757065725f61646d696e000000000000000000000000000000000000000000620000fc620004f960201b60201c565b6200010c620004f960201b60201c565b620001216200050160201b6200104d1760201c565b6200054260201b6200108c17909392919060201c565b620001a77f61646d696e0000000000000000000000000000000000000000000000000000006200016c620004f960201b60201c565b6200017c620004f960201b60201c565b620001916200050160201b6200104d1760201c565b6200054260201b6200108c17909392919060201c565b6200094c565b620001fe7fd9b67a26000000000000000000000000000000000000000000000000000000006001620001e96200061260201b620011521760201c565b6200065360201b62001191179092919060201c565b565b60008060017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd60001c620002359190620007f1565b60001b90508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200031557808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b620003667f7f5828d0000000000000000000000000000000000000000000000000000000006001620003516200061260201b620011521760201c565b6200065360201b62001191179092919060201c565b5050565b620003bb7f5190c92c000000000000000000000000000000000000000000000000000000006001620003a66200061260201b620011521760201c565b6200065360201b62001191179092919060201c565b565b6200040e7f921ed8d1000000000000000000000000000000000000000000000000000000006001620003f96200061260201b620011521760201c565b6200065360201b62001191179092919060201c565b565b60008060017f0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f60001c620004459190620007f1565b60001b90508091505090565b8015620004a25760018260000160006101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a15b5050565b620004f77f0e89341c000000000000000000000000000000000000000000000000000000006001620004e26200061260201b620011521760201c565b6200065360201b62001191179092919060201c565b565b600033905090565b60008060017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b2360001c620005369190620007f1565b60001b90508091505090565b6200055e8383866200074d60201b62001288179092919060201c565b6200060c57600184600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d83838360405162000603939291906200088c565b60405180910390a15b50505050565b60008060017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e60001c620006479190620007f1565b60001b90508091505090565b63ffffffff60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603620006dd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006d4906200092a565b60405180910390fd5b80836000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600083600001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620007fe82620007b8565b91506200080b83620007b8565b9250828203905081811115620008265762000825620007c2565b5b92915050565b6000819050919050565b62000841816200082c565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008748262000847565b9050919050565b620008868162000867565b82525050565b6000606082019050620008a3600083018662000836565b620008b260208301856200087b565b620008c160408301846200087b565b949350505050565b600082825260208201905092915050565b7f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500600082015250565b600062000912601f83620008c9565b91506200091f82620008da565b602082019050919050565b60006020820190508181036000830152620009458162000903565b9050919050565b614edb806200095c6000396000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c806375b238fc116100f9578063a22cb46511610097578063d547741f11610071578063d547741f146104b4578063e985e9c5146104d0578063f242432a14610500578063f2fde38b1461051c576101c3565b8063a22cb4651461045e578063c634b78e1461047a578063d539139314610496576101c3565b80638456cb59116100d35780638456cb59146103ea5780638bb9c5bf146103f45780638da5cb5b1461041057806391d148541461042e576101c3565b806375b238fc146103945780637e518ec8146103b257806380534934146103ce576101c3565b80633dd1eb61116101665780634e1273f4116101405780634e1273f41461030c5780635b2bd79e1461033c5780635c975abb1461035a5780635cfa929714610378576101c3565b80633dd1eb61146102c85780633f4ba83a146102e45780634460bdd6146102ee576101c3565b80630e89341c116101a25780630e89341c14610244578063124d91e5146102745780632eb2c2d6146102905780632f2ff15d146102ac576101c3565b8062fdd58e146101c857806301ffc9a7146101f85780630d6a5bbb14610228575b600080fd5b6101e260048036038101906101dd9190613509565b610538565b6040516101ef9190613558565b60405180910390f35b610212600480360381019061020d91906135cb565b61055e565b60405161021f9190613613565b60405180910390f35b610242600480360381019061023d91906136e9565b610581565b005b61025e600480360381019061025991906137b2565b6106bb565b60405161026b919061386f565b60405180910390f35b61028e60048036038101906102899190613891565b6106de565b005b6102aa60048036038101906102a591906138e4565b61070a565b005b6102c660048036038101906102c191906139f6565b610745565b005b6102e260048036038101906102dd9190613a36565b61078e565b005b6102ec61085e565b005b6102f6610891565b6040516103039190613a72565b60405180910390f35b61032660048036038101906103219190613ae3565b6108b5565b6040516103339190613c22565b60405180910390f35b6103446108e1565b604051610351919061386f565b60405180910390f35b6103626108f8565b60405161036f9190613613565b60405180910390f35b610392600480360381019061038d9190613c44565b61090f565b005b61039c6109d5565b6040516103a99190613a72565b60405180910390f35b6103cc60048036038101906103c79190613d22565b6109f9565b005b6103e860048036038101906103e39190613d6f565b610a3a565b005b6103f2610a6c565b005b61040e60048036038101906104099190613e04565b610a9f565b005b610418610ac5565b6040516104259190613e40565b60405180910390f35b610448600480360381019061044391906139f6565b610adc565b6040516104559190613613565b60405180910390f35b61047860048036038101906104739190613e87565b610b02565b005b610494600480360381019061048f9190613a36565b610b2b565b005b61049e610bfb565b6040516104ab9190613a72565b60405180910390f35b6104ce60048036038101906104c991906139f6565b610c1f565b005b6104ea60048036038101906104e59190613ec7565b610c68565b6040516104f79190613613565b60405180910390f35b61051a60048036038101906105159190613f07565b610c8e565b005b61053660048036038101906105319190613a36565b610cc3565b005b600061055683836105476112f3565b6113329092919063ffffffff16565b905092915050565b600061057a8261056c611152565b6113fe90919063ffffffff16565b9050919050565b600061058b61152d565b90506105c97f6d696e7465720000000000000000000000000000000000000000000000000000826105ba61104d565b6115359092919063ffffffff16565b6106b18189898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061069f6112f3565b6115b79095949392919063ffffffff16565b5050505050505050565b60606106d7826106c9611781565b6117c090919063ffffffff16565b9050919050565b6107056106e961152d565b8484846106f46112f3565b6117f790949392919063ffffffff16565b505050565b61073b61071561152d565b89898989898989896107256112f3565b6118d3909998979695949392919063ffffffff16565b5050505050505050565b600061074f61152d565b905061076b8161075d610daa565b611bb690919063ffffffff16565b61078983838361077961104d565b61108c909392919063ffffffff16565b505050565b600061079861152d565b90506107dd7f61646d696e0000000000000000000000000000000000000000000000000000006107c661152d565b6107ce61104d565b6112889092919063ffffffff16565b61081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081390613fed565b60405180910390fd5b61085a7f6d696e7465720000000000000000000000000000000000000000000000000000838361084a61104d565b61108c909392919063ffffffff16565b5050565b61087f61086961152d565b610871610daa565b611bb690919063ffffffff16565b61088f61088a610f7b565b611c4c565b565b7f73757065725f61646d696e00000000000000000000000000000000000000000081565b60606108d7858585856108c66112f3565b611ca190949392919063ffffffff16565b9050949350505050565b60606108f36108ee611781565b611dd2565b905090565b600061090a610905610f7b565b611e68565b905090565b61091f61091a610f7b565b611e83565b600061092961152d565b90506109677f6d696e74657200000000000000000000000000000000000000000000000000008261095861104d565b6115359092919063ffffffff16565b6109cd8187878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506109bb6112f3565b611ed89095949392919063ffffffff16565b505050505050565b7f61646d696e00000000000000000000000000000000000000000000000000000081565b610a1a610a0461152d565b610a0c610daa565b611bb690919063ffffffff16565b610a368282610a27611781565b61200e9092919063ffffffff16565b5050565b610a65610a4561152d565b8686868686610a526112f3565b612060909695949392919063ffffffff16565b5050505050565b610a8d610a7761152d565b610a7f610daa565b611bb690919063ffffffff16565b610a9d610a98610f7b565b6121d8565b565b610ac2610aaa61152d565b82610ab361104d565b61222d9092919063ffffffff16565b50565b6000610ad7610ad2610daa565b6122ed565b905090565b6000610afa8383610aeb61104d565b6112889092919063ffffffff16565b905092915050565b610b27610b0d61152d565b8383610b176112f3565b61231b909392919063ffffffff16565b5050565b6000610b3561152d565b9050610b7a7f73757065725f61646d696e000000000000000000000000000000000000000000610b6361152d565b610b6b61104d565b6112889092919063ffffffff16565b610bb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb090614059565b60405180910390fd5b610bf77f61646d696e0000000000000000000000000000000000000000000000000000008383610be761104d565b61108c909392919063ffffffff16565b5050565b7f6d696e746572000000000000000000000000000000000000000000000000000081565b6000610c2961152d565b9050610c4581610c37610daa565b611bb690919063ffffffff16565b610c63838383610c5361104d565b61248a909392919063ffffffff16565b505050565b6000610c868383610c776112f3565b6125519092919063ffffffff16565b905092915050565b610cbb610c9961152d565b878787878787610ca76112f3565b6125e890979695949392919063ffffffff16565b505050505050565b610d067f73757065725f61646d696e000000000000000000000000000000000000000000610cef61152d565b610cf761104d565b6112889092919063ffffffff16565b610d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3c90614059565b60405180910390fd5b610d68610d5061152d565b82610d59610daa565b6127ad9092919063ffffffff16565b50565b610da87fd9b67a26000000000000000000000000000000000000000000000000000000006001610d99611152565b6111919092919063ffffffff16565b565b60008060017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd60001c610ddd91906140a8565b60001b90508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ebc57808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b610ef97f7f5828d0000000000000000000000000000000000000000000000000000000006001610eea611152565b6111919092919063ffffffff16565b5050565b610f3a7f5190c92c000000000000000000000000000000000000000000000000000000006001610f2b611152565b6111919092919063ffffffff16565b565b610f797f921ed8d1000000000000000000000000000000000000000000000000000000006001610f6a611152565b6111919092919063ffffffff16565b565b60008060017f0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f60001c610fae91906140a8565b60001b90508091505090565b801561100a5760018260000160006101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a15b5050565b61104b7f0e89341c00000000000000000000000000000000000000000000000000000000600161103c611152565b6111919092919063ffffffff16565b565b60008060017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b2360001c61108091906140a8565b60001b90508091505090565b6110a18383866112889092919063ffffffff16565b61114c57600184600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d838383604051611143939291906140dc565b60405180910390a15b50505050565b60008060017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e60001c61118591906140a8565b60001b90508091505090565b63ffffffff60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120f9061415f565b60405180910390fd5b80836000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600083600001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b60008060017f5ccf5846fa27a68fafc8e588671a68f5e67c2f9b56af4263806a4d71735e861360001c61132691906140a8565b60001b90508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611399906141cb565b60405180910390fd5b83600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b600063ffffffff60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036114555760009050611527565b7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036114c35760019050611527565b826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff1690505b92915050565b600033905090565b61154a8282856112889092919063ffffffff16565b6115b2576115578261291b565b60405160200161156791906142bf565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a9919061386f565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d90614338565b60405180910390fd5b6000835190508251811461166f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611666906143a4565b60405180910390fd5b60005b8181146116c4576116b98887878481518110611691576116906143c4565b5b60200260200101518785815181106116ac576116ab6143c4565b5b6020026020010151612a9c565b806001019050611672565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161173c9291906143f3565b60405180910390a46117638573ffffffffffffffffffffffffffffffffffffffff16612ba4565b156117785761177786600087878787612bc7565b5b50505050505050565b60008060017fe94434e3c6b941c5d90218142fadcc69cb2e13723993540bfa1c131dd1d3475a60001c6117b491906140a8565b60001b90508091505090565b6060826000016117cf83612cd9565b6040516020016117e0929190614522565b604051602081830303815290604052905092915050565b611802858486612da7565b611841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183890614592565b60405180910390fd5b61184d85848484612e74565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516118c49291906145b2565b60405180910390a45050505050565b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603611942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193990614627565b60405180910390fd5b600086869050905084849050811461198f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611986906143a4565b60405180910390fd5b61199a8b8a8c612da7565b6119d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d090614592565b60405180910390fd5b60005b818114611a2d57611a228c8b8b8b8b868181106119fc576119fb6143c4565b5b905060200201358a8a87818110611a1657611a156143c4565b5b90506020020135612f7c565b8060010190506119dc565b508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8a8a8a8a604051611aa894939291906146b1565b60405180910390a4611acf8873ffffffffffffffffffffffffffffffffffffffff16612ba4565b15611ba957611ba88a8a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612bc7565b5b5050505050505050505050565b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3f90614738565b60405180910390fd5b5050565b611c55816131b2565b60008160000160006101000a81548160ff0219169083151502179055507fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693360405160405180910390a150565b60606000858590509050838390508114611cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce7906143a4565b60405180910390fd5b8585905067ffffffffffffffff811115611d0d57611d0c614758565b5b604051908082528060200260200182016040528015611d3b5781602001602082028036833780820191505090505b50915060005b818114611dc757611d9d878783818110611d5e57611d5d6143c4565b5b9050602002016020810190611d739190613a36565b868684818110611d8657611d856143c4565b5b905060200201358a6113329092919063ffffffff16565b838281518110611db057611daf6143c4565b5b602002602001018181525050806001019050611d41565b505095945050505050565b6060816000018054611de390614459565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0f90614459565b8015611e5c5780601f10611e3157610100808354040283529160200191611e5c565b820191906000526020600020905b815481529060010190602001808311611e3f57829003601f168201915b50505050509050919050565b60008160000160009054906101000a900460ff169050919050565b8060000160009054906101000a900460ff1615611ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecc906147d3565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611f47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3e90614338565b60405180910390fd5b611f5386858585612a9c565b8373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051611fca9291906145b2565b60405180910390a4611ff18473ffffffffffffffffffffffffffffffffffffffff16612ba4565b156120065761200585600086868686613206565b5b505050505050565b8181846000019182612021929190614995565b507f04b1dc5c136a3ce9fded8db0ce3d3366c58764ec3a8e4c2b9e52e4ddfe5ebbf78282604051612053929190614aa1565b60405180910390a1505050565b60008484905090508282905081146120ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a4906143a4565b60405180910390fd5b6120b8888789612da7565b6120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90614592565b60405180910390fd5b60005b81811461214a5761213f8988888885818110612119576121186143c4565b5b90506020020135878786818110612133576121326143c4565b5b90506020020135612e74565b8060010190506120fa565b50600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb888888886040516121c694939291906146b1565b60405180910390a45050505050505050565b6121e181611e83565b60018160000160006101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a150565b6122428183856115359092919063ffffffff16565b600083600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8183846040516122e0939291906140dc565b60405180910390a1505050565b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238090614b11565b60405180910390fd5b808460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161247c9190613613565b60405180910390a350505050565b61249f8383866112889092919063ffffffff16565b1561254b57600084600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b838383604051612542939291906140dc565b60405180910390a15b50505050565b60008360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264e90614627565b60405180910390fd5b612662888789612da7565b6126a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269890614592565b60405180910390fd5b6126ae8887878787612f7c565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516127249291906145b2565b60405180910390a461274b8573ffffffffffffffffffffffffffffffffffffffff16612ba4565b156127a3576127a2878787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613206565b5b5050505050505050565b60008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283b90614738565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461291557818460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b50505050565b60606000801b820361293e57604051806020016040528060008152509050612a97565b6000826040516020016129519190614b52565b60405160208183030381529060405290506000601f90505b6001156129c657600060f81b828281518110612988576129876143c4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036129c65780600190039050612969565b60006001820167ffffffffffffffff8111156129e5576129e4614758565b5b6040519080825280601f01601f191660200182016040528015612a175781602001600182028036833780820191505090505b50905060005b828111612a8f57838181518110612a3757612a366143c4565b5b602001015160f81c60f81b828281518110612a5557612a546143c4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806001019050612a1d565b508093505050505b919050565b60008114612b9e57600084600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008282019050818111612b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3b90614bb9565b60405180910390fd5b8086600001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663bc197c8188888787876040518663ffffffff1660e01b8152600401612c2f959493929190614c2e565b6020604051808303816000875af1158015612c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c729190614cab565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc890614d24565b60405180910390fd5b505050505050565b606060006001612ce884613318565b01905060008167ffffffffffffffff811115612d0757612d06614758565b5b6040519080825280601f01601f191660200182016040528015612d395781602001600182028036833780820191505090505b509050600082602001820190505b600115612d9c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612d9057612d8f614d44565b5b04945060008503612d47575b819350505050919050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612e6b57508360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b90509392505050565b60008114612f7657600084600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008282039050818110612f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1390614dbf565b60405180910390fd5b8086600001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505b50505050565b600081146131ab57600085600001600084815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008282039050818110613024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301b90614dbf565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146131a857600087600001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600084820190508181116130f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ee90614bb9565b60405180910390fd5b8289600001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508089600001600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505b50505b5050505050565b8060000160009054906101000a900460ff16613203576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131fa90614e2b565b60405180910390fd5b50565b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663f23a6e6188888787876040518663ffffffff1660e01b815260040161326e959493929190614e4b565b6020604051808303816000875af115801561328d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b19190614cab565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161330790614d24565b60405180910390fd5b505050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613376577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161336c5761336b614d44565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106133b3576d04ee2d6d415b85acef810000000083816133a9576133a8614d44565b5b0492506020810190505b662386f26fc1000083106133e257662386f26fc1000083816133d8576133d7614d44565b5b0492506010810190505b6305f5e100831061340b576305f5e100838161340157613400614d44565b5b0492506008810190505b612710831061343057612710838161342657613425614d44565b5b0492506004810190505b60648310613453576064838161344957613448614d44565b5b0492506002810190505b600a8310613462576001810190505b80915050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134a082613475565b9050919050565b6134b081613495565b81146134bb57600080fd5b50565b6000813590506134cd816134a7565b92915050565b6000819050919050565b6134e6816134d3565b81146134f157600080fd5b50565b600081359050613503816134dd565b92915050565b600080604083850312156135205761351f61346b565b5b600061352e858286016134be565b925050602061353f858286016134f4565b9150509250929050565b613552816134d3565b82525050565b600060208201905061356d6000830184613549565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6135a881613573565b81146135b357600080fd5b50565b6000813590506135c58161359f565b92915050565b6000602082840312156135e1576135e061346b565b5b60006135ef848285016135b6565b91505092915050565b60008115159050919050565b61360d816135f8565b82525050565b60006020820190506136286000830184613604565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126136535761365261362e565b5b8235905067ffffffffffffffff8111156136705761366f613633565b5b60208301915083602082028301111561368c5761368b613638565b5b9250929050565b60008083601f8401126136a9576136a861362e565b5b8235905067ffffffffffffffff8111156136c6576136c5613633565b5b6020830191508360018202830111156136e2576136e1613638565b5b9250929050565b60008060008060008060006080888a0312156137085761370761346b565b5b60006137168a828b016134be565b975050602088013567ffffffffffffffff81111561373757613736613470565b5b6137438a828b0161363d565b9650965050604088013567ffffffffffffffff81111561376657613765613470565b5b6137728a828b0161363d565b9450945050606088013567ffffffffffffffff81111561379557613794613470565b5b6137a18a828b01613693565b925092505092959891949750929550565b6000602082840312156137c8576137c761346b565b5b60006137d6848285016134f4565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156138195780820151818401526020810190506137fe565b60008484015250505050565b6000601f19601f8301169050919050565b6000613841826137df565b61384b81856137ea565b935061385b8185602086016137fb565b61386481613825565b840191505092915050565b600060208201905081810360008301526138898184613836565b905092915050565b6000806000606084860312156138aa576138a961346b565b5b60006138b8868287016134be565b93505060206138c9868287016134f4565b92505060406138da868287016134f4565b9150509250925092565b60008060008060008060008060a0898b0312156139045761390361346b565b5b60006139128b828c016134be565b98505060206139238b828c016134be565b975050604089013567ffffffffffffffff81111561394457613943613470565b5b6139508b828c0161363d565b9650965050606089013567ffffffffffffffff81111561397357613972613470565b5b61397f8b828c0161363d565b9450945050608089013567ffffffffffffffff8111156139a2576139a1613470565b5b6139ae8b828c01613693565b92509250509295985092959890939650565b6000819050919050565b6139d3816139c0565b81146139de57600080fd5b50565b6000813590506139f0816139ca565b92915050565b60008060408385031215613a0d57613a0c61346b565b5b6000613a1b858286016139e1565b9250506020613a2c858286016134be565b9150509250929050565b600060208284031215613a4c57613a4b61346b565b5b6000613a5a848285016134be565b91505092915050565b613a6c816139c0565b82525050565b6000602082019050613a876000830184613a63565b92915050565b60008083601f840112613aa357613aa261362e565b5b8235905067ffffffffffffffff811115613ac057613abf613633565b5b602083019150836020820283011115613adc57613adb613638565b5b9250929050565b60008060008060408587031215613afd57613afc61346b565b5b600085013567ffffffffffffffff811115613b1b57613b1a613470565b5b613b2787828801613a8d565b9450945050602085013567ffffffffffffffff811115613b4a57613b49613470565b5b613b568782880161363d565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613b99816134d3565b82525050565b6000613bab8383613b90565b60208301905092915050565b6000602082019050919050565b6000613bcf82613b64565b613bd98185613b6f565b9350613be483613b80565b8060005b83811015613c15578151613bfc8882613b9f565b9750613c0783613bb7565b925050600181019050613be8565b5085935050505092915050565b60006020820190508181036000830152613c3c8184613bc4565b905092915050565b600080600080600060808688031215613c6057613c5f61346b565b5b6000613c6e888289016134be565b9550506020613c7f888289016134f4565b9450506040613c90888289016134f4565b935050606086013567ffffffffffffffff811115613cb157613cb0613470565b5b613cbd88828901613693565b92509250509295509295909350565b60008083601f840112613ce257613ce161362e565b5b8235905067ffffffffffffffff811115613cff57613cfe613633565b5b602083019150836001820283011115613d1b57613d1a613638565b5b9250929050565b60008060208385031215613d3957613d3861346b565b5b600083013567ffffffffffffffff811115613d5757613d56613470565b5b613d6385828601613ccc565b92509250509250929050565b600080600080600060608688031215613d8b57613d8a61346b565b5b6000613d99888289016134be565b955050602086013567ffffffffffffffff811115613dba57613db9613470565b5b613dc68882890161363d565b9450945050604086013567ffffffffffffffff811115613de957613de8613470565b5b613df58882890161363d565b92509250509295509295909350565b600060208284031215613e1a57613e1961346b565b5b6000613e28848285016139e1565b91505092915050565b613e3a81613495565b82525050565b6000602082019050613e556000830184613e31565b92915050565b613e64816135f8565b8114613e6f57600080fd5b50565b600081359050613e8181613e5b565b92915050565b60008060408385031215613e9e57613e9d61346b565b5b6000613eac858286016134be565b9250506020613ebd85828601613e72565b9150509250929050565b60008060408385031215613ede57613edd61346b565b5b6000613eec858286016134be565b9250506020613efd858286016134be565b9150509250929050565b60008060008060008060a08789031215613f2457613f2361346b565b5b6000613f3289828a016134be565b9650506020613f4389828a016134be565b9550506040613f5489828a016134f4565b9450506060613f6589828a016134f4565b935050608087013567ffffffffffffffff811115613f8657613f85613470565b5b613f9289828a01613693565b92509250509295509295509295565b7f4f524e463a206e6f742061646d696e0000000000000000000000000000000000600082015250565b6000613fd7600f836137ea565b9150613fe282613fa1565b602082019050919050565b6000602082019050818103600083015261400681613fca565b9050919050565b7f4f524e463a206e6f742073757065722061646d696e0000000000000000000000600082015250565b60006140436015836137ea565b915061404e8261400d565b602082019050919050565b6000602082019050818103600083015261407281614036565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006140b3826134d3565b91506140be836134d3565b92508282039050818111156140d6576140d5614079565b5b92915050565b60006060820190506140f16000830186613a63565b6140fe6020830185613e31565b61410b6040830184613e31565b949350505050565b7f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500600082015250565b6000614149601f836137ea565b915061415482614113565b602082019050919050565b600060208201905081810360008301526141788161413c565b9050919050565b7f455243313135353a2062616c616e6365206f6620616464726573732830290000600082015250565b60006141b5601e836137ea565b91506141c08261417f565b602082019050919050565b600060208201905081810360008301526141e4816141a8565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206d697373696e6720270000000000000000600082015250565b600061422c6018836141eb565b9150614237826141f6565b601882019050919050565b600061424d826137df565b61425781856141eb565b93506142678185602086016137fb565b80840191505092915050565b7f2720726f6c650000000000000000000000000000000000000000000000000000600082015250565b60006142a96006836141eb565b91506142b482614273565b600682019050919050565b60006142ca8261421f565b91506142d68284614242565b91506142e18261429c565b915081905092915050565b7f455243313135353a206d696e7420746f20616464726573732830290000000000600082015250565b6000614322601b836137ea565b915061432d826142ec565b602082019050919050565b6000602082019050818103600083015261435181614315565b9050919050565b7f455243313135353a20696e636f6e73697374656e742061727261797300000000600082015250565b600061438e601c836137ea565b915061439982614358565b602082019050919050565b600060208201905081810360008301526143bd81614381565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050818103600083015261440d8185613bc4565b905081810360208301526144218184613bc4565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061447157607f821691505b6020821081036144845761448361442a565b5b50919050565b60008190508160005260206000209050919050565b600081546144ac81614459565b6144b681866141eb565b945060018216600081146144d157600181146144e657614519565b60ff1983168652811515820286019350614519565b6144ef8561448a565b60005b83811015614511578154818901526001820191506020810190506144f2565b838801955050505b50505092915050565b600061452e828561449f565b915061453a8284614242565b91508190509392505050565b7f455243313135353a206e6f6e2d617070726f7665642073656e64657200000000600082015250565b600061457c601c836137ea565b915061458782614546565b602082019050919050565b600060208201905081810360008301526145ab8161456f565b9050919050565b60006040820190506145c76000830185613549565b6145d46020830184613549565b9392505050565b7f455243313135353a207472616e7366657220746f206164647265737328302900600082015250565b6000614611601f836137ea565b915061461c826145db565b602082019050919050565b6000602082019050818103600083015261464081614604565b9050919050565b600080fd5b82818337505050565b60006146618385613b6f565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561469457614693614647565b5b6020830292506146a583858461464c565b82840190509392505050565b600060408201905081810360008301526146cc818688614655565b905081810360208301526146e1818486614655565b905095945050505050565b7f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000600082015250565b60006147226018836137ea565b915061472d826146ec565b602082019050919050565b6000602082019050818103600083015261475181614715565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f50617573653a2070617573656400000000000000000000000000000000000000600082015250565b60006147bd600d836137ea565b91506147c882614787565b602082019050919050565b600060208201905081810360008301526147ec816147b0565b9050919050565b600082905092915050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261484b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261480e565b614855868361480e565b95508019841693508086168417925050509392505050565b6000819050919050565b600061489261488d614888846134d3565b61486d565b6134d3565b9050919050565b6000819050919050565b6148ac83614877565b6148c06148b882614899565b84845461481b565b825550505050565b600090565b6148d56148c8565b6148e08184846148a3565b505050565b5b81811015614904576148f96000826148cd565b6001810190506148e6565b5050565b601f8211156149495761491a8161448a565b614923846147fe565b81016020851015614932578190505b61494661493e856147fe565b8301826148e5565b50505b505050565b600082821c905092915050565b600061496c6000198460080261494e565b1980831691505092915050565b6000614985838361495b565b9150826002028217905092915050565b61499f83836147f3565b67ffffffffffffffff8111156149b8576149b7614758565b5b6149c28254614459565b6149cd828285614908565b6000601f8311600181146149fc57600084156149ea578287013590505b6149f48582614979565b865550614a5c565b601f198416614a0a8661448a565b60005b82811015614a3257848901358255600182019150602085019450602081019050614a0d565b86831015614a4f5784890135614a4b601f89168261495b565b8355505b6001600288020188555050505b50505050505050565b82818337600083830152505050565b6000614a8083856137ea565b9350614a8d838584614a65565b614a9683613825565b840190509392505050565b60006020820190508181036000830152614abc818486614a74565b90509392505050565b7f455243313135353a2073656c662d617070726f76616c20666f7220616c6c0000600082015250565b6000614afb601e836137ea565b9150614b0682614ac5565b602082019050919050565b60006020820190508181036000830152614b2a81614aee565b9050919050565b6000819050919050565b614b4c614b47826139c0565b614b31565b82525050565b6000614b5e8284614b3b565b60208201915081905092915050565b7f455243313135353a2062616c616e6365206f766572666c6f7700000000000000600082015250565b6000614ba36019836137ea565b9150614bae82614b6d565b602082019050919050565b60006020820190508181036000830152614bd281614b96565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614c0082614bd9565b614c0a8185614be4565b9350614c1a8185602086016137fb565b614c2381613825565b840191505092915050565b600060a082019050614c436000830188613e31565b614c506020830187613e31565b8181036040830152614c628186613bc4565b90508181036060830152614c768185613bc4565b90508181036080830152614c8a8184614bf5565b90509695505050505050565b600081519050614ca58161359f565b92915050565b600060208284031215614cc157614cc061346b565b5b6000614ccf84828501614c96565b91505092915050565b7f455243313135353a207472616e736665722072656a6563746564000000000000600082015250565b6000614d0e601a836137ea565b9150614d1982614cd8565b602082019050919050565b60006020820190508181036000830152614d3d81614d01565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f455243313135353a20696e73756666696369656e742062616c616e6365000000600082015250565b6000614da9601d836137ea565b9150614db482614d73565b602082019050919050565b60006020820190508181036000830152614dd881614d9c565b9050919050565b7f50617573653a206e6f7420706175736564000000000000000000000000000000600082015250565b6000614e156011836137ea565b9150614e2082614ddf565b602082019050919050565b60006020820190508181036000830152614e4481614e08565b9050919050565b600060a082019050614e606000830188613e31565b614e6d6020830187613e31565b614e7a6040830186613549565b614e876060830185613549565b8181036080830152614e998184614bf5565b9050969550505050505056fea2646970667358221220b0e63b1882236726543f30c62a83fcebc8f9c556a7d5751ab1bd161b87f37b8464736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 CALLER PUSH3 0x2A PUSH3 0x1AD PUSH1 0x20 SHL PUSH3 0xD6B OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x58 DUP2 PUSH3 0x44 PUSH3 0x200 PUSH1 0x20 SHL PUSH3 0xDAA OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x241 PUSH1 0x20 SHL PUSH3 0xDE9 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x6E PUSH3 0x36A PUSH1 0x20 SHL PUSH3 0xEFD OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x83 PUSH3 0x3BD PUSH1 0x20 SHL PUSH3 0xF3C OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xB1 DUP2 PUSH3 0x9D PUSH3 0x410 PUSH1 0x20 SHL PUSH3 0xF7B OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x451 PUSH1 0x20 SHL PUSH3 0xFBA OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0xC7 PUSH3 0x4A6 PUSH1 0x20 SHL PUSH3 0x100E OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x137 PUSH32 0x73757065725F61646D696E000000000000000000000000000000000000000000 PUSH3 0xFC PUSH3 0x4F9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x10C PUSH3 0x4F9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x121 PUSH3 0x501 PUSH1 0x20 SHL PUSH3 0x104D OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x542 PUSH1 0x20 SHL PUSH3 0x108C OR SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1A7 PUSH32 0x61646D696E000000000000000000000000000000000000000000000000000000 PUSH3 0x16C PUSH3 0x4F9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x17C PUSH3 0x4F9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x191 PUSH3 0x501 PUSH1 0x20 SHL PUSH3 0x104D OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x542 PUSH1 0x20 SHL PUSH3 0x108C OR SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x94C JUMP JUMPDEST PUSH3 0x1FE PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH3 0x1E9 PUSH3 0x612 PUSH1 0x20 SHL PUSH3 0x1152 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x653 PUSH1 0x20 SHL PUSH3 0x1191 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH1 0x0 SHR PUSH3 0x235 SWAP2 SWAP1 PUSH3 0x7F1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x315 JUMPI DUP1 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST PUSH3 0x366 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH3 0x351 PUSH3 0x612 PUSH1 0x20 SHL PUSH3 0x1152 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x653 PUSH1 0x20 SHL PUSH3 0x1191 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x3BB PUSH32 0x5190C92C00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH3 0x3A6 PUSH3 0x612 PUSH1 0x20 SHL PUSH3 0x1152 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x653 PUSH1 0x20 SHL PUSH3 0x1191 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST JUMP JUMPDEST PUSH3 0x40E PUSH32 0x921ED8D100000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH3 0x3F9 PUSH3 0x612 PUSH1 0x20 SHL PUSH3 0x1152 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x653 PUSH1 0x20 SHL PUSH3 0x1191 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0x186A05F63B1553398AD5EA3233C0CE68B8C9EECC47717F123C5C2B42FBD6D9F PUSH1 0x0 SHR PUSH3 0x445 SWAP2 SWAP1 PUSH3 0x7F1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH3 0x4A2 JUMPI PUSH1 0x1 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x4F7 PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH3 0x4E2 PUSH3 0x612 PUSH1 0x20 SHL PUSH3 0x1152 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x653 PUSH1 0x20 SHL PUSH3 0x1191 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH1 0x0 SHR PUSH3 0x536 SWAP2 SWAP1 PUSH3 0x7F1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH3 0x55E DUP4 DUP4 DUP7 PUSH3 0x74D PUSH1 0x20 SHL PUSH3 0x1288 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x60C JUMPI PUSH1 0x1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH3 0x603 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x88C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH1 0x0 SHR PUSH3 0x647 SWAP2 SWAP1 PUSH3 0x7F1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SUB PUSH3 0x6DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x6D4 SWAP1 PUSH3 0x92A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x7FE DUP3 PUSH3 0x7B8 JUMP JUMPDEST SWAP2 POP PUSH3 0x80B DUP4 PUSH3 0x7B8 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH3 0x826 JUMPI PUSH3 0x825 PUSH3 0x7C2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x841 DUP2 PUSH3 0x82C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x874 DUP3 PUSH3 0x847 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x886 DUP2 PUSH3 0x867 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x8A3 PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x836 JUMP JUMPDEST PUSH3 0x8B2 PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x87B JUMP JUMPDEST PUSH3 0x8C1 PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x87B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x912 PUSH1 0x1F DUP4 PUSH3 0x8C9 JUMP JUMPDEST SWAP2 POP PUSH3 0x91F DUP3 PUSH3 0x8DA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x945 DUP2 PUSH3 0x903 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4EDB DUP1 PUSH3 0x95C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4D0 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x500 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x51C JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x45E JUMPI DUP1 PUSH4 0xC634B78E EQ PUSH2 0x47A JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x496 JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0x8456CB59 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x42E JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0x75B238FC EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x7E518EC8 EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x80534934 EQ PUSH2 0x3CE JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0x3DD1EB61 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x5B2BD79E EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0x5CFA9297 EQ PUSH2 0x378 JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0x3DD1EB61 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x4460BDD6 EQ PUSH2 0x2EE JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0x124D91E5 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2AC JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xD6A5BBB EQ PUSH2 0x228 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0x3509 JUMP JUMPDEST PUSH2 0x538 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0x3558 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x212 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20D SWAP2 SWAP1 PUSH2 0x35CB JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21F SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x242 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23D SWAP2 SWAP1 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x581 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x259 SWAP2 SWAP1 PUSH2 0x37B2 JUMP JUMPDEST PUSH2 0x6BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26B SWAP2 SWAP1 PUSH2 0x386F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x289 SWAP2 SWAP1 PUSH2 0x3891 JUMP JUMPDEST PUSH2 0x6DE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x38E4 JUMP JUMPDEST PUSH2 0x70A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x39F6 JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DD SWAP2 SWAP1 PUSH2 0x3A36 JUMP JUMPDEST PUSH2 0x78E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2EC PUSH2 0x85E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F6 PUSH2 0x891 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x303 SWAP2 SWAP1 PUSH2 0x3A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x326 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x3AE3 JUMP JUMPDEST PUSH2 0x8B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x333 SWAP2 SWAP1 PUSH2 0x3C22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x344 PUSH2 0x8E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x351 SWAP2 SWAP1 PUSH2 0x386F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x362 PUSH2 0x8F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x392 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x3C44 JUMP JUMPDEST PUSH2 0x90F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x39C PUSH2 0x9D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A9 SWAP2 SWAP1 PUSH2 0x3A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C7 SWAP2 SWAP1 PUSH2 0x3D22 JUMP JUMPDEST PUSH2 0x9F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3E3 SWAP2 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0xA3A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F2 PUSH2 0xA6C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x40E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x409 SWAP2 SWAP1 PUSH2 0x3E04 JUMP JUMPDEST PUSH2 0xA9F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x418 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x3E40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x448 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x443 SWAP2 SWAP1 PUSH2 0x39F6 JUMP JUMPDEST PUSH2 0xADC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x455 SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x478 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x473 SWAP2 SWAP1 PUSH2 0x3E87 JUMP JUMPDEST PUSH2 0xB02 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x494 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x48F SWAP2 SWAP1 PUSH2 0x3A36 JUMP JUMPDEST PUSH2 0xB2B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x49E PUSH2 0xBFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4AB SWAP2 SWAP1 PUSH2 0x3A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x39F6 JUMP JUMPDEST PUSH2 0xC1F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4EA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4E5 SWAP2 SWAP1 PUSH2 0x3EC7 JUMP JUMPDEST PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F7 SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x51A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x515 SWAP2 SWAP1 PUSH2 0x3F07 JUMP JUMPDEST PUSH2 0xC8E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x531 SWAP2 SWAP1 PUSH2 0x3A36 JUMP JUMPDEST PUSH2 0xCC3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x556 DUP4 DUP4 PUSH2 0x547 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x1332 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57A DUP3 PUSH2 0x56C PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x13FE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0x5C9 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP3 PUSH2 0x5BA PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1535 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x6B1 DUP2 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x69F PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x15B7 SWAP1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6D7 DUP3 PUSH2 0x6C9 PUSH2 0x1781 JUMP JUMPDEST PUSH2 0x17C0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x705 PUSH2 0x6E9 PUSH2 0x152D JUMP JUMPDEST DUP5 DUP5 DUP5 PUSH2 0x6F4 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x17F7 SWAP1 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x73B PUSH2 0x715 PUSH2 0x152D JUMP JUMPDEST DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x725 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x18D3 SWAP1 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74F PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0x76B DUP2 PUSH2 0x75D PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x789 DUP4 DUP4 DUP4 PUSH2 0x779 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x108C SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x798 PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0x7DD PUSH32 0x61646D696E000000000000000000000000000000000000000000000000000000 PUSH2 0x7C6 PUSH2 0x152D JUMP JUMPDEST PUSH2 0x7CE PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x81C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x813 SWAP1 PUSH2 0x3FED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x85A PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP4 DUP4 PUSH2 0x84A PUSH2 0x104D JUMP JUMPDEST PUSH2 0x108C SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x87F PUSH2 0x869 PUSH2 0x152D JUMP JUMPDEST PUSH2 0x871 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x88F PUSH2 0x88A PUSH2 0xF7B JUMP JUMPDEST PUSH2 0x1C4C JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x73757065725F61646D696E000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x8D7 DUP6 DUP6 DUP6 DUP6 PUSH2 0x8C6 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x1CA1 SWAP1 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x8F3 PUSH2 0x8EE PUSH2 0x1781 JUMP JUMPDEST PUSH2 0x1DD2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90A PUSH2 0x905 PUSH2 0xF7B JUMP JUMPDEST PUSH2 0x1E68 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x91F PUSH2 0x91A PUSH2 0xF7B JUMP JUMPDEST PUSH2 0x1E83 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x929 PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0x967 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP3 PUSH2 0x958 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1535 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9CD DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x9BB PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x1ED8 SWAP1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x61646D696E000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0xA1A PUSH2 0xA04 PUSH2 0x152D JUMP JUMPDEST PUSH2 0xA0C PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xA36 DUP3 DUP3 PUSH2 0xA27 PUSH2 0x1781 JUMP JUMPDEST PUSH2 0x200E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA65 PUSH2 0xA45 PUSH2 0x152D JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0xA52 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x2060 SWAP1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA8D PUSH2 0xA77 PUSH2 0x152D JUMP JUMPDEST PUSH2 0xA7F PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xA9D PUSH2 0xA98 PUSH2 0xF7B JUMP JUMPDEST PUSH2 0x21D8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xAC2 PUSH2 0xAAA PUSH2 0x152D JUMP JUMPDEST DUP3 PUSH2 0xAB3 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x222D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD7 PUSH2 0xAD2 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x22ED JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAFA DUP4 DUP4 PUSH2 0xAEB PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB27 PUSH2 0xB0D PUSH2 0x152D JUMP JUMPDEST DUP4 DUP4 PUSH2 0xB17 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x231B SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB35 PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0xB7A PUSH32 0x73757065725F61646D696E000000000000000000000000000000000000000000 PUSH2 0xB63 PUSH2 0x152D JUMP JUMPDEST PUSH2 0xB6B PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xBB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB0 SWAP1 PUSH2 0x4059 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBF7 PUSH32 0x61646D696E000000000000000000000000000000000000000000000000000000 DUP4 DUP4 PUSH2 0xBE7 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x108C SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC29 PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0xC45 DUP2 PUSH2 0xC37 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC63 DUP4 DUP4 DUP4 PUSH2 0xC53 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x248A SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC86 DUP4 DUP4 PUSH2 0xC77 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x2551 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCBB PUSH2 0xC99 PUSH2 0x152D JUMP JUMPDEST DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xCA7 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x25E8 SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD06 PUSH32 0x73757065725F61646D696E000000000000000000000000000000000000000000 PUSH2 0xCEF PUSH2 0x152D JUMP JUMPDEST PUSH2 0xCF7 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xD45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD3C SWAP1 PUSH2 0x4059 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD68 PUSH2 0xD50 PUSH2 0x152D JUMP JUMPDEST DUP3 PUSH2 0xD59 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x27AD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xDA8 PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xD99 PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH1 0x0 SHR PUSH2 0xDDD SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEBC JUMPI DUP1 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST PUSH2 0xEF9 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xEEA PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xF3A PUSH32 0x5190C92C00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xF2B PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF79 PUSH32 0x921ED8D100000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xF6A PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0x186A05F63B1553398AD5EA3233C0CE68B8C9EECC47717F123C5C2B42FBD6D9F PUSH1 0x0 SHR PUSH2 0xFAE SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x100A JUMPI PUSH1 0x1 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x104B PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x103C PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH1 0x0 SHR PUSH2 0x1080 SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x10A1 DUP4 DUP4 DUP7 PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x114C JUMPI PUSH1 0x1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1143 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH1 0x0 SHR PUSH2 0x1185 SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SUB PUSH2 0x1218 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120F SWAP1 PUSH2 0x415F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0x5CCF5846FA27A68FAFC8E588671A68F5E67C2F9B56AF4263806A4D71735E8613 PUSH1 0x0 SHR PUSH2 0x1326 SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1399 SWAP1 PUSH2 0x41CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SUB PUSH2 0x1455 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1527 JUMP JUMPDEST PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SUB PUSH2 0x14C3 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1527 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x154A DUP3 DUP3 DUP6 PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x15B2 JUMPI PUSH2 0x1557 DUP3 PUSH2 0x291B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1567 SWAP2 SWAP1 PUSH2 0x42BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15A9 SWAP2 SWAP1 PUSH2 0x386F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1626 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x161D SWAP1 PUSH2 0x4338 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD SWAP1 POP DUP3 MLOAD DUP2 EQ PUSH2 0x166F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1666 SWAP1 PUSH2 0x43A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x16C4 JUMPI PUSH2 0x16B9 DUP9 DUP8 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1691 JUMPI PUSH2 0x1690 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x16AC JUMPI PUSH2 0x16AB PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2A9C JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1672 JUMP JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x173C SWAP3 SWAP2 SWAP1 PUSH2 0x43F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1763 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BA4 JUMP JUMPDEST ISZERO PUSH2 0x1778 JUMPI PUSH2 0x1777 DUP7 PUSH1 0x0 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2BC7 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xE94434E3C6B941C5D90218142FADCC69CB2E13723993540BFA1C131DD1D3475A PUSH1 0x0 SHR PUSH2 0x17B4 SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH1 0x0 ADD PUSH2 0x17CF DUP4 PUSH2 0x2CD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17E0 SWAP3 SWAP2 SWAP1 PUSH2 0x4522 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1802 DUP6 DUP5 DUP7 PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x1841 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1838 SWAP1 PUSH2 0x4592 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x184D DUP6 DUP5 DUP5 DUP5 PUSH2 0x2E74 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x18C4 SWAP3 SWAP2 SWAP1 PUSH2 0x45B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1942 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1939 SWAP1 PUSH2 0x4627 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP7 SWAP1 POP SWAP1 POP DUP5 DUP5 SWAP1 POP DUP2 EQ PUSH2 0x198F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1986 SWAP1 PUSH2 0x43A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x199A DUP12 DUP11 DUP13 PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x19D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19D0 SWAP1 PUSH2 0x4592 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A2D JUMPI PUSH2 0x1A22 DUP13 DUP12 DUP12 DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x19FC JUMPI PUSH2 0x19FB PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP11 DUP11 DUP8 DUP2 DUP2 LT PUSH2 0x1A16 JUMPI PUSH2 0x1A15 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x2F7C JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x19DC JUMP JUMPDEST POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0x1AA8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x46B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1ACF DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BA4 JUMP JUMPDEST ISZERO PUSH2 0x1BA9 JUMPI PUSH2 0x1BA8 DUP11 DUP11 DUP11 DUP11 DUP11 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x2BC7 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C3F SWAP1 PUSH2 0x4738 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1C55 DUP2 PUSH2 0x31B2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xA45F47FDEA8A1EFDD9029A5691C7F759C32B7C698632B563573E155625D16933 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 DUP6 SWAP1 POP SWAP1 POP DUP4 DUP4 SWAP1 POP DUP2 EQ PUSH2 0x1CF0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CE7 SWAP1 PUSH2 0x43A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 DUP6 SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D0D JUMPI PUSH2 0x1D0C PUSH2 0x4758 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D3B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1DC7 JUMPI PUSH2 0x1D9D DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x1D5E JUMPI PUSH2 0x1D5D PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1D73 SWAP2 SWAP1 PUSH2 0x3A36 JUMP JUMPDEST DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1D86 JUMPI PUSH2 0x1D85 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP11 PUSH2 0x1332 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DB0 JUMPI PUSH2 0x1DAF PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1D41 JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1DE3 SWAP1 PUSH2 0x4459 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E0F SWAP1 PUSH2 0x4459 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E5C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E31 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1E5C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E3F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1ED5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ECC SWAP1 PUSH2 0x47D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1F47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3E SWAP1 PUSH2 0x4338 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F53 DUP7 DUP6 DUP6 DUP6 PUSH2 0x2A9C JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1FCA SWAP3 SWAP2 SWAP1 PUSH2 0x45B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1FF1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BA4 JUMP JUMPDEST ISZERO PUSH2 0x2006 JUMPI PUSH2 0x2005 DUP6 PUSH1 0x0 DUP7 DUP7 DUP7 DUP7 PUSH2 0x3206 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 DUP5 PUSH1 0x0 ADD SWAP2 DUP3 PUSH2 0x2021 SWAP3 SWAP2 SWAP1 PUSH2 0x4995 JUMP JUMPDEST POP PUSH32 0x4B1DC5C136A3CE9FDED8DB0CE3D3366C58764EC3A8E4C2B9E52E4DDFE5EBBF7 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2053 SWAP3 SWAP2 SWAP1 PUSH2 0x4AA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 SWAP1 POP SWAP1 POP DUP3 DUP3 SWAP1 POP DUP2 EQ PUSH2 0x20AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20A4 SWAP1 PUSH2 0x43A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20B8 DUP9 DUP8 DUP10 PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x20F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20EE SWAP1 PUSH2 0x4592 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x214A JUMPI PUSH2 0x213F DUP10 DUP9 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x2119 JUMPI PUSH2 0x2118 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x2133 JUMPI PUSH2 0x2132 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x2E74 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x20FA JUMP JUMPDEST POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x21C6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x46B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x21E1 DUP2 PUSH2 0x1E83 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x2242 DUP2 DUP4 DUP6 PUSH2 0x1535 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B DUP2 DUP4 DUP5 PUSH1 0x40 MLOAD PUSH2 0x22E0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2389 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2380 SWAP1 PUSH2 0x4B11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x247C SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x249F DUP4 DUP4 DUP7 PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x254B JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x2542 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2657 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x264E SWAP1 PUSH2 0x4627 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2662 DUP9 DUP8 DUP10 PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x26A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2698 SWAP1 PUSH2 0x4592 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x26AE DUP9 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2F7C JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2724 SWAP3 SWAP2 SWAP1 PUSH2 0x45B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x274B DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BA4 JUMP JUMPDEST ISZERO PUSH2 0x27A3 JUMPI PUSH2 0x27A2 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x3206 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2844 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x283B SWAP1 PUSH2 0x4738 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2915 JUMPI DUP2 DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SHL DUP3 SUB PUSH2 0x293E JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH2 0x2A97 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2951 SWAP2 SWAP1 PUSH2 0x4B52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 PUSH1 0x1F SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x29C6 JUMPI PUSH1 0x0 PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2988 JUMPI PUSH2 0x2987 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SUB PUSH2 0x29C6 JUMPI DUP1 PUSH1 0x1 SWAP1 SUB SWAP1 POP PUSH2 0x2969 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29E5 JUMPI PUSH2 0x29E4 PUSH2 0x4758 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A17 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 GT PUSH2 0x2A8F JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2A37 JUMPI PUSH2 0x2A36 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A55 JUMPI PUSH2 0x2A54 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x2A1D JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x2B9E JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP3 DUP3 ADD SWAP1 POP DUP2 DUP2 GT PUSH2 0x2B44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B3B SWAP1 PUSH2 0x4BB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC197C81 DUP9 DUP9 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C2F SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4C2E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C4E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C72 SWAP2 SWAP1 PUSH2 0x4CAB JUMP JUMPDEST PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2CD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CC8 SWAP1 PUSH2 0x4D24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x2CE8 DUP5 PUSH2 0x3318 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D07 JUMPI PUSH2 0x2D06 PUSH2 0x4758 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D39 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2D9C JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2D90 JUMPI PUSH2 0x2D8F PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2D47 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2E6B JUMPI POP DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x2F76 JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 LT PUSH2 0x2F1C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F13 SWAP1 PUSH2 0x4DBF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x31AB JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 LT PUSH2 0x3024 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x301B SWAP1 PUSH2 0x4DBF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x31A8 JUMPI PUSH1 0x0 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP3 ADD SWAP1 POP DUP2 DUP2 GT PUSH2 0x30F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30EE SWAP1 PUSH2 0x4BB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP10 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP10 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMPDEST POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3203 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31FA SWAP1 PUSH2 0x4E2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF23A6E61 DUP9 DUP9 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x326E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4E4B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x328D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32B1 SWAP2 SWAP1 PUSH2 0x4CAB JUMP JUMPDEST PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x3310 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3307 SWAP1 PUSH2 0x4D24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x3376 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x336C JUMPI PUSH2 0x336B PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x33B3 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x33A9 JUMPI PUSH2 0x33A8 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x33E2 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x33D8 JUMPI PUSH2 0x33D7 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x340B JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x3401 JUMPI PUSH2 0x3400 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x3430 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x3426 JUMPI PUSH2 0x3425 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x3453 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x3449 JUMPI PUSH2 0x3448 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x3462 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34A0 DUP3 PUSH2 0x3475 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34B0 DUP2 PUSH2 0x3495 JUMP JUMPDEST DUP2 EQ PUSH2 0x34BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x34CD DUP2 PUSH2 0x34A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34E6 DUP2 PUSH2 0x34D3 JUMP JUMPDEST DUP2 EQ PUSH2 0x34F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3503 DUP2 PUSH2 0x34DD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3520 JUMPI PUSH2 0x351F PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x352E DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x353F DUP6 DUP3 DUP7 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3552 DUP2 PUSH2 0x34D3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x356D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3549 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35A8 DUP2 PUSH2 0x3573 JUMP JUMPDEST DUP2 EQ PUSH2 0x35B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x35C5 DUP2 PUSH2 0x359F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x35E1 JUMPI PUSH2 0x35E0 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35EF DUP5 DUP3 DUP6 ADD PUSH2 0x35B6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x360D DUP2 PUSH2 0x35F8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3628 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3604 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3653 JUMPI PUSH2 0x3652 PUSH2 0x362E JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3670 JUMPI PUSH2 0x366F PUSH2 0x3633 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x368C JUMPI PUSH2 0x368B PUSH2 0x3638 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x36A9 JUMPI PUSH2 0x36A8 PUSH2 0x362E JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x36C6 JUMPI PUSH2 0x36C5 PUSH2 0x3633 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x36E2 JUMPI PUSH2 0x36E1 PUSH2 0x3638 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3708 JUMPI PUSH2 0x3707 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3716 DUP11 DUP3 DUP12 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3737 JUMPI PUSH2 0x3736 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3743 DUP11 DUP3 DUP12 ADD PUSH2 0x363D JUMP JUMPDEST SWAP7 POP SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3766 JUMPI PUSH2 0x3765 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3772 DUP11 DUP3 DUP12 ADD PUSH2 0x363D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3795 JUMPI PUSH2 0x3794 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x37A1 DUP11 DUP3 DUP12 ADD PUSH2 0x3693 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C8 JUMPI PUSH2 0x37C7 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37D6 DUP5 DUP3 DUP6 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3819 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x37FE JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3841 DUP3 PUSH2 0x37DF JUMP JUMPDEST PUSH2 0x384B DUP2 DUP6 PUSH2 0x37EA JUMP JUMPDEST SWAP4 POP PUSH2 0x385B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37FB JUMP JUMPDEST PUSH2 0x3864 DUP2 PUSH2 0x3825 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3889 DUP2 DUP5 PUSH2 0x3836 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x38AA JUMPI PUSH2 0x38A9 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38B8 DUP7 DUP3 DUP8 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x38C9 DUP7 DUP3 DUP8 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x38DA DUP7 DUP3 DUP8 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3904 JUMPI PUSH2 0x3903 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3912 DUP12 DUP3 DUP13 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x3923 DUP12 DUP3 DUP13 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3944 JUMPI PUSH2 0x3943 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3950 DUP12 DUP3 DUP13 ADD PUSH2 0x363D JUMP JUMPDEST SWAP7 POP SWAP7 POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3973 JUMPI PUSH2 0x3972 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x397F DUP12 DUP3 DUP13 ADD PUSH2 0x363D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39A2 JUMPI PUSH2 0x39A1 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x39AE DUP12 DUP3 DUP13 ADD PUSH2 0x3693 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x39D3 DUP2 PUSH2 0x39C0 JUMP JUMPDEST DUP2 EQ PUSH2 0x39DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x39F0 DUP2 PUSH2 0x39CA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A0D JUMPI PUSH2 0x3A0C PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A1B DUP6 DUP3 DUP7 ADD PUSH2 0x39E1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3A2C DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A4C JUMPI PUSH2 0x3A4B PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A5A DUP5 DUP3 DUP6 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3A6C DUP2 PUSH2 0x39C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3A87 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3A63 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3AA3 JUMPI PUSH2 0x3AA2 PUSH2 0x362E JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AC0 JUMPI PUSH2 0x3ABF PUSH2 0x3633 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3ADC JUMPI PUSH2 0x3ADB PUSH2 0x3638 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3AFD JUMPI PUSH2 0x3AFC PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B1B JUMPI PUSH2 0x3B1A PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3B27 DUP8 DUP3 DUP9 ADD PUSH2 0x3A8D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B4A JUMPI PUSH2 0x3B49 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3B56 DUP8 DUP3 DUP9 ADD PUSH2 0x363D JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3B99 DUP2 PUSH2 0x34D3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BAB DUP4 DUP4 PUSH2 0x3B90 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BCF DUP3 PUSH2 0x3B64 JUMP JUMPDEST PUSH2 0x3BD9 DUP2 DUP6 PUSH2 0x3B6F JUMP JUMPDEST SWAP4 POP PUSH2 0x3BE4 DUP4 PUSH2 0x3B80 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C15 JUMPI DUP2 MLOAD PUSH2 0x3BFC DUP9 DUP3 PUSH2 0x3B9F JUMP JUMPDEST SWAP8 POP PUSH2 0x3C07 DUP4 PUSH2 0x3BB7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3BE8 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C3C DUP2 DUP5 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3C60 JUMPI PUSH2 0x3C5F PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3C6E DUP9 DUP3 DUP10 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x3C7F DUP9 DUP3 DUP10 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x3C90 DUP9 DUP3 DUP10 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CB1 JUMPI PUSH2 0x3CB0 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3CBD DUP9 DUP3 DUP10 ADD PUSH2 0x3693 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3CE2 JUMPI PUSH2 0x3CE1 PUSH2 0x362E JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CFF JUMPI PUSH2 0x3CFE PUSH2 0x3633 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3D1B JUMPI PUSH2 0x3D1A PUSH2 0x3638 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D39 JUMPI PUSH2 0x3D38 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D57 JUMPI PUSH2 0x3D56 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3D63 DUP6 DUP3 DUP7 ADD PUSH2 0x3CCC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3D8B JUMPI PUSH2 0x3D8A PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D99 DUP9 DUP3 DUP10 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DBA JUMPI PUSH2 0x3DB9 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3DC6 DUP9 DUP3 DUP10 ADD PUSH2 0x363D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DE9 JUMPI PUSH2 0x3DE8 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3DF5 DUP9 DUP3 DUP10 ADD PUSH2 0x363D JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E1A JUMPI PUSH2 0x3E19 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E28 DUP5 DUP3 DUP6 ADD PUSH2 0x39E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E3A DUP2 PUSH2 0x3495 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3E55 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3E31 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E64 DUP2 PUSH2 0x35F8 JUMP JUMPDEST DUP2 EQ PUSH2 0x3E6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3E81 DUP2 PUSH2 0x3E5B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E9E JUMPI PUSH2 0x3E9D PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3EAC DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3EBD DUP6 DUP3 DUP7 ADD PUSH2 0x3E72 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3EDE JUMPI PUSH2 0x3EDD PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3EEC DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3EFD DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3F24 JUMPI PUSH2 0x3F23 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F32 DUP10 DUP3 DUP11 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3F43 DUP10 DUP3 DUP11 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x3F54 DUP10 DUP3 DUP11 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x3F65 DUP10 DUP3 DUP11 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F86 JUMPI PUSH2 0x3F85 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3F92 DUP10 DUP3 DUP11 ADD PUSH2 0x3693 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH32 0x4F524E463A206E6F742061646D696E0000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FD7 PUSH1 0xF DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3FE2 DUP3 PUSH2 0x3FA1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4006 DUP2 PUSH2 0x3FCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F524E463A206E6F742073757065722061646D696E0000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4043 PUSH1 0x15 DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x404E DUP3 PUSH2 0x400D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4072 DUP2 PUSH2 0x4036 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x40B3 DUP3 PUSH2 0x34D3 JUMP JUMPDEST SWAP2 POP PUSH2 0x40BE DUP4 PUSH2 0x34D3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x40D6 JUMPI PUSH2 0x40D5 PUSH2 0x4079 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x40F1 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3A63 JUMP JUMPDEST PUSH2 0x40FE PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3E31 JUMP JUMPDEST PUSH2 0x410B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3E31 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4149 PUSH1 0x1F DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4154 DUP3 PUSH2 0x4113 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4178 DUP2 PUSH2 0x413C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243313135353A2062616C616E6365206F6620616464726573732830290000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41B5 PUSH1 0x1E DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x41C0 DUP3 PUSH2 0x417F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x41E4 DUP2 PUSH2 0x41A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206D697373696E6720270000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x422C PUSH1 0x18 DUP4 PUSH2 0x41EB JUMP JUMPDEST SWAP2 POP PUSH2 0x4237 DUP3 PUSH2 0x41F6 JUMP JUMPDEST PUSH1 0x18 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x424D DUP3 PUSH2 0x37DF JUMP JUMPDEST PUSH2 0x4257 DUP2 DUP6 PUSH2 0x41EB JUMP JUMPDEST SWAP4 POP PUSH2 0x4267 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37FB JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x2720726F6C650000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A9 PUSH1 0x6 DUP4 PUSH2 0x41EB JUMP JUMPDEST SWAP2 POP PUSH2 0x42B4 DUP3 PUSH2 0x4273 JUMP JUMPDEST PUSH1 0x6 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42CA DUP3 PUSH2 0x421F JUMP JUMPDEST SWAP2 POP PUSH2 0x42D6 DUP3 DUP5 PUSH2 0x4242 JUMP JUMPDEST SWAP2 POP PUSH2 0x42E1 DUP3 PUSH2 0x429C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243313135353A206D696E7420746F20616464726573732830290000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4322 PUSH1 0x1B DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x432D DUP3 PUSH2 0x42EC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4351 DUP2 PUSH2 0x4315 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243313135353A20696E636F6E73697374656E742061727261797300000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x438E PUSH1 0x1C DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4399 DUP3 PUSH2 0x4358 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x43BD DUP2 PUSH2 0x4381 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x440D DUP2 DUP6 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4421 DUP2 DUP5 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x4471 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x4484 JUMPI PUSH2 0x4483 PUSH2 0x442A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x44AC DUP2 PUSH2 0x4459 JUMP JUMPDEST PUSH2 0x44B6 DUP2 DUP7 PUSH2 0x41EB JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x44D1 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x44E6 JUMPI PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 ISZERO ISZERO DUP3 MUL DUP7 ADD SWAP4 POP PUSH2 0x4519 JUMP JUMPDEST PUSH2 0x44EF DUP6 PUSH2 0x448A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4511 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x44F2 JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x452E DUP3 DUP6 PUSH2 0x449F JUMP JUMPDEST SWAP2 POP PUSH2 0x453A DUP3 DUP5 PUSH2 0x4242 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x455243313135353A206E6F6E2D617070726F7665642073656E64657200000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x457C PUSH1 0x1C DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4587 DUP3 PUSH2 0x4546 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x45AB DUP2 PUSH2 0x456F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x45C7 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3549 JUMP JUMPDEST PUSH2 0x45D4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3549 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x455243313135353A207472616E7366657220746F206164647265737328302900 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4611 PUSH1 0x1F DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x461C DUP3 PUSH2 0x45DB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4640 DUP2 PUSH2 0x4604 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4661 DUP4 DUP6 PUSH2 0x3B6F JUMP JUMPDEST SWAP4 POP PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x4694 JUMPI PUSH2 0x4693 PUSH2 0x4647 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 MUL SWAP3 POP PUSH2 0x46A5 DUP4 DUP6 DUP5 PUSH2 0x464C JUMP JUMPDEST DUP3 DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x46CC DUP2 DUP7 DUP9 PUSH2 0x4655 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x46E1 DUP2 DUP5 DUP7 PUSH2 0x4655 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4722 PUSH1 0x18 DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x472D DUP3 PUSH2 0x46EC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4751 DUP2 PUSH2 0x4715 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x50617573653A2070617573656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47BD PUSH1 0xD DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x47C8 DUP3 PUSH2 0x4787 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x47EC DUP2 PUSH2 0x47B0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x484B PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x480E JUMP JUMPDEST PUSH2 0x4855 DUP7 DUP4 PUSH2 0x480E JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4892 PUSH2 0x488D PUSH2 0x4888 DUP5 PUSH2 0x34D3 JUMP JUMPDEST PUSH2 0x486D JUMP JUMPDEST PUSH2 0x34D3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x48AC DUP4 PUSH2 0x4877 JUMP JUMPDEST PUSH2 0x48C0 PUSH2 0x48B8 DUP3 PUSH2 0x4899 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x481B JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x48D5 PUSH2 0x48C8 JUMP JUMPDEST PUSH2 0x48E0 DUP2 DUP5 DUP5 PUSH2 0x48A3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4904 JUMPI PUSH2 0x48F9 PUSH1 0x0 DUP3 PUSH2 0x48CD JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x48E6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x4949 JUMPI PUSH2 0x491A DUP2 PUSH2 0x448A JUMP JUMPDEST PUSH2 0x4923 DUP5 PUSH2 0x47FE JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x4932 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x4946 PUSH2 0x493E DUP6 PUSH2 0x47FE JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x48E5 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x496C PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x494E JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4985 DUP4 DUP4 PUSH2 0x495B JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x499F DUP4 DUP4 PUSH2 0x47F3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x49B8 JUMPI PUSH2 0x49B7 PUSH2 0x4758 JUMP JUMPDEST JUMPDEST PUSH2 0x49C2 DUP3 SLOAD PUSH2 0x4459 JUMP JUMPDEST PUSH2 0x49CD DUP3 DUP3 DUP6 PUSH2 0x4908 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x49FC JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x49EA JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x49F4 DUP6 DUP3 PUSH2 0x4979 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x4A5C JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x4A0A DUP7 PUSH2 0x448A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4A32 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4A0D JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x4A4F JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x4A4B PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x495B JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A80 DUP4 DUP6 PUSH2 0x37EA JUMP JUMPDEST SWAP4 POP PUSH2 0x4A8D DUP4 DUP6 DUP5 PUSH2 0x4A65 JUMP JUMPDEST PUSH2 0x4A96 DUP4 PUSH2 0x3825 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4ABC DUP2 DUP5 DUP7 PUSH2 0x4A74 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x455243313135353A2073656C662D617070726F76616C20666F7220616C6C0000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AFB PUSH1 0x1E DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4B06 DUP3 PUSH2 0x4AC5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B2A DUP2 PUSH2 0x4AEE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4B4C PUSH2 0x4B47 DUP3 PUSH2 0x39C0 JUMP JUMPDEST PUSH2 0x4B31 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B5E DUP3 DUP5 PUSH2 0x4B3B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243313135353A2062616C616E6365206F766572666C6F7700000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BA3 PUSH1 0x19 DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4BAE DUP3 PUSH2 0x4B6D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4BD2 DUP2 PUSH2 0x4B96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C00 DUP3 PUSH2 0x4BD9 JUMP JUMPDEST PUSH2 0x4C0A DUP2 DUP6 PUSH2 0x4BE4 JUMP JUMPDEST SWAP4 POP PUSH2 0x4C1A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37FB JUMP JUMPDEST PUSH2 0x4C23 DUP2 PUSH2 0x3825 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x4C43 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3E31 JUMP JUMPDEST PUSH2 0x4C50 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3E31 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4C62 DUP2 DUP7 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4C76 DUP2 DUP6 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4C8A DUP2 DUP5 PUSH2 0x4BF5 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4CA5 DUP2 PUSH2 0x359F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CC1 JUMPI PUSH2 0x4CC0 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4CCF DUP5 DUP3 DUP6 ADD PUSH2 0x4C96 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243313135353A207472616E736665722072656A6563746564000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D0E PUSH1 0x1A DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4D19 DUP3 PUSH2 0x4CD8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4D3D DUP2 PUSH2 0x4D01 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA9 PUSH1 0x1D DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4DB4 DUP3 PUSH2 0x4D73 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4DD8 DUP2 PUSH2 0x4D9C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x50617573653A206E6F7420706175736564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E15 PUSH1 0x11 DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4E20 DUP3 PUSH2 0x4DDF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4E44 DUP2 PUSH2 0x4E08 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x4E60 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3E31 JUMP JUMPDEST PUSH2 0x4E6D PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3E31 JUMP JUMPDEST PUSH2 0x4E7A PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x3549 JUMP JUMPDEST PUSH2 0x4E87 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x3549 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4E99 DUP2 DUP5 PUSH2 0x4BF5 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 0xE6 EXTCODESIZE XOR DUP3 0x23 PUSH8 0x26543F30C62A83FC 0xEB 0xC8 0xF9 0xC5 JUMP 0xA7 0xD5 PUSH22 0x1AB1BD161B87F37B8464736F6C634300081200330000 ","sourceMap":"1202:2318:37:-:0;;;1678:340;;;;;;;;;;1698:5;1723:10;582:21:14;:19;;;;;:21;;:::i;:::-;1007:63:1;1057:12;1007:33;:31;;;;;:33;;:::i;:::-;:49;;;;;;:63;;;;:::i;:::-;963:114;630:36:17;:34;;;;;:36;;:::i;:::-;551::15;:34;;;;;:36;;:::i;:::-;706:47:10;744:8;706:21;:19;;;;;:21;;:::i;:::-;:37;;;;;;:47;;;;:::i;:::-;669:91;1051:39:16;:37;;;;;:39;;:::i;:::-;1745:131:37::2;1798:16;1828:12;:10;;;:12;;:::i;:::-;1854;:10;;;:12;;:::i;:::-;1745:29;:27;;;;;:29;;:::i;:::-;:39;;;;;;:131;;;;;;:::i;:::-;1886:125;1939:10;1963:12;:10;;;:12;;:::i;:::-;1989;:10;;;:12;;:::i;:::-;1886:29;:27;;;;;:29;;:::i;:::-;:39;;;;;;:125;;;;;;:::i;:::-;1202:2318:::0;;1905:132:28;1940:90;1997:26;2025:4;1940:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:90;;;;;:::i;:::-;1905:132::o;3707:174:6:-;3748:16;3776;671:1;609:58;601:67;;:71;;;;:::i;:::-;593:80;;3776:38;;3857:8;3847:18;;3833:42;3707:174;:::o;1332:341::-;1444:1;1420:26;;:12;:26;;;1416:152;;1480:12;1462:1;:15;;;:30;;;;;;;;;;;;;;;;;;1544:12;1511:46;;1540:1;1511:46;;;;;;;;;;;;1416:152;1577:89;1634:25;1661:4;1577:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:89;;;;;:::i;:::-;1332:341;;:::o;2387:155:28:-;2437:98;2494:34;2530:4;2437:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:98;;;;;:::i;:::-;2387:155::o;2892:::-;2942:98;2999:34;3035:4;2942:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:98;;;;;:::i;:::-;2892:155::o;2859:174:12:-;2900:16;2928;386:1;333:49;325:58;;:62;;;;:::i;:::-;317:71;;2928:38;;3009:8;2999:18;;2985:42;2859:174;:::o;874:166::-;955:8;951:83;;;992:4;979:1;:10;;;:17;;;;;;;;;;;;;;;;;;1015:8;;;;;;;;;;951:83;874:166;;:::o;2133:161:28:-;2186:101;2243:37;2282:4;2186:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:101;;;;;:::i;:::-;2133:161::o;640:96:32:-;693:7;719:10;712:17;;640:96;:::o;3069:174:5:-;3110:16;3138;459:1;401:54;393:63;;:67;;;;:::i;:::-;385:76;;3138:38;;3219:8;3209:18;;3195:42;3069:174;:::o;987:251::-;1097:24;1107:4;1113:7;1097:1;:9;;;;;;:24;;;;;:::i;:::-;1092:140;;1162:4;1137:1;:7;;:13;1145:4;1137:13;;;;;;;;;;;:22;1151:7;1137:22;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;1185:36;1197:4;1203:7;1212:8;1185:36;;;;;;;;:::i;:::-;;;;;;;;1092:140;987:251;;;;:::o;1613:174:9:-;1654:16;1682;365:1;295:66;287:75;;:79;;;;:::i;:::-;279:88;;1682:38;;1763:8;1753:18;;1739:42;1613:174;:::o;670:246::-;422:10;797:20;;782:35;;;:11;:35;;;;774:79;;;;;;;;;;;;:::i;:::-;;;;;;;;;900:9;863:1;:21;;:34;885:11;863:34;;;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;670:246;;;:::o;2491:141:5:-;2580:4;2603:1;:7;;:13;2611:4;2603:13;;;;;;;;;;;:22;2617:7;2603:22;;;;;;;;;;;;;;;;;;;;;;;;;2596:29;;2491:141;;;;;:::o;7:77:38:-;44:7;73:5;62:16;;7:77;;;:::o;90:180::-;138:77;135:1;128:88;235:4;232:1;225:15;259:4;256:1;249:15;276:194;316:4;336:20;354:1;336:20;:::i;:::-;331:25;;370:20;388:1;370:20;:::i;:::-;365:25;;414:1;411;407:9;399:17;;438:1;432:4;429:11;426:37;;;443:18;;:::i;:::-;426:37;276:194;;;;:::o;476:77::-;513:7;542:5;531:16;;476:77;;;:::o;559:118::-;646:24;664:5;646:24;:::i;:::-;641:3;634:37;559:118;;:::o;683:126::-;720:7;760:42;753:5;749:54;738:65;;683:126;;;:::o;815:96::-;852:7;881:24;899:5;881:24;:::i;:::-;870:35;;815:96;;;:::o;917:118::-;1004:24;1022:5;1004:24;:::i;:::-;999:3;992:37;917:118;;:::o;1041:442::-;1190:4;1228:2;1217:9;1213:18;1205:26;;1241:71;1309:1;1298:9;1294:17;1285:6;1241:71;:::i;:::-;1322:72;1390:2;1379:9;1375:18;1366:6;1322:72;:::i;:::-;1404;1472:2;1461:9;1457:18;1448:6;1404:72;:::i;:::-;1041:442;;;;;;:::o;1489:169::-;1573:11;1607:6;1602:3;1595:19;1647:4;1642:3;1638:14;1623:29;;1489:169;;;;:::o;1664:181::-;1804:33;1800:1;1792:6;1788:14;1781:57;1664:181;:::o;1851:366::-;1993:3;2014:67;2078:2;2073:3;2014:67;:::i;:::-;2007:74;;2090:93;2179:3;2090:93;:::i;:::-;2208:2;2203:3;2199:12;2192:19;;1851:366;;;:::o;2223:419::-;2389:4;2427:2;2416:9;2412:18;2404:26;;2476:9;2470:4;2466:20;2462:1;2451:9;2447:17;2440:47;2504:131;2630:4;2504:131;:::i;:::-;2496:139;;2223:419;;;:::o;1202:2318:37:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_5051":{"entryPoint":2517,"id":5051,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_1607":{"entryPoint":3067,"id":1607,"parameterSlots":0,"returnSlots":0},"@SUPER_ADMIN_ROLE_5048":{"entryPoint":2193,"id":5048,"parameterSlots":0,"returnSlots":0},"@_burnToken_3020":{"entryPoint":11892,"id":3020,"parameterSlots":4,"returnSlots":0},"@_callOnERC1155BatchReceived_3088":{"entryPoint":11207,"id":3088,"parameterSlots":6,"returnSlots":0},"@_callOnERC1155Received_3053":{"entryPoint":12806,"id":3053,"parameterSlots":6,"returnSlots":0},"@_isOperatable_2828":{"entryPoint":11687,"id":2828,"parameterSlots":3,"returnSlots":1},"@_mintToken_2969":{"entryPoint":10908,"id":2969,"parameterSlots":4,"returnSlots":0},"@_msgSender_3691":{"entryPoint":5421,"id":3691,"parameterSlots":0,"returnSlots":1},"@_transferToken_2918":{"entryPoint":12156,"id":2918,"parameterSlots":5,"returnSlots":0},"@balanceOfBatch_1423":{"entryPoint":2229,"id":1423,"parameterSlots":4,"returnSlots":1},"@balanceOfBatch_2790":{"entryPoint":7329,"id":2790,"parameterSlots":5,"returnSlots":1},"@balanceOf_1400":{"entryPoint":1336,"id":1400,"parameterSlots":2,"returnSlots":1},"@balanceOf_2725":{"entryPoint":4914,"id":2725,"parameterSlots":3,"returnSlots":1},"@baseMetadataURI_1563":{"entryPoint":2273,"id":1563,"parameterSlots":0,"returnSlots":1},"@baseMetadataURI_3155":{"entryPoint":7634,"id":3155,"parameterSlots":1,"returnSlots":1},"@batchBurnFrom_1491":{"entryPoint":2618,"id":1491,"parameterSlots":5,"returnSlots":0},"@batchBurnFrom_2636":{"entryPoint":8288,"id":2636,"parameterSlots":7,"returnSlots":0},"@burnFrom_1465":{"entryPoint":1758,"id":1465,"parameterSlots":3,"returnSlots":0},"@burnFrom_2562":{"entryPoint":6135,"id":2562,"parameterSlots":5,"returnSlots":0},"@constructorInit_1001":{"entryPoint":4026,"id":1001,"parameterSlots":2,"returnSlots":0},"@constructorInit_575":{"entryPoint":3561,"id":575,"parameterSlots":2,"returnSlots":0},"@enforceHasRole_467":{"entryPoint":5429,"id":467,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_669":{"entryPoint":7094,"id":669,"parameterSlots":2,"returnSlots":0},"@enforceIsNotPaused_1110":{"entryPoint":7811,"id":1110,"parameterSlots":1,"returnSlots":0},"@enforceIsPaused_1095":{"entryPoint":12722,"id":1095,"parameterSlots":1,"returnSlots":0},"@grantAdminRole_5210":{"entryPoint":2859,"id":5210,"parameterSlots":1,"returnSlots":0},"@grantMinterRole_5243":{"entryPoint":1934,"id":5243,"parameterSlots":1,"returnSlots":0},"@grantRole_113":{"entryPoint":1861,"id":113,"parameterSlots":2,"returnSlots":0},"@grantRole_340":{"entryPoint":4236,"id":340,"parameterSlots":4,"returnSlots":0},"@hasRole_181":{"entryPoint":2780,"id":181,"parameterSlots":2,"returnSlots":1},"@hasRole_433":{"entryPoint":4744,"id":433,"parameterSlots":3,"returnSlots":1},"@initERC1155Burnable_2126":{"entryPoint":3900,"id":2126,"parameterSlots":0,"returnSlots":0},"@initERC1155MetadataURI_2075":{"entryPoint":4110,"id":2075,"parameterSlots":0,"returnSlots":0},"@initERC1155Mintable_2092":{"entryPoint":3837,"id":2092,"parameterSlots":0,"returnSlots":0},"@init_2058":{"entryPoint":3435,"id":2058,"parameterSlots":0,"returnSlots":0},"@isApprovedForAll_1380":{"entryPoint":3176,"id":1380,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_2694":{"entryPoint":9553,"id":2694,"parameterSlots":3,"returnSlots":1},"@isContract_3367":{"entryPoint":11172,"id":3367,"parameterSlots":1,"returnSlots":1},"@layout_1122":{"entryPoint":3963,"id":1122,"parameterSlots":0,"returnSlots":1},"@layout_2802":{"entryPoint":4851,"id":2802,"parameterSlots":0,"returnSlots":1},"@layout_3191":{"entryPoint":6017,"id":3191,"parameterSlots":0,"returnSlots":1},"@layout_479":{"entryPoint":4173,"id":479,"parameterSlots":0,"returnSlots":1},"@layout_681":{"entryPoint":3498,"id":681,"parameterSlots":0,"returnSlots":1},"@layout_823":{"entryPoint":4434,"id":823,"parameterSlots":0,"returnSlots":1},"@log10_4743":{"entryPoint":13080,"id":4743,"parameterSlots":1,"returnSlots":1},"@owner_213":{"entryPoint":2757,"id":213,"parameterSlots":0,"returnSlots":1},"@owner_651":{"entryPoint":8941,"id":651,"parameterSlots":1,"returnSlots":1},"@pause_1046":{"entryPoint":8664,"id":1046,"parameterSlots":1,"returnSlots":0},"@pause_903":{"entryPoint":2668,"id":903,"parameterSlots":0,"returnSlots":0},"@paused_1081":{"entryPoint":7784,"id":1081,"parameterSlots":1,"returnSlots":1},"@paused_937":{"entryPoint":2296,"id":937,"parameterSlots":0,"returnSlots":1},"@renounceRole_162":{"entryPoint":2719,"id":162,"parameterSlots":1,"returnSlots":0},"@renounceRole_412":{"entryPoint":8749,"id":412,"parameterSlots":3,"returnSlots":0},"@revokeRole_145":{"entryPoint":3103,"id":145,"parameterSlots":2,"returnSlots":0},"@revokeRole_377":{"entryPoint":9354,"id":377,"parameterSlots":4,"returnSlots":0},"@safeBatchMint_1689":{"entryPoint":1409,"id":1689,"parameterSlots":7,"returnSlots":0},"@safeBatchMint_2452":{"entryPoint":5559,"id":2452,"parameterSlots":6,"returnSlots":0},"@safeBatchTransferFrom_1339":{"entryPoint":1802,"id":1339,"parameterSlots":8,"returnSlots":0},"@safeBatchTransferFrom_2295":{"entryPoint":6355,"id":2295,"parameterSlots":10,"returnSlots":0},"@safeMint_2358":{"entryPoint":7896,"id":2358,"parameterSlots":6,"returnSlots":0},"@safeMint_5148":{"entryPoint":2319,"id":5148,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_1307":{"entryPoint":3214,"id":1307,"parameterSlots":6,"returnSlots":0},"@safeTransferFrom_2195":{"entryPoint":9704,"id":2195,"parameterSlots":8,"returnSlots":0},"@setApprovalForAll_1360":{"entryPoint":2818,"id":1360,"parameterSlots":2,"returnSlots":0},"@setApprovalForAll_2673":{"entryPoint":8987,"id":2673,"parameterSlots":4,"returnSlots":0},"@setBaseMetadataURI_1550":{"entryPoint":2553,"id":1550,"parameterSlots":2,"returnSlots":0},"@setBaseMetadataURI_3142":{"entryPoint":8206,"id":3142,"parameterSlots":3,"returnSlots":0},"@setSupportedInterface_777":{"entryPoint":4497,"id":777,"parameterSlots":3,"returnSlots":0},"@supportsInterface_712":{"entryPoint":1374,"id":712,"parameterSlots":1,"returnSlots":1},"@supportsInterface_811":{"entryPoint":5118,"id":811,"parameterSlots":2,"returnSlots":1},"@toASCIIString_3348":{"entryPoint":10523,"id":3348,"parameterSlots":1,"returnSlots":1},"@toString_3870":{"entryPoint":11481,"id":3870,"parameterSlots":1,"returnSlots":1},"@tokenMetadataURI_3179":{"entryPoint":6080,"id":3179,"parameterSlots":2,"returnSlots":1},"@transferOwnership_5177":{"entryPoint":3267,"id":5177,"parameterSlots":1,"returnSlots":0},"@transferOwnership_638":{"entryPoint":10157,"id":638,"parameterSlots":3,"returnSlots":0},"@unpause_1068":{"entryPoint":7244,"id":1068,"parameterSlots":1,"returnSlots":0},"@unpause_924":{"entryPoint":2142,"id":924,"parameterSlots":0,"returnSlots":0},"@uri_1580":{"entryPoint":1723,"id":1580,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address":{"entryPoint":13502,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_address_$dyn_calldata_ptr":{"entryPoint":14989,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":13885,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bool":{"entryPoint":15986,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":14817,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":13750,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":19606,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":13971,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_string_calldata_ptr":{"entryPoint":15564,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_uint256":{"entryPoint":13556,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":14902,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":16071,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":14564,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":16135,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":15727,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":14057,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_bool":{"entryPoint":16007,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":13577,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_uint256":{"entryPoint":14481,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":15428,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":15075,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32":{"entryPoint":15876,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":14838,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":13771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":19627,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptr":{"entryPoint":15650,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":14258,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":15263,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":15921,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$dyn_calldata_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":18005,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":15300,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":13828,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":14947,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":19259,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":19445,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":19060,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":14390,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16962,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":17567,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c_to_t_string_memory_ptr_fromStack":{"entryPoint":19713,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f_to_t_string_memory_ptr_fromStack":{"entryPoint":16330,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2_to_t_string_memory_ptr_fromStack":{"entryPoint":19976,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack":{"entryPoint":16700,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9_to_t_string_memory_ptr_fromStack":{"entryPoint":17924,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3_to_t_string_memory_ptr_fromStack":{"entryPoint":18352,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16927,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66_to_t_string_memory_ptr_fromStack":{"entryPoint":18197,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad_to_t_string_memory_ptr_fromStack":{"entryPoint":17173,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab_to_t_string_memory_ptr_fromStack":{"entryPoint":19868,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":17052,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd_to_t_string_memory_ptr_fromStack":{"entryPoint":17775,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0_to_t_string_memory_ptr_fromStack":{"entryPoint":19182,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101_to_t_string_memory_ptr_fromStack":{"entryPoint":19350,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd_to_t_string_memory_ptr_fromStack":{"entryPoint":17281,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210_to_t_string_memory_ptr_fromStack":{"entryPoint":16808,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff_to_t_string_memory_ptr_fromStack":{"entryPoint":16438,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":15248,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":13641,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":19282,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17698,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_t_string_memory_ptr_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17087,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":15936,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":19502,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":20043,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":18097,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":15394,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":17395,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":13843,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":14962,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":16604,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19105,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14447,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19748,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16365,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20011,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16735,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17959,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18387,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18232,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17208,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19903,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17810,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19217,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19385,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17316,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16843,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16473,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13656,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":17842,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":15232,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":17546,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":15204,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":19417,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_calldata_ptr":{"entryPoint":18419,"id":null,"parameterSlots":2,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":14303,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":15287,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":15215,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":19428,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":14314,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16875,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":16552,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":18696,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":13461,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":13816,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":14784,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":13683,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":13429,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":13523,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":18661,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":18551,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage":{"entryPoint":18837,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory":{"entryPoint":17996,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":19045,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":14331,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":18430,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":17497,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":18809,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":18541,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":19249,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":18779,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":16505,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":19780,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":17450,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":17348,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":18264,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":18585,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":13875,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":13870,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":13880,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":13424,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec":{"entryPoint":17991,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":13419,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":14373,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":18446,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":18766,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":18637,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c":{"entryPoint":19672,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f":{"entryPoint":16289,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2":{"entryPoint":19935,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300":{"entryPoint":16659,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9":{"entryPoint":17883,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3":{"entryPoint":18311,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a":{"entryPoint":16886,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66":{"entryPoint":18156,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad":{"entryPoint":17132,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab":{"entryPoint":19827,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223":{"entryPoint":17011,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd":{"entryPoint":17734,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0":{"entryPoint":19141,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101":{"entryPoint":19309,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd":{"entryPoint":17240,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210":{"entryPoint":16767,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff":{"entryPoint":16397,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":18459,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":18595,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":13479,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":15963,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":14794,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":13727,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":13533,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":18632,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:52958:38","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:38","statements":[{"nodeType":"YulAssignment","src":"57:19:38","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:38","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:38"},"nodeType":"YulFunctionCall","src":"67:9:38"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:38"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:38","type":""}],"src":"7:75:38"},{"body":{"nodeType":"YulBlock","src":"177:28:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:38"},"nodeType":"YulFunctionCall","src":"187:12:38"},"nodeType":"YulExpressionStatement","src":"187:12:38"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:38"},{"body":{"nodeType":"YulBlock","src":"300:28:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:38"},"nodeType":"YulFunctionCall","src":"310:12:38"},"nodeType":"YulExpressionStatement","src":"310:12:38"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:38"},{"body":{"nodeType":"YulBlock","src":"379:81:38","statements":[{"nodeType":"YulAssignment","src":"389:65:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:38","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:38"},"nodeType":"YulFunctionCall","src":"400:54:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:38"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:38","type":""}],"src":"334:126:38"},{"body":{"nodeType":"YulBlock","src":"511:51:38","statements":[{"nodeType":"YulAssignment","src":"521:35:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:38"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:38"},"nodeType":"YulFunctionCall","src":"532:24:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:38"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:38","type":""}],"src":"466:96:38"},{"body":{"nodeType":"YulBlock","src":"611:79:38","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:38"},"nodeType":"YulFunctionCall","src":"670:12:38"},"nodeType":"YulExpressionStatement","src":"670:12:38"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:38"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:38"},"nodeType":"YulFunctionCall","src":"641:24:38"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:38"},"nodeType":"YulFunctionCall","src":"631:35:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:38"},"nodeType":"YulFunctionCall","src":"624:43:38"},"nodeType":"YulIf","src":"621:63:38"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:38","type":""}],"src":"568:122:38"},{"body":{"nodeType":"YulBlock","src":"748:87:38","statements":[{"nodeType":"YulAssignment","src":"758:29:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"780:6:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"767:12:38"},"nodeType":"YulFunctionCall","src":"767:20:38"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"758:5:38"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"823:5:38"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"796:26:38"},"nodeType":"YulFunctionCall","src":"796:33:38"},"nodeType":"YulExpressionStatement","src":"796:33:38"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"726:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"734:3:38","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"742:5:38","type":""}],"src":"696:139:38"},{"body":{"nodeType":"YulBlock","src":"886:32:38","statements":[{"nodeType":"YulAssignment","src":"896:16:38","value":{"name":"value","nodeType":"YulIdentifier","src":"907:5:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"896:7:38"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"868:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"878:7:38","type":""}],"src":"841:77:38"},{"body":{"nodeType":"YulBlock","src":"967:79:38","statements":[{"body":{"nodeType":"YulBlock","src":"1024:16:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1033:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1036:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1026:6:38"},"nodeType":"YulFunctionCall","src":"1026:12:38"},"nodeType":"YulExpressionStatement","src":"1026:12:38"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"990:5:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1015:5:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"997:17:38"},"nodeType":"YulFunctionCall","src":"997:24:38"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"987:2:38"},"nodeType":"YulFunctionCall","src":"987:35:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"980:6:38"},"nodeType":"YulFunctionCall","src":"980:43:38"},"nodeType":"YulIf","src":"977:63:38"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"960:5:38","type":""}],"src":"924:122:38"},{"body":{"nodeType":"YulBlock","src":"1104:87:38","statements":[{"nodeType":"YulAssignment","src":"1114:29:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1123:12:38"},"nodeType":"YulFunctionCall","src":"1123:20:38"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1114:5:38"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1179:5:38"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1152:26:38"},"nodeType":"YulFunctionCall","src":"1152:33:38"},"nodeType":"YulExpressionStatement","src":"1152:33:38"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1082:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"1090:3:38","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1098:5:38","type":""}],"src":"1052:139:38"},{"body":{"nodeType":"YulBlock","src":"1280:391:38","statements":[{"body":{"nodeType":"YulBlock","src":"1326:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1328:77:38"},"nodeType":"YulFunctionCall","src":"1328:79:38"},"nodeType":"YulExpressionStatement","src":"1328:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1301:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"1310:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1297:3:38"},"nodeType":"YulFunctionCall","src":"1297:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"1322:2:38","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1293:3:38"},"nodeType":"YulFunctionCall","src":"1293:32:38"},"nodeType":"YulIf","src":"1290:119:38"},{"nodeType":"YulBlock","src":"1419:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"1434:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"1448:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1438:6:38","type":""}]},{"nodeType":"YulAssignment","src":"1463:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1498:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"1509:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1494:3:38"},"nodeType":"YulFunctionCall","src":"1494:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1518:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1473:20:38"},"nodeType":"YulFunctionCall","src":"1473:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1463:6:38"}]}]},{"nodeType":"YulBlock","src":"1546:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"1561:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"1575:2:38","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1565:6:38","type":""}]},{"nodeType":"YulAssignment","src":"1591:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1626:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"1637:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1622:3:38"},"nodeType":"YulFunctionCall","src":"1622:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1646:7:38"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1601:20:38"},"nodeType":"YulFunctionCall","src":"1601:53:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1591:6:38"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1242:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1253:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1265:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1273:6:38","type":""}],"src":"1197:474:38"},{"body":{"nodeType":"YulBlock","src":"1742:53:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1759:3:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1782:5:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1764:17:38"},"nodeType":"YulFunctionCall","src":"1764:24:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:38"},"nodeType":"YulFunctionCall","src":"1752:37:38"},"nodeType":"YulExpressionStatement","src":"1752:37:38"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1730:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1737:3:38","type":""}],"src":"1677:118:38"},{"body":{"nodeType":"YulBlock","src":"1899:124:38","statements":[{"nodeType":"YulAssignment","src":"1909:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1921:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"1932:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1917:3:38"},"nodeType":"YulFunctionCall","src":"1917:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1909:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1989:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2002:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"2013:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1998:3:38"},"nodeType":"YulFunctionCall","src":"1998:17:38"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"1945:43:38"},"nodeType":"YulFunctionCall","src":"1945:71:38"},"nodeType":"YulExpressionStatement","src":"1945:71:38"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1871:9:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1883:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1894:4:38","type":""}],"src":"1801:222:38"},{"body":{"nodeType":"YulBlock","src":"2073:105:38","statements":[{"nodeType":"YulAssignment","src":"2083:89:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2098:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"2105:66:38","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2094:3:38"},"nodeType":"YulFunctionCall","src":"2094:78:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2083:7:38"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2055:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2065:7:38","type":""}],"src":"2029:149:38"},{"body":{"nodeType":"YulBlock","src":"2226:78:38","statements":[{"body":{"nodeType":"YulBlock","src":"2282:16:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2291:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2294:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2284:6:38"},"nodeType":"YulFunctionCall","src":"2284:12:38"},"nodeType":"YulExpressionStatement","src":"2284:12:38"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2249:5:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2273:5:38"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"2256:16:38"},"nodeType":"YulFunctionCall","src":"2256:23:38"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2246:2:38"},"nodeType":"YulFunctionCall","src":"2246:34:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2239:6:38"},"nodeType":"YulFunctionCall","src":"2239:42:38"},"nodeType":"YulIf","src":"2236:62:38"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2219:5:38","type":""}],"src":"2184:120:38"},{"body":{"nodeType":"YulBlock","src":"2361:86:38","statements":[{"nodeType":"YulAssignment","src":"2371:29:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2393:6:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2380:12:38"},"nodeType":"YulFunctionCall","src":"2380:20:38"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2371:5:38"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2435:5:38"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"2409:25:38"},"nodeType":"YulFunctionCall","src":"2409:32:38"},"nodeType":"YulExpressionStatement","src":"2409:32:38"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2339:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"2347:3:38","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2355:5:38","type":""}],"src":"2310:137:38"},{"body":{"nodeType":"YulBlock","src":"2518:262:38","statements":[{"body":{"nodeType":"YulBlock","src":"2564:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2566:77:38"},"nodeType":"YulFunctionCall","src":"2566:79:38"},"nodeType":"YulExpressionStatement","src":"2566:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2539:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"2548:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2535:3:38"},"nodeType":"YulFunctionCall","src":"2535:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"2560:2:38","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2531:3:38"},"nodeType":"YulFunctionCall","src":"2531:32:38"},"nodeType":"YulIf","src":"2528:119:38"},{"nodeType":"YulBlock","src":"2657:116:38","statements":[{"nodeType":"YulVariableDeclaration","src":"2672:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"2686:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2676:6:38","type":""}]},{"nodeType":"YulAssignment","src":"2701:62:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2735:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"2746:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2731:3:38"},"nodeType":"YulFunctionCall","src":"2731:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2755:7:38"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"2711:19:38"},"nodeType":"YulFunctionCall","src":"2711:52:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2701:6:38"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2488:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2499:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2511:6:38","type":""}],"src":"2453:327:38"},{"body":{"nodeType":"YulBlock","src":"2828:48:38","statements":[{"nodeType":"YulAssignment","src":"2838:32:38","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2863:5:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2856:6:38"},"nodeType":"YulFunctionCall","src":"2856:13:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2849:6:38"},"nodeType":"YulFunctionCall","src":"2849:21:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2838:7:38"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2810:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2820:7:38","type":""}],"src":"2786:90:38"},{"body":{"nodeType":"YulBlock","src":"2941:50:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2958:3:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2978:5:38"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"2963:14:38"},"nodeType":"YulFunctionCall","src":"2963:21:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2951:6:38"},"nodeType":"YulFunctionCall","src":"2951:34:38"},"nodeType":"YulExpressionStatement","src":"2951:34:38"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2929:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2936:3:38","type":""}],"src":"2882:109:38"},{"body":{"nodeType":"YulBlock","src":"3089:118:38","statements":[{"nodeType":"YulAssignment","src":"3099:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3111:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"3122:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3107:3:38"},"nodeType":"YulFunctionCall","src":"3107:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3099:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3173:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3186:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"3197:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3182:3:38"},"nodeType":"YulFunctionCall","src":"3182:17:38"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3135:37:38"},"nodeType":"YulFunctionCall","src":"3135:65:38"},"nodeType":"YulExpressionStatement","src":"3135:65:38"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3061:9:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3073:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3084:4:38","type":""}],"src":"2997:210:38"},{"body":{"nodeType":"YulBlock","src":"3302:28:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3319:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3322:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3312:6:38"},"nodeType":"YulFunctionCall","src":"3312:12:38"},"nodeType":"YulExpressionStatement","src":"3312:12:38"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"3213:117:38"},{"body":{"nodeType":"YulBlock","src":"3425:28:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3442:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3445:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3435:6:38"},"nodeType":"YulFunctionCall","src":"3435:12:38"},"nodeType":"YulExpressionStatement","src":"3435:12:38"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"3336:117:38"},{"body":{"nodeType":"YulBlock","src":"3548:28:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3565:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3568:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3558:6:38"},"nodeType":"YulFunctionCall","src":"3558:12:38"},"nodeType":"YulExpressionStatement","src":"3558:12:38"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"3459:117:38"},{"body":{"nodeType":"YulBlock","src":"3689:478:38","statements":[{"body":{"nodeType":"YulBlock","src":"3738:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3740:77:38"},"nodeType":"YulFunctionCall","src":"3740:79:38"},"nodeType":"YulExpressionStatement","src":"3740:79:38"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3717:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"3725:4:38","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3713:3:38"},"nodeType":"YulFunctionCall","src":"3713:17:38"},{"name":"end","nodeType":"YulIdentifier","src":"3732:3:38"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3709:3:38"},"nodeType":"YulFunctionCall","src":"3709:27:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3702:6:38"},"nodeType":"YulFunctionCall","src":"3702:35:38"},"nodeType":"YulIf","src":"3699:122:38"},{"nodeType":"YulAssignment","src":"3830:30:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3853:6:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3840:12:38"},"nodeType":"YulFunctionCall","src":"3840:20:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3830:6:38"}]},{"body":{"nodeType":"YulBlock","src":"3903:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"3905:77:38"},"nodeType":"YulFunctionCall","src":"3905:79:38"},"nodeType":"YulExpressionStatement","src":"3905:79:38"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3875:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"3883:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3872:2:38"},"nodeType":"YulFunctionCall","src":"3872:30:38"},"nodeType":"YulIf","src":"3869:117:38"},{"nodeType":"YulAssignment","src":"3995:29:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4011:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"4019:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4007:3:38"},"nodeType":"YulFunctionCall","src":"4007:17:38"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"3995:8:38"}]},{"body":{"nodeType":"YulBlock","src":"4078:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"4080:77:38"},"nodeType":"YulFunctionCall","src":"4080:79:38"},"nodeType":"YulExpressionStatement","src":"4080:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"4043:8:38"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4057:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"4065:4:38","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4053:3:38"},"nodeType":"YulFunctionCall","src":"4053:17:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4039:3:38"},"nodeType":"YulFunctionCall","src":"4039:32:38"},{"name":"end","nodeType":"YulIdentifier","src":"4073:3:38"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4036:2:38"},"nodeType":"YulFunctionCall","src":"4036:41:38"},"nodeType":"YulIf","src":"4033:128:38"}]},"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3656:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"3664:3:38","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"3672:8:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"3682:6:38","type":""}],"src":"3599:568:38"},{"body":{"nodeType":"YulBlock","src":"4260:478:38","statements":[{"body":{"nodeType":"YulBlock","src":"4309:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"4311:77:38"},"nodeType":"YulFunctionCall","src":"4311:79:38"},"nodeType":"YulExpressionStatement","src":"4311:79:38"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4288:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"4296:4:38","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4284:3:38"},"nodeType":"YulFunctionCall","src":"4284:17:38"},{"name":"end","nodeType":"YulIdentifier","src":"4303:3:38"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4280:3:38"},"nodeType":"YulFunctionCall","src":"4280:27:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4273:6:38"},"nodeType":"YulFunctionCall","src":"4273:35:38"},"nodeType":"YulIf","src":"4270:122:38"},{"nodeType":"YulAssignment","src":"4401:30:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4424:6:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4411:12:38"},"nodeType":"YulFunctionCall","src":"4411:20:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4401:6:38"}]},{"body":{"nodeType":"YulBlock","src":"4474:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"4476:77:38"},"nodeType":"YulFunctionCall","src":"4476:79:38"},"nodeType":"YulExpressionStatement","src":"4476:79:38"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4446:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"4454:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4443:2:38"},"nodeType":"YulFunctionCall","src":"4443:30:38"},"nodeType":"YulIf","src":"4440:117:38"},{"nodeType":"YulAssignment","src":"4566:29:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4582:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"4590:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4578:3:38"},"nodeType":"YulFunctionCall","src":"4578:17:38"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"4566:8:38"}]},{"body":{"nodeType":"YulBlock","src":"4649:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"4651:77:38"},"nodeType":"YulFunctionCall","src":"4651:79:38"},"nodeType":"YulExpressionStatement","src":"4651:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"4614:8:38"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4628:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"4636:4:38","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4624:3:38"},"nodeType":"YulFunctionCall","src":"4624:17:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4610:3:38"},"nodeType":"YulFunctionCall","src":"4610:32:38"},{"name":"end","nodeType":"YulIdentifier","src":"4644:3:38"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4607:2:38"},"nodeType":"YulFunctionCall","src":"4607:41:38"},"nodeType":"YulIf","src":"4604:128:38"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4227:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"4235:3:38","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"4243:8:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"4253:6:38","type":""}],"src":"4186:552:38"},{"body":{"nodeType":"YulBlock","src":"4950:1217:38","statements":[{"body":{"nodeType":"YulBlock","src":"4997:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4999:77:38"},"nodeType":"YulFunctionCall","src":"4999:79:38"},"nodeType":"YulExpressionStatement","src":"4999:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4971:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"4980:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4967:3:38"},"nodeType":"YulFunctionCall","src":"4967:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"4992:3:38","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4963:3:38"},"nodeType":"YulFunctionCall","src":"4963:33:38"},"nodeType":"YulIf","src":"4960:120:38"},{"nodeType":"YulBlock","src":"5090:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"5105:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"5119:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5109:6:38","type":""}]},{"nodeType":"YulAssignment","src":"5134:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5169:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"5180:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5165:3:38"},"nodeType":"YulFunctionCall","src":"5165:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5189:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5144:20:38"},"nodeType":"YulFunctionCall","src":"5144:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5134:6:38"}]}]},{"nodeType":"YulBlock","src":"5217:313:38","statements":[{"nodeType":"YulVariableDeclaration","src":"5232:46:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5263:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"5274:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5259:3:38"},"nodeType":"YulFunctionCall","src":"5259:18:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5246:12:38"},"nodeType":"YulFunctionCall","src":"5246:32:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5236:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"5325:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5327:77:38"},"nodeType":"YulFunctionCall","src":"5327:79:38"},"nodeType":"YulExpressionStatement","src":"5327:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5297:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"5305:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5294:2:38"},"nodeType":"YulFunctionCall","src":"5294:30:38"},"nodeType":"YulIf","src":"5291:117:38"},{"nodeType":"YulAssignment","src":"5422:98:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5492:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"5503:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5488:3:38"},"nodeType":"YulFunctionCall","src":"5488:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5512:7:38"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"5440:47:38"},"nodeType":"YulFunctionCall","src":"5440:80:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5422:6:38"},{"name":"value2","nodeType":"YulIdentifier","src":"5430:6:38"}]}]},{"nodeType":"YulBlock","src":"5540:313:38","statements":[{"nodeType":"YulVariableDeclaration","src":"5555:46:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5586:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"5597:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5582:3:38"},"nodeType":"YulFunctionCall","src":"5582:18:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5569:12:38"},"nodeType":"YulFunctionCall","src":"5569:32:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5559:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"5648:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5650:77:38"},"nodeType":"YulFunctionCall","src":"5650:79:38"},"nodeType":"YulExpressionStatement","src":"5650:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5620:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"5628:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5617:2:38"},"nodeType":"YulFunctionCall","src":"5617:30:38"},"nodeType":"YulIf","src":"5614:117:38"},{"nodeType":"YulAssignment","src":"5745:98:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5815:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"5826:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5811:3:38"},"nodeType":"YulFunctionCall","src":"5811:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5835:7:38"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"5763:47:38"},"nodeType":"YulFunctionCall","src":"5763:80:38"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5745:6:38"},{"name":"value4","nodeType":"YulIdentifier","src":"5753:6:38"}]}]},{"nodeType":"YulBlock","src":"5863:297:38","statements":[{"nodeType":"YulVariableDeclaration","src":"5878:46:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5909:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"5920:2:38","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5905:3:38"},"nodeType":"YulFunctionCall","src":"5905:18:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5892:12:38"},"nodeType":"YulFunctionCall","src":"5892:32:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5882:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"5971:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5973:77:38"},"nodeType":"YulFunctionCall","src":"5973:79:38"},"nodeType":"YulExpressionStatement","src":"5973:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5943:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"5951:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5940:2:38"},"nodeType":"YulFunctionCall","src":"5940:30:38"},"nodeType":"YulIf","src":"5937:117:38"},{"nodeType":"YulAssignment","src":"6068:82:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6122:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"6133:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6118:3:38"},"nodeType":"YulFunctionCall","src":"6118:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6142:7:38"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"6086:31:38"},"nodeType":"YulFunctionCall","src":"6086:64:38"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"6068:6:38"},{"name":"value6","nodeType":"YulIdentifier","src":"6076:6:38"}]}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4872:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4883:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4895:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4903:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4911:6:38","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4919:6:38","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4927:6:38","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4935:6:38","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4943:6:38","type":""}],"src":"4744:1423:38"},{"body":{"nodeType":"YulBlock","src":"6239:263:38","statements":[{"body":{"nodeType":"YulBlock","src":"6285:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6287:77:38"},"nodeType":"YulFunctionCall","src":"6287:79:38"},"nodeType":"YulExpressionStatement","src":"6287:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6260:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"6269:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6256:3:38"},"nodeType":"YulFunctionCall","src":"6256:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"6281:2:38","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6252:3:38"},"nodeType":"YulFunctionCall","src":"6252:32:38"},"nodeType":"YulIf","src":"6249:119:38"},{"nodeType":"YulBlock","src":"6378:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"6393:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"6407:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6397:6:38","type":""}]},{"nodeType":"YulAssignment","src":"6422:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6457:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"6468:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6453:3:38"},"nodeType":"YulFunctionCall","src":"6453:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6477:7:38"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6432:20:38"},"nodeType":"YulFunctionCall","src":"6432:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6422:6:38"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6209:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6220:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6232:6:38","type":""}],"src":"6173:329:38"},{"body":{"nodeType":"YulBlock","src":"6567:40:38","statements":[{"nodeType":"YulAssignment","src":"6578:22:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6594:5:38"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6588:5:38"},"nodeType":"YulFunctionCall","src":"6588:12:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6578:6:38"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6550:5:38","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6560:6:38","type":""}],"src":"6508:99:38"},{"body":{"nodeType":"YulBlock","src":"6709:73:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6726:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"6731:6:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6719:6:38"},"nodeType":"YulFunctionCall","src":"6719:19:38"},"nodeType":"YulExpressionStatement","src":"6719:19:38"},{"nodeType":"YulAssignment","src":"6747:29:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6766:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"6771:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6762:3:38"},"nodeType":"YulFunctionCall","src":"6762:14:38"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6747:11:38"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6681:3:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"6686:6:38","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6697:11:38","type":""}],"src":"6613:169:38"},{"body":{"nodeType":"YulBlock","src":"6850:184:38","statements":[{"nodeType":"YulVariableDeclaration","src":"6860:10:38","value":{"kind":"number","nodeType":"YulLiteral","src":"6869:1:38","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6864:1:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"6929:63:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6954:3:38"},{"name":"i","nodeType":"YulIdentifier","src":"6959:1:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6950:3:38"},"nodeType":"YulFunctionCall","src":"6950:11:38"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6973:3:38"},{"name":"i","nodeType":"YulIdentifier","src":"6978:1:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6969:3:38"},"nodeType":"YulFunctionCall","src":"6969:11:38"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6963:5:38"},"nodeType":"YulFunctionCall","src":"6963:18:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6943:6:38"},"nodeType":"YulFunctionCall","src":"6943:39:38"},"nodeType":"YulExpressionStatement","src":"6943:39:38"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6890:1:38"},{"name":"length","nodeType":"YulIdentifier","src":"6893:6:38"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6887:2:38"},"nodeType":"YulFunctionCall","src":"6887:13:38"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6901:19:38","statements":[{"nodeType":"YulAssignment","src":"6903:15:38","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6912:1:38"},{"kind":"number","nodeType":"YulLiteral","src":"6915:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6908:3:38"},"nodeType":"YulFunctionCall","src":"6908:10:38"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6903:1:38"}]}]},"pre":{"nodeType":"YulBlock","src":"6883:3:38","statements":[]},"src":"6879:113:38"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7012:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"7017:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7008:3:38"},"nodeType":"YulFunctionCall","src":"7008:16:38"},{"kind":"number","nodeType":"YulLiteral","src":"7026:1:38","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7001:6:38"},"nodeType":"YulFunctionCall","src":"7001:27:38"},"nodeType":"YulExpressionStatement","src":"7001:27:38"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6832:3:38","type":""},{"name":"dst","nodeType":"YulTypedName","src":"6837:3:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"6842:6:38","type":""}],"src":"6788:246:38"},{"body":{"nodeType":"YulBlock","src":"7088:54:38","statements":[{"nodeType":"YulAssignment","src":"7098:38:38","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7116:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"7123:2:38","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7112:3:38"},"nodeType":"YulFunctionCall","src":"7112:14:38"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7132:2:38","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7128:3:38"},"nodeType":"YulFunctionCall","src":"7128:7:38"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7108:3:38"},"nodeType":"YulFunctionCall","src":"7108:28:38"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"7098:6:38"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7071:5:38","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"7081:6:38","type":""}],"src":"7040:102:38"},{"body":{"nodeType":"YulBlock","src":"7240:285:38","statements":[{"nodeType":"YulVariableDeclaration","src":"7250:53:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7297:5:38"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7264:32:38"},"nodeType":"YulFunctionCall","src":"7264:39:38"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7254:6:38","type":""}]},{"nodeType":"YulAssignment","src":"7312:78:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7378:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"7383:6:38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7319:58:38"},"nodeType":"YulFunctionCall","src":"7319:71:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7312:3:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7438:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"7445:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7434:3:38"},"nodeType":"YulFunctionCall","src":"7434:16:38"},{"name":"pos","nodeType":"YulIdentifier","src":"7452:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"7457:6:38"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7399:34:38"},"nodeType":"YulFunctionCall","src":"7399:65:38"},"nodeType":"YulExpressionStatement","src":"7399:65:38"},{"nodeType":"YulAssignment","src":"7473:46:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7484:3:38"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7511:6:38"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7489:21:38"},"nodeType":"YulFunctionCall","src":"7489:29:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7480:3:38"},"nodeType":"YulFunctionCall","src":"7480:39:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7473:3:38"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7221:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7228:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7236:3:38","type":""}],"src":"7148:377:38"},{"body":{"nodeType":"YulBlock","src":"7649:195:38","statements":[{"nodeType":"YulAssignment","src":"7659:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7671:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"7682:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7667:3:38"},"nodeType":"YulFunctionCall","src":"7667:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7659:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7706:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"7717:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7702:3:38"},"nodeType":"YulFunctionCall","src":"7702:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7725:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"7731:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7721:3:38"},"nodeType":"YulFunctionCall","src":"7721:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7695:6:38"},"nodeType":"YulFunctionCall","src":"7695:47:38"},"nodeType":"YulExpressionStatement","src":"7695:47:38"},{"nodeType":"YulAssignment","src":"7751:86:38","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7823:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"7832:4:38"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7759:63:38"},"nodeType":"YulFunctionCall","src":"7759:78:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7751:4:38"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7621:9:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7633:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7644:4:38","type":""}],"src":"7531:313:38"},{"body":{"nodeType":"YulBlock","src":"7950:519:38","statements":[{"body":{"nodeType":"YulBlock","src":"7996:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7998:77:38"},"nodeType":"YulFunctionCall","src":"7998:79:38"},"nodeType":"YulExpressionStatement","src":"7998:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7971:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"7980:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7967:3:38"},"nodeType":"YulFunctionCall","src":"7967:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"7992:2:38","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7963:3:38"},"nodeType":"YulFunctionCall","src":"7963:32:38"},"nodeType":"YulIf","src":"7960:119:38"},{"nodeType":"YulBlock","src":"8089:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"8104:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"8118:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8108:6:38","type":""}]},{"nodeType":"YulAssignment","src":"8133:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8168:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"8179:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8164:3:38"},"nodeType":"YulFunctionCall","src":"8164:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8188:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8143:20:38"},"nodeType":"YulFunctionCall","src":"8143:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8133:6:38"}]}]},{"nodeType":"YulBlock","src":"8216:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"8231:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"8245:2:38","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8235:6:38","type":""}]},{"nodeType":"YulAssignment","src":"8261:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8296:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"8307:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8292:3:38"},"nodeType":"YulFunctionCall","src":"8292:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8316:7:38"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8271:20:38"},"nodeType":"YulFunctionCall","src":"8271:53:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8261:6:38"}]}]},{"nodeType":"YulBlock","src":"8344:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"8359:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"8373:2:38","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8363:6:38","type":""}]},{"nodeType":"YulAssignment","src":"8389:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8424:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"8435:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8420:3:38"},"nodeType":"YulFunctionCall","src":"8420:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8444:7:38"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8399:20:38"},"nodeType":"YulFunctionCall","src":"8399:53:38"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8389:6:38"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7904:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7915:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7927:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7935:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7943:6:38","type":""}],"src":"7850:619:38"},{"body":{"nodeType":"YulBlock","src":"8698:1346:38","statements":[{"body":{"nodeType":"YulBlock","src":"8745:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8747:77:38"},"nodeType":"YulFunctionCall","src":"8747:79:38"},"nodeType":"YulExpressionStatement","src":"8747:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8719:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"8728:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8715:3:38"},"nodeType":"YulFunctionCall","src":"8715:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"8740:3:38","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8711:3:38"},"nodeType":"YulFunctionCall","src":"8711:33:38"},"nodeType":"YulIf","src":"8708:120:38"},{"nodeType":"YulBlock","src":"8838:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"8853:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"8867:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8857:6:38","type":""}]},{"nodeType":"YulAssignment","src":"8882:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8917:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"8928:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8913:3:38"},"nodeType":"YulFunctionCall","src":"8913:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8937:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8892:20:38"},"nodeType":"YulFunctionCall","src":"8892:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8882:6:38"}]}]},{"nodeType":"YulBlock","src":"8965:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"8980:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"8994:2:38","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8984:6:38","type":""}]},{"nodeType":"YulAssignment","src":"9010:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9045:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"9056:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9041:3:38"},"nodeType":"YulFunctionCall","src":"9041:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9065:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9020:20:38"},"nodeType":"YulFunctionCall","src":"9020:53:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9010:6:38"}]}]},{"nodeType":"YulBlock","src":"9093:313:38","statements":[{"nodeType":"YulVariableDeclaration","src":"9108:46:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9139:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"9150:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9135:3:38"},"nodeType":"YulFunctionCall","src":"9135:18:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9122:12:38"},"nodeType":"YulFunctionCall","src":"9122:32:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9112:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"9201:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9203:77:38"},"nodeType":"YulFunctionCall","src":"9203:79:38"},"nodeType":"YulExpressionStatement","src":"9203:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9173:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"9181:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9170:2:38"},"nodeType":"YulFunctionCall","src":"9170:30:38"},"nodeType":"YulIf","src":"9167:117:38"},{"nodeType":"YulAssignment","src":"9298:98:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9368:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"9379:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9364:3:38"},"nodeType":"YulFunctionCall","src":"9364:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9388:7:38"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"9316:47:38"},"nodeType":"YulFunctionCall","src":"9316:80:38"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9298:6:38"},{"name":"value3","nodeType":"YulIdentifier","src":"9306:6:38"}]}]},{"nodeType":"YulBlock","src":"9416:313:38","statements":[{"nodeType":"YulVariableDeclaration","src":"9431:46:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9462:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"9473:2:38","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9458:3:38"},"nodeType":"YulFunctionCall","src":"9458:18:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9445:12:38"},"nodeType":"YulFunctionCall","src":"9445:32:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9435:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"9524:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9526:77:38"},"nodeType":"YulFunctionCall","src":"9526:79:38"},"nodeType":"YulExpressionStatement","src":"9526:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9496:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"9504:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9493:2:38"},"nodeType":"YulFunctionCall","src":"9493:30:38"},"nodeType":"YulIf","src":"9490:117:38"},{"nodeType":"YulAssignment","src":"9621:98:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9691:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"9702:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9687:3:38"},"nodeType":"YulFunctionCall","src":"9687:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9711:7:38"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"9639:47:38"},"nodeType":"YulFunctionCall","src":"9639:80:38"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"9621:6:38"},{"name":"value5","nodeType":"YulIdentifier","src":"9629:6:38"}]}]},{"nodeType":"YulBlock","src":"9739:298:38","statements":[{"nodeType":"YulVariableDeclaration","src":"9754:47:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9785:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"9796:3:38","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9781:3:38"},"nodeType":"YulFunctionCall","src":"9781:19:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9768:12:38"},"nodeType":"YulFunctionCall","src":"9768:33:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9758:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"9848:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9850:77:38"},"nodeType":"YulFunctionCall","src":"9850:79:38"},"nodeType":"YulExpressionStatement","src":"9850:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9820:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"9828:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9817:2:38"},"nodeType":"YulFunctionCall","src":"9817:30:38"},"nodeType":"YulIf","src":"9814:117:38"},{"nodeType":"YulAssignment","src":"9945:82:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9999:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"10010:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9995:3:38"},"nodeType":"YulFunctionCall","src":"9995:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10019:7:38"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"9963:31:38"},"nodeType":"YulFunctionCall","src":"9963:64:38"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"9945:6:38"},{"name":"value7","nodeType":"YulIdentifier","src":"9953:6:38"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8612:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8623:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8635:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8643:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8651:6:38","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8659:6:38","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8667:6:38","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8675:6:38","type":""},{"name":"value6","nodeType":"YulTypedName","src":"8683:6:38","type":""},{"name":"value7","nodeType":"YulTypedName","src":"8691:6:38","type":""}],"src":"8475:1569:38"},{"body":{"nodeType":"YulBlock","src":"10095:32:38","statements":[{"nodeType":"YulAssignment","src":"10105:16:38","value":{"name":"value","nodeType":"YulIdentifier","src":"10116:5:38"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10105:7:38"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10077:5:38","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10087:7:38","type":""}],"src":"10050:77:38"},{"body":{"nodeType":"YulBlock","src":"10176:79:38","statements":[{"body":{"nodeType":"YulBlock","src":"10233:16:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10242:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10245:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10235:6:38"},"nodeType":"YulFunctionCall","src":"10235:12:38"},"nodeType":"YulExpressionStatement","src":"10235:12:38"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10199:5:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10224:5:38"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"10206:17:38"},"nodeType":"YulFunctionCall","src":"10206:24:38"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10196:2:38"},"nodeType":"YulFunctionCall","src":"10196:35:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10189:6:38"},"nodeType":"YulFunctionCall","src":"10189:43:38"},"nodeType":"YulIf","src":"10186:63:38"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10169:5:38","type":""}],"src":"10133:122:38"},{"body":{"nodeType":"YulBlock","src":"10313:87:38","statements":[{"nodeType":"YulAssignment","src":"10323:29:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10345:6:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10332:12:38"},"nodeType":"YulFunctionCall","src":"10332:20:38"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10323:5:38"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10388:5:38"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"10361:26:38"},"nodeType":"YulFunctionCall","src":"10361:33:38"},"nodeType":"YulExpressionStatement","src":"10361:33:38"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10291:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"10299:3:38","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10307:5:38","type":""}],"src":"10261:139:38"},{"body":{"nodeType":"YulBlock","src":"10489:391:38","statements":[{"body":{"nodeType":"YulBlock","src":"10535:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10537:77:38"},"nodeType":"YulFunctionCall","src":"10537:79:38"},"nodeType":"YulExpressionStatement","src":"10537:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10510:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"10519:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10506:3:38"},"nodeType":"YulFunctionCall","src":"10506:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"10531:2:38","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10502:3:38"},"nodeType":"YulFunctionCall","src":"10502:32:38"},"nodeType":"YulIf","src":"10499:119:38"},{"nodeType":"YulBlock","src":"10628:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"10643:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"10657:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10647:6:38","type":""}]},{"nodeType":"YulAssignment","src":"10672:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10707:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"10718:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10703:3:38"},"nodeType":"YulFunctionCall","src":"10703:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10727:7:38"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10682:20:38"},"nodeType":"YulFunctionCall","src":"10682:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10672:6:38"}]}]},{"nodeType":"YulBlock","src":"10755:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"10770:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"10784:2:38","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10774:6:38","type":""}]},{"nodeType":"YulAssignment","src":"10800:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10835:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"10846:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10831:3:38"},"nodeType":"YulFunctionCall","src":"10831:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10855:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10810:20:38"},"nodeType":"YulFunctionCall","src":"10810:53:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10800:6:38"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10451:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10462:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10474:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10482:6:38","type":""}],"src":"10406:474:38"},{"body":{"nodeType":"YulBlock","src":"10952:263:38","statements":[{"body":{"nodeType":"YulBlock","src":"10998:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11000:77:38"},"nodeType":"YulFunctionCall","src":"11000:79:38"},"nodeType":"YulExpressionStatement","src":"11000:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10973:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"10982:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10969:3:38"},"nodeType":"YulFunctionCall","src":"10969:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"10994:2:38","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10965:3:38"},"nodeType":"YulFunctionCall","src":"10965:32:38"},"nodeType":"YulIf","src":"10962:119:38"},{"nodeType":"YulBlock","src":"11091:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"11106:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"11120:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11110:6:38","type":""}]},{"nodeType":"YulAssignment","src":"11135:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11170:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"11181:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11166:3:38"},"nodeType":"YulFunctionCall","src":"11166:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11190:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11145:20:38"},"nodeType":"YulFunctionCall","src":"11145:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11135:6:38"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10922:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10933:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10945:6:38","type":""}],"src":"10886:329:38"},{"body":{"nodeType":"YulBlock","src":"11286:53:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11303:3:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11326:5:38"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"11308:17:38"},"nodeType":"YulFunctionCall","src":"11308:24:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11296:6:38"},"nodeType":"YulFunctionCall","src":"11296:37:38"},"nodeType":"YulExpressionStatement","src":"11296:37:38"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11274:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11281:3:38","type":""}],"src":"11221:118:38"},{"body":{"nodeType":"YulBlock","src":"11443:124:38","statements":[{"nodeType":"YulAssignment","src":"11453:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11465:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"11476:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11461:3:38"},"nodeType":"YulFunctionCall","src":"11461:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11453:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11533:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11546:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"11557:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11542:3:38"},"nodeType":"YulFunctionCall","src":"11542:17:38"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"11489:43:38"},"nodeType":"YulFunctionCall","src":"11489:71:38"},"nodeType":"YulExpressionStatement","src":"11489:71:38"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11415:9:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11427:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11438:4:38","type":""}],"src":"11345:222:38"},{"body":{"nodeType":"YulBlock","src":"11680:478:38","statements":[{"body":{"nodeType":"YulBlock","src":"11729:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"11731:77:38"},"nodeType":"YulFunctionCall","src":"11731:79:38"},"nodeType":"YulExpressionStatement","src":"11731:79:38"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11708:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"11716:4:38","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11704:3:38"},"nodeType":"YulFunctionCall","src":"11704:17:38"},{"name":"end","nodeType":"YulIdentifier","src":"11723:3:38"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11700:3:38"},"nodeType":"YulFunctionCall","src":"11700:27:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11693:6:38"},"nodeType":"YulFunctionCall","src":"11693:35:38"},"nodeType":"YulIf","src":"11690:122:38"},{"nodeType":"YulAssignment","src":"11821:30:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11844:6:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11831:12:38"},"nodeType":"YulFunctionCall","src":"11831:20:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11821:6:38"}]},{"body":{"nodeType":"YulBlock","src":"11894:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"11896:77:38"},"nodeType":"YulFunctionCall","src":"11896:79:38"},"nodeType":"YulExpressionStatement","src":"11896:79:38"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11866:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"11874:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11863:2:38"},"nodeType":"YulFunctionCall","src":"11863:30:38"},"nodeType":"YulIf","src":"11860:117:38"},{"nodeType":"YulAssignment","src":"11986:29:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12002:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"12010:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11998:3:38"},"nodeType":"YulFunctionCall","src":"11998:17:38"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"11986:8:38"}]},{"body":{"nodeType":"YulBlock","src":"12069:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"12071:77:38"},"nodeType":"YulFunctionCall","src":"12071:79:38"},"nodeType":"YulExpressionStatement","src":"12071:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"12034:8:38"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12048:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"12056:4:38","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12044:3:38"},"nodeType":"YulFunctionCall","src":"12044:17:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12030:3:38"},"nodeType":"YulFunctionCall","src":"12030:32:38"},{"name":"end","nodeType":"YulIdentifier","src":"12064:3:38"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12027:2:38"},"nodeType":"YulFunctionCall","src":"12027:41:38"},"nodeType":"YulIf","src":"12024:128:38"}]},"name":"abi_decode_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11647:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"11655:3:38","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"11663:8:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"11673:6:38","type":""}],"src":"11590:568:38"},{"body":{"nodeType":"YulBlock","src":"12317:781:38","statements":[{"body":{"nodeType":"YulBlock","src":"12363:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12365:77:38"},"nodeType":"YulFunctionCall","src":"12365:79:38"},"nodeType":"YulExpressionStatement","src":"12365:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12338:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"12347:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12334:3:38"},"nodeType":"YulFunctionCall","src":"12334:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"12359:2:38","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12330:3:38"},"nodeType":"YulFunctionCall","src":"12330:32:38"},"nodeType":"YulIf","src":"12327:119:38"},{"nodeType":"YulBlock","src":"12456:312:38","statements":[{"nodeType":"YulVariableDeclaration","src":"12471:45:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12502:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"12513:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12498:3:38"},"nodeType":"YulFunctionCall","src":"12498:17:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12485:12:38"},"nodeType":"YulFunctionCall","src":"12485:31:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12475:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"12563:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"12565:77:38"},"nodeType":"YulFunctionCall","src":"12565:79:38"},"nodeType":"YulExpressionStatement","src":"12565:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12535:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"12543:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12532:2:38"},"nodeType":"YulFunctionCall","src":"12532:30:38"},"nodeType":"YulIf","src":"12529:117:38"},{"nodeType":"YulAssignment","src":"12660:98:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12730:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"12741:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12726:3:38"},"nodeType":"YulFunctionCall","src":"12726:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12750:7:38"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"12678:47:38"},"nodeType":"YulFunctionCall","src":"12678:80:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12660:6:38"},{"name":"value1","nodeType":"YulIdentifier","src":"12668:6:38"}]}]},{"nodeType":"YulBlock","src":"12778:313:38","statements":[{"nodeType":"YulVariableDeclaration","src":"12793:46:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12824:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"12835:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12820:3:38"},"nodeType":"YulFunctionCall","src":"12820:18:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12807:12:38"},"nodeType":"YulFunctionCall","src":"12807:32:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12797:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"12886:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"12888:77:38"},"nodeType":"YulFunctionCall","src":"12888:79:38"},"nodeType":"YulExpressionStatement","src":"12888:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12858:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"12866:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12855:2:38"},"nodeType":"YulFunctionCall","src":"12855:30:38"},"nodeType":"YulIf","src":"12852:117:38"},{"nodeType":"YulAssignment","src":"12983:98:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13053:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"13064:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13049:3:38"},"nodeType":"YulFunctionCall","src":"13049:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13073:7:38"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"13001:47:38"},"nodeType":"YulFunctionCall","src":"13001:80:38"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12983:6:38"},{"name":"value3","nodeType":"YulIdentifier","src":"12991:6:38"}]}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12263:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12274:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12286:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12294:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12302:6:38","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12310:6:38","type":""}],"src":"12164:934:38"},{"body":{"nodeType":"YulBlock","src":"13178:40:38","statements":[{"nodeType":"YulAssignment","src":"13189:22:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13205:5:38"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13199:5:38"},"nodeType":"YulFunctionCall","src":"13199:12:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13189:6:38"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13161:5:38","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"13171:6:38","type":""}],"src":"13104:114:38"},{"body":{"nodeType":"YulBlock","src":"13335:73:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13352:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"13357:6:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13345:6:38"},"nodeType":"YulFunctionCall","src":"13345:19:38"},"nodeType":"YulExpressionStatement","src":"13345:19:38"},{"nodeType":"YulAssignment","src":"13373:29:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13392:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"13397:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13388:3:38"},"nodeType":"YulFunctionCall","src":"13388:14:38"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"13373:11:38"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13307:3:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"13312:6:38","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"13323:11:38","type":""}],"src":"13224:184:38"},{"body":{"nodeType":"YulBlock","src":"13486:60:38","statements":[{"nodeType":"YulAssignment","src":"13496:11:38","value":{"name":"ptr","nodeType":"YulIdentifier","src":"13504:3:38"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"13496:4:38"}]},{"nodeType":"YulAssignment","src":"13517:22:38","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"13529:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"13534:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13525:3:38"},"nodeType":"YulFunctionCall","src":"13525:14:38"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"13517:4:38"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"13473:3:38","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"13481:4:38","type":""}],"src":"13414:132:38"},{"body":{"nodeType":"YulBlock","src":"13607:53:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13624:3:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13647:5:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13629:17:38"},"nodeType":"YulFunctionCall","src":"13629:24:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13617:6:38"},"nodeType":"YulFunctionCall","src":"13617:37:38"},"nodeType":"YulExpressionStatement","src":"13617:37:38"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13595:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13602:3:38","type":""}],"src":"13552:108:38"},{"body":{"nodeType":"YulBlock","src":"13746:99:38","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13790:6:38"},{"name":"pos","nodeType":"YulIdentifier","src":"13798:3:38"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"13756:33:38"},"nodeType":"YulFunctionCall","src":"13756:46:38"},"nodeType":"YulExpressionStatement","src":"13756:46:38"},{"nodeType":"YulAssignment","src":"13811:28:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13829:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"13834:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13825:3:38"},"nodeType":"YulFunctionCall","src":"13825:14:38"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"13811:10:38"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"13719:6:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13727:3:38","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"13735:10:38","type":""}],"src":"13666:179:38"},{"body":{"nodeType":"YulBlock","src":"13926:38:38","statements":[{"nodeType":"YulAssignment","src":"13936:22:38","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"13948:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"13953:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13944:3:38"},"nodeType":"YulFunctionCall","src":"13944:14:38"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"13936:4:38"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"13913:3:38","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"13921:4:38","type":""}],"src":"13851:113:38"},{"body":{"nodeType":"YulBlock","src":"14124:608:38","statements":[{"nodeType":"YulVariableDeclaration","src":"14134:68:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14196:5:38"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"14148:47:38"},"nodeType":"YulFunctionCall","src":"14148:54:38"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14138:6:38","type":""}]},{"nodeType":"YulAssignment","src":"14211:93:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14292:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"14297:6:38"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14218:73:38"},"nodeType":"YulFunctionCall","src":"14218:86:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14211:3:38"}]},{"nodeType":"YulVariableDeclaration","src":"14313:71:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14378:5:38"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"14328:49:38"},"nodeType":"YulFunctionCall","src":"14328:56:38"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"14317:7:38","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14393:21:38","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"14407:7:38"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"14397:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"14483:224:38","statements":[{"nodeType":"YulVariableDeclaration","src":"14497:34:38","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"14524:6:38"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14518:5:38"},"nodeType":"YulFunctionCall","src":"14518:13:38"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"14501:13:38","type":""}]},{"nodeType":"YulAssignment","src":"14544:70:38","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"14595:13:38"},{"name":"pos","nodeType":"YulIdentifier","src":"14610:3:38"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"14551:43:38"},"nodeType":"YulFunctionCall","src":"14551:63:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14544:3:38"}]},{"nodeType":"YulAssignment","src":"14627:70:38","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"14690:6:38"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"14637:52:38"},"nodeType":"YulFunctionCall","src":"14637:60:38"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"14627:6:38"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14445:1:38"},{"name":"length","nodeType":"YulIdentifier","src":"14448:6:38"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14442:2:38"},"nodeType":"YulFunctionCall","src":"14442:13:38"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14456:18:38","statements":[{"nodeType":"YulAssignment","src":"14458:14:38","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14467:1:38"},{"kind":"number","nodeType":"YulLiteral","src":"14470:1:38","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14463:3:38"},"nodeType":"YulFunctionCall","src":"14463:9:38"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"14458:1:38"}]}]},"pre":{"nodeType":"YulBlock","src":"14427:14:38","statements":[{"nodeType":"YulVariableDeclaration","src":"14429:10:38","value":{"kind":"number","nodeType":"YulLiteral","src":"14438:1:38","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"14433:1:38","type":""}]}]},"src":"14423:284:38"},{"nodeType":"YulAssignment","src":"14716:10:38","value":{"name":"pos","nodeType":"YulIdentifier","src":"14723:3:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14716:3:38"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14103:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14110:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14119:3:38","type":""}],"src":"14000:732:38"},{"body":{"nodeType":"YulBlock","src":"14886:225:38","statements":[{"nodeType":"YulAssignment","src":"14896:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14908:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"14919:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14904:3:38"},"nodeType":"YulFunctionCall","src":"14904:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14896:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14943:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"14954:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14939:3:38"},"nodeType":"YulFunctionCall","src":"14939:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14962:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"14968:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14958:3:38"},"nodeType":"YulFunctionCall","src":"14958:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14932:6:38"},"nodeType":"YulFunctionCall","src":"14932:47:38"},"nodeType":"YulExpressionStatement","src":"14932:47:38"},{"nodeType":"YulAssignment","src":"14988:116:38","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15090:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"15099:4:38"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14996:93:38"},"nodeType":"YulFunctionCall","src":"14996:108:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14988:4:38"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14858:9:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14870:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14881:4:38","type":""}],"src":"14738:373:38"},{"body":{"nodeType":"YulBlock","src":"15253:827:38","statements":[{"body":{"nodeType":"YulBlock","src":"15300:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15302:77:38"},"nodeType":"YulFunctionCall","src":"15302:79:38"},"nodeType":"YulExpressionStatement","src":"15302:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15274:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"15283:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15270:3:38"},"nodeType":"YulFunctionCall","src":"15270:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"15295:3:38","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15266:3:38"},"nodeType":"YulFunctionCall","src":"15266:33:38"},"nodeType":"YulIf","src":"15263:120:38"},{"nodeType":"YulBlock","src":"15393:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"15408:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"15422:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15412:6:38","type":""}]},{"nodeType":"YulAssignment","src":"15437:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15472:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"15483:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15468:3:38"},"nodeType":"YulFunctionCall","src":"15468:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15492:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15447:20:38"},"nodeType":"YulFunctionCall","src":"15447:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15437:6:38"}]}]},{"nodeType":"YulBlock","src":"15520:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"15535:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"15549:2:38","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15539:6:38","type":""}]},{"nodeType":"YulAssignment","src":"15565:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15600:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"15611:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15596:3:38"},"nodeType":"YulFunctionCall","src":"15596:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15620:7:38"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"15575:20:38"},"nodeType":"YulFunctionCall","src":"15575:53:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15565:6:38"}]}]},{"nodeType":"YulBlock","src":"15648:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"15663:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"15677:2:38","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15667:6:38","type":""}]},{"nodeType":"YulAssignment","src":"15693:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15728:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"15739:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15724:3:38"},"nodeType":"YulFunctionCall","src":"15724:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15748:7:38"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"15703:20:38"},"nodeType":"YulFunctionCall","src":"15703:53:38"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15693:6:38"}]}]},{"nodeType":"YulBlock","src":"15776:297:38","statements":[{"nodeType":"YulVariableDeclaration","src":"15791:46:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15822:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"15833:2:38","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15818:3:38"},"nodeType":"YulFunctionCall","src":"15818:18:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15805:12:38"},"nodeType":"YulFunctionCall","src":"15805:32:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15795:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"15884:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"15886:77:38"},"nodeType":"YulFunctionCall","src":"15886:79:38"},"nodeType":"YulExpressionStatement","src":"15886:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15856:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"15864:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15853:2:38"},"nodeType":"YulFunctionCall","src":"15853:30:38"},"nodeType":"YulIf","src":"15850:117:38"},{"nodeType":"YulAssignment","src":"15981:82:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16035:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"16046:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16031:3:38"},"nodeType":"YulFunctionCall","src":"16031:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16055:7:38"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"15999:31:38"},"nodeType":"YulFunctionCall","src":"15999:64:38"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15981:6:38"},{"name":"value4","nodeType":"YulIdentifier","src":"15989:6:38"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15191:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15202:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15214:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15222:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15230:6:38","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15238:6:38","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15246:6:38","type":""}],"src":"15117:963:38"},{"body":{"nodeType":"YulBlock","src":"16175:478:38","statements":[{"body":{"nodeType":"YulBlock","src":"16224:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"16226:77:38"},"nodeType":"YulFunctionCall","src":"16226:79:38"},"nodeType":"YulExpressionStatement","src":"16226:79:38"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16203:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"16211:4:38","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16199:3:38"},"nodeType":"YulFunctionCall","src":"16199:17:38"},{"name":"end","nodeType":"YulIdentifier","src":"16218:3:38"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16195:3:38"},"nodeType":"YulFunctionCall","src":"16195:27:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16188:6:38"},"nodeType":"YulFunctionCall","src":"16188:35:38"},"nodeType":"YulIf","src":"16185:122:38"},{"nodeType":"YulAssignment","src":"16316:30:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16339:6:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16326:12:38"},"nodeType":"YulFunctionCall","src":"16326:20:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16316:6:38"}]},{"body":{"nodeType":"YulBlock","src":"16389:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"16391:77:38"},"nodeType":"YulFunctionCall","src":"16391:79:38"},"nodeType":"YulExpressionStatement","src":"16391:79:38"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16361:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"16369:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16358:2:38"},"nodeType":"YulFunctionCall","src":"16358:30:38"},"nodeType":"YulIf","src":"16355:117:38"},{"nodeType":"YulAssignment","src":"16481:29:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16497:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"16505:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16493:3:38"},"nodeType":"YulFunctionCall","src":"16493:17:38"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"16481:8:38"}]},{"body":{"nodeType":"YulBlock","src":"16564:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"16566:77:38"},"nodeType":"YulFunctionCall","src":"16566:79:38"},"nodeType":"YulExpressionStatement","src":"16566:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"16529:8:38"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16543:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"16551:4:38","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16539:3:38"},"nodeType":"YulFunctionCall","src":"16539:17:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16525:3:38"},"nodeType":"YulFunctionCall","src":"16525:32:38"},{"name":"end","nodeType":"YulIdentifier","src":"16559:3:38"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16522:2:38"},"nodeType":"YulFunctionCall","src":"16522:41:38"},"nodeType":"YulIf","src":"16519:128:38"}]},"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16142:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"16150:3:38","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"16158:8:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"16168:6:38","type":""}],"src":"16100:553:38"},{"body":{"nodeType":"YulBlock","src":"16745:443:38","statements":[{"body":{"nodeType":"YulBlock","src":"16791:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"16793:77:38"},"nodeType":"YulFunctionCall","src":"16793:79:38"},"nodeType":"YulExpressionStatement","src":"16793:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16766:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"16775:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16762:3:38"},"nodeType":"YulFunctionCall","src":"16762:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"16787:2:38","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16758:3:38"},"nodeType":"YulFunctionCall","src":"16758:32:38"},"nodeType":"YulIf","src":"16755:119:38"},{"nodeType":"YulBlock","src":"16884:297:38","statements":[{"nodeType":"YulVariableDeclaration","src":"16899:45:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16930:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"16941:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16926:3:38"},"nodeType":"YulFunctionCall","src":"16926:17:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16913:12:38"},"nodeType":"YulFunctionCall","src":"16913:31:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16903:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"16991:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"16993:77:38"},"nodeType":"YulFunctionCall","src":"16993:79:38"},"nodeType":"YulExpressionStatement","src":"16993:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16963:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"16971:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16960:2:38"},"nodeType":"YulFunctionCall","src":"16960:30:38"},"nodeType":"YulIf","src":"16957:117:38"},{"nodeType":"YulAssignment","src":"17088:83:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17143:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"17154:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17139:3:38"},"nodeType":"YulFunctionCall","src":"17139:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17163:7:38"}],"functionName":{"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulIdentifier","src":"17106:32:38"},"nodeType":"YulFunctionCall","src":"17106:65:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17088:6:38"},{"name":"value1","nodeType":"YulIdentifier","src":"17096:6:38"}]}]}]},"name":"abi_decode_tuple_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16707:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16718:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16730:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16738:6:38","type":""}],"src":"16659:529:38"},{"body":{"nodeType":"YulBlock","src":"17364:909:38","statements":[{"body":{"nodeType":"YulBlock","src":"17410:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"17412:77:38"},"nodeType":"YulFunctionCall","src":"17412:79:38"},"nodeType":"YulExpressionStatement","src":"17412:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17385:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"17394:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17381:3:38"},"nodeType":"YulFunctionCall","src":"17381:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"17406:2:38","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17377:3:38"},"nodeType":"YulFunctionCall","src":"17377:32:38"},"nodeType":"YulIf","src":"17374:119:38"},{"nodeType":"YulBlock","src":"17503:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"17518:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"17532:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17522:6:38","type":""}]},{"nodeType":"YulAssignment","src":"17547:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17582:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"17593:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17578:3:38"},"nodeType":"YulFunctionCall","src":"17578:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17602:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"17557:20:38"},"nodeType":"YulFunctionCall","src":"17557:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17547:6:38"}]}]},{"nodeType":"YulBlock","src":"17630:313:38","statements":[{"nodeType":"YulVariableDeclaration","src":"17645:46:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17676:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"17687:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17672:3:38"},"nodeType":"YulFunctionCall","src":"17672:18:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17659:12:38"},"nodeType":"YulFunctionCall","src":"17659:32:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17649:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"17738:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"17740:77:38"},"nodeType":"YulFunctionCall","src":"17740:79:38"},"nodeType":"YulExpressionStatement","src":"17740:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17710:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"17718:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17707:2:38"},"nodeType":"YulFunctionCall","src":"17707:30:38"},"nodeType":"YulIf","src":"17704:117:38"},{"nodeType":"YulAssignment","src":"17835:98:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17905:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"17916:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17901:3:38"},"nodeType":"YulFunctionCall","src":"17901:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17925:7:38"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"17853:47:38"},"nodeType":"YulFunctionCall","src":"17853:80:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"17835:6:38"},{"name":"value2","nodeType":"YulIdentifier","src":"17843:6:38"}]}]},{"nodeType":"YulBlock","src":"17953:313:38","statements":[{"nodeType":"YulVariableDeclaration","src":"17968:46:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17999:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"18010:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17995:3:38"},"nodeType":"YulFunctionCall","src":"17995:18:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17982:12:38"},"nodeType":"YulFunctionCall","src":"17982:32:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17972:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"18061:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"18063:77:38"},"nodeType":"YulFunctionCall","src":"18063:79:38"},"nodeType":"YulExpressionStatement","src":"18063:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18033:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"18041:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18030:2:38"},"nodeType":"YulFunctionCall","src":"18030:30:38"},"nodeType":"YulIf","src":"18027:117:38"},{"nodeType":"YulAssignment","src":"18158:98:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18228:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"18239:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18224:3:38"},"nodeType":"YulFunctionCall","src":"18224:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18248:7:38"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"18176:47:38"},"nodeType":"YulFunctionCall","src":"18176:80:38"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"18158:6:38"},{"name":"value4","nodeType":"YulIdentifier","src":"18166:6:38"}]}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17302:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17313:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17325:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17333:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17341:6:38","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17349:6:38","type":""},{"name":"value4","nodeType":"YulTypedName","src":"17357:6:38","type":""}],"src":"17194:1079:38"},{"body":{"nodeType":"YulBlock","src":"18345:263:38","statements":[{"body":{"nodeType":"YulBlock","src":"18391:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18393:77:38"},"nodeType":"YulFunctionCall","src":"18393:79:38"},"nodeType":"YulExpressionStatement","src":"18393:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18366:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"18375:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18362:3:38"},"nodeType":"YulFunctionCall","src":"18362:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"18387:2:38","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18358:3:38"},"nodeType":"YulFunctionCall","src":"18358:32:38"},"nodeType":"YulIf","src":"18355:119:38"},{"nodeType":"YulBlock","src":"18484:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"18499:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"18513:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18503:6:38","type":""}]},{"nodeType":"YulAssignment","src":"18528:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18563:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"18574:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18559:3:38"},"nodeType":"YulFunctionCall","src":"18559:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18583:7:38"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"18538:20:38"},"nodeType":"YulFunctionCall","src":"18538:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18528:6:38"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18315:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18326:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18338:6:38","type":""}],"src":"18279:329:38"},{"body":{"nodeType":"YulBlock","src":"18679:53:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18696:3:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18719:5:38"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"18701:17:38"},"nodeType":"YulFunctionCall","src":"18701:24:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18689:6:38"},"nodeType":"YulFunctionCall","src":"18689:37:38"},"nodeType":"YulExpressionStatement","src":"18689:37:38"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18667:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18674:3:38","type":""}],"src":"18614:118:38"},{"body":{"nodeType":"YulBlock","src":"18836:124:38","statements":[{"nodeType":"YulAssignment","src":"18846:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18858:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"18869:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18854:3:38"},"nodeType":"YulFunctionCall","src":"18854:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18846:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18926:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18939:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"18950:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18935:3:38"},"nodeType":"YulFunctionCall","src":"18935:17:38"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18882:43:38"},"nodeType":"YulFunctionCall","src":"18882:71:38"},"nodeType":"YulExpressionStatement","src":"18882:71:38"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18808:9:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18820:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18831:4:38","type":""}],"src":"18738:222:38"},{"body":{"nodeType":"YulBlock","src":"19006:76:38","statements":[{"body":{"nodeType":"YulBlock","src":"19060:16:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19069:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19072:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19062:6:38"},"nodeType":"YulFunctionCall","src":"19062:12:38"},"nodeType":"YulExpressionStatement","src":"19062:12:38"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19029:5:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19051:5:38"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"19036:14:38"},"nodeType":"YulFunctionCall","src":"19036:21:38"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19026:2:38"},"nodeType":"YulFunctionCall","src":"19026:32:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19019:6:38"},"nodeType":"YulFunctionCall","src":"19019:40:38"},"nodeType":"YulIf","src":"19016:60:38"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18999:5:38","type":""}],"src":"18966:116:38"},{"body":{"nodeType":"YulBlock","src":"19137:84:38","statements":[{"nodeType":"YulAssignment","src":"19147:29:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19169:6:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19156:12:38"},"nodeType":"YulFunctionCall","src":"19156:20:38"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19147:5:38"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19209:5:38"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"19185:23:38"},"nodeType":"YulFunctionCall","src":"19185:30:38"},"nodeType":"YulExpressionStatement","src":"19185:30:38"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"19115:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"19123:3:38","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"19131:5:38","type":""}],"src":"19088:133:38"},{"body":{"nodeType":"YulBlock","src":"19307:388:38","statements":[{"body":{"nodeType":"YulBlock","src":"19353:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19355:77:38"},"nodeType":"YulFunctionCall","src":"19355:79:38"},"nodeType":"YulExpressionStatement","src":"19355:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19328:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"19337:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19324:3:38"},"nodeType":"YulFunctionCall","src":"19324:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"19349:2:38","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19320:3:38"},"nodeType":"YulFunctionCall","src":"19320:32:38"},"nodeType":"YulIf","src":"19317:119:38"},{"nodeType":"YulBlock","src":"19446:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"19461:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"19475:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19465:6:38","type":""}]},{"nodeType":"YulAssignment","src":"19490:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19525:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"19536:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19521:3:38"},"nodeType":"YulFunctionCall","src":"19521:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19545:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19500:20:38"},"nodeType":"YulFunctionCall","src":"19500:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19490:6:38"}]}]},{"nodeType":"YulBlock","src":"19573:115:38","statements":[{"nodeType":"YulVariableDeclaration","src":"19588:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"19602:2:38","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19592:6:38","type":""}]},{"nodeType":"YulAssignment","src":"19618:60:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19650:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"19661:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19646:3:38"},"nodeType":"YulFunctionCall","src":"19646:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19670:7:38"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"19628:17:38"},"nodeType":"YulFunctionCall","src":"19628:50:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"19618:6:38"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19269:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19280:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19292:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19300:6:38","type":""}],"src":"19227:468:38"},{"body":{"nodeType":"YulBlock","src":"19784:391:38","statements":[{"body":{"nodeType":"YulBlock","src":"19830:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19832:77:38"},"nodeType":"YulFunctionCall","src":"19832:79:38"},"nodeType":"YulExpressionStatement","src":"19832:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19805:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"19814:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19801:3:38"},"nodeType":"YulFunctionCall","src":"19801:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"19826:2:38","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19797:3:38"},"nodeType":"YulFunctionCall","src":"19797:32:38"},"nodeType":"YulIf","src":"19794:119:38"},{"nodeType":"YulBlock","src":"19923:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"19938:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"19952:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19942:6:38","type":""}]},{"nodeType":"YulAssignment","src":"19967:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20002:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"20013:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19998:3:38"},"nodeType":"YulFunctionCall","src":"19998:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20022:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19977:20:38"},"nodeType":"YulFunctionCall","src":"19977:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19967:6:38"}]}]},{"nodeType":"YulBlock","src":"20050:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"20065:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"20079:2:38","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20069:6:38","type":""}]},{"nodeType":"YulAssignment","src":"20095:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20130:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"20141:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20126:3:38"},"nodeType":"YulFunctionCall","src":"20126:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20150:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20105:20:38"},"nodeType":"YulFunctionCall","src":"20105:53:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20095:6:38"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19746:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19757:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19769:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19777:6:38","type":""}],"src":"19701:474:38"},{"body":{"nodeType":"YulBlock","src":"20334:956:38","statements":[{"body":{"nodeType":"YulBlock","src":"20381:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"20383:77:38"},"nodeType":"YulFunctionCall","src":"20383:79:38"},"nodeType":"YulExpressionStatement","src":"20383:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20355:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"20364:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20351:3:38"},"nodeType":"YulFunctionCall","src":"20351:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"20376:3:38","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20347:3:38"},"nodeType":"YulFunctionCall","src":"20347:33:38"},"nodeType":"YulIf","src":"20344:120:38"},{"nodeType":"YulBlock","src":"20474:117:38","statements":[{"nodeType":"YulVariableDeclaration","src":"20489:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"20503:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20493:6:38","type":""}]},{"nodeType":"YulAssignment","src":"20518:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20553:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"20564:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20549:3:38"},"nodeType":"YulFunctionCall","src":"20549:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20573:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20528:20:38"},"nodeType":"YulFunctionCall","src":"20528:53:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20518:6:38"}]}]},{"nodeType":"YulBlock","src":"20601:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"20616:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"20630:2:38","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20620:6:38","type":""}]},{"nodeType":"YulAssignment","src":"20646:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20681:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"20692:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20677:3:38"},"nodeType":"YulFunctionCall","src":"20677:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20701:7:38"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20656:20:38"},"nodeType":"YulFunctionCall","src":"20656:53:38"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20646:6:38"}]}]},{"nodeType":"YulBlock","src":"20729:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"20744:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"20758:2:38","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20748:6:38","type":""}]},{"nodeType":"YulAssignment","src":"20774:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20809:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"20820:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20805:3:38"},"nodeType":"YulFunctionCall","src":"20805:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20829:7:38"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"20784:20:38"},"nodeType":"YulFunctionCall","src":"20784:53:38"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"20774:6:38"}]}]},{"nodeType":"YulBlock","src":"20857:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"20872:16:38","value":{"kind":"number","nodeType":"YulLiteral","src":"20886:2:38","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20876:6:38","type":""}]},{"nodeType":"YulAssignment","src":"20902:63:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20937:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"20948:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20933:3:38"},"nodeType":"YulFunctionCall","src":"20933:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20957:7:38"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"20912:20:38"},"nodeType":"YulFunctionCall","src":"20912:53:38"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"20902:6:38"}]}]},{"nodeType":"YulBlock","src":"20985:298:38","statements":[{"nodeType":"YulVariableDeclaration","src":"21000:47:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21031:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"21042:3:38","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21027:3:38"},"nodeType":"YulFunctionCall","src":"21027:19:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"21014:12:38"},"nodeType":"YulFunctionCall","src":"21014:33:38"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21004:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"21094:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"21096:77:38"},"nodeType":"YulFunctionCall","src":"21096:79:38"},"nodeType":"YulExpressionStatement","src":"21096:79:38"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"21066:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"21074:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21063:2:38"},"nodeType":"YulFunctionCall","src":"21063:30:38"},"nodeType":"YulIf","src":"21060:117:38"},{"nodeType":"YulAssignment","src":"21191:82:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21245:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"21256:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21241:3:38"},"nodeType":"YulFunctionCall","src":"21241:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21265:7:38"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"21209:31:38"},"nodeType":"YulFunctionCall","src":"21209:64:38"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"21191:6:38"},{"name":"value5","nodeType":"YulIdentifier","src":"21199:6:38"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20264:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20275:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20287:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20295:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20303:6:38","type":""},{"name":"value3","nodeType":"YulTypedName","src":"20311:6:38","type":""},{"name":"value4","nodeType":"YulTypedName","src":"20319:6:38","type":""},{"name":"value5","nodeType":"YulTypedName","src":"20327:6:38","type":""}],"src":"20181:1109:38"},{"body":{"nodeType":"YulBlock","src":"21402:59:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21424:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"21432:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21420:3:38"},"nodeType":"YulFunctionCall","src":"21420:14:38"},{"hexValue":"4f524e463a206e6f742061646d696e","kind":"string","nodeType":"YulLiteral","src":"21436:17:38","type":"","value":"ORNF: not admin"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21413:6:38"},"nodeType":"YulFunctionCall","src":"21413:41:38"},"nodeType":"YulExpressionStatement","src":"21413:41:38"}]},"name":"store_literal_in_memory_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21394:6:38","type":""}],"src":"21296:165:38"},{"body":{"nodeType":"YulBlock","src":"21613:220:38","statements":[{"nodeType":"YulAssignment","src":"21623:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21689:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"21694:2:38","type":"","value":"15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21630:58:38"},"nodeType":"YulFunctionCall","src":"21630:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21623:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21795:3:38"}],"functionName":{"name":"store_literal_in_memory_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f","nodeType":"YulIdentifier","src":"21706:88:38"},"nodeType":"YulFunctionCall","src":"21706:93:38"},"nodeType":"YulExpressionStatement","src":"21706:93:38"},{"nodeType":"YulAssignment","src":"21808:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21819:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"21824:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21815:3:38"},"nodeType":"YulFunctionCall","src":"21815:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21808:3:38"}]}]},"name":"abi_encode_t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21601:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21609:3:38","type":""}],"src":"21467:366:38"},{"body":{"nodeType":"YulBlock","src":"22010:248:38","statements":[{"nodeType":"YulAssignment","src":"22020:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22032:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"22043:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22028:3:38"},"nodeType":"YulFunctionCall","src":"22028:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22020:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22067:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"22078:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22063:3:38"},"nodeType":"YulFunctionCall","src":"22063:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22086:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"22092:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22082:3:38"},"nodeType":"YulFunctionCall","src":"22082:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22056:6:38"},"nodeType":"YulFunctionCall","src":"22056:47:38"},"nodeType":"YulExpressionStatement","src":"22056:47:38"},{"nodeType":"YulAssignment","src":"22112:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22246:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22120:124:38"},"nodeType":"YulFunctionCall","src":"22120:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22112:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21990:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22005:4:38","type":""}],"src":"21839:419:38"},{"body":{"nodeType":"YulBlock","src":"22370:65:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22392:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"22400:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22388:3:38"},"nodeType":"YulFunctionCall","src":"22388:14:38"},{"hexValue":"4f524e463a206e6f742073757065722061646d696e","kind":"string","nodeType":"YulLiteral","src":"22404:23:38","type":"","value":"ORNF: not super admin"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22381:6:38"},"nodeType":"YulFunctionCall","src":"22381:47:38"},"nodeType":"YulExpressionStatement","src":"22381:47:38"}]},"name":"store_literal_in_memory_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22362:6:38","type":""}],"src":"22264:171:38"},{"body":{"nodeType":"YulBlock","src":"22587:220:38","statements":[{"nodeType":"YulAssignment","src":"22597:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22663:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"22668:2:38","type":"","value":"21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22604:58:38"},"nodeType":"YulFunctionCall","src":"22604:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22597:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22769:3:38"}],"functionName":{"name":"store_literal_in_memory_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff","nodeType":"YulIdentifier","src":"22680:88:38"},"nodeType":"YulFunctionCall","src":"22680:93:38"},"nodeType":"YulExpressionStatement","src":"22680:93:38"},{"nodeType":"YulAssignment","src":"22782:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22793:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"22798:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22789:3:38"},"nodeType":"YulFunctionCall","src":"22789:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22782:3:38"}]}]},"name":"abi_encode_t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22575:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22583:3:38","type":""}],"src":"22441:366:38"},{"body":{"nodeType":"YulBlock","src":"22984:248:38","statements":[{"nodeType":"YulAssignment","src":"22994:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23006:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"23017:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23002:3:38"},"nodeType":"YulFunctionCall","src":"23002:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22994:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23041:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"23052:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23037:3:38"},"nodeType":"YulFunctionCall","src":"23037:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23060:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"23066:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23056:3:38"},"nodeType":"YulFunctionCall","src":"23056:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23030:6:38"},"nodeType":"YulFunctionCall","src":"23030:47:38"},"nodeType":"YulExpressionStatement","src":"23030:47:38"},{"nodeType":"YulAssignment","src":"23086:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23220:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23094:124:38"},"nodeType":"YulFunctionCall","src":"23094:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23086:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22964:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22979:4:38","type":""}],"src":"22813:419:38"},{"body":{"nodeType":"YulBlock","src":"23266:152:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23283:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23286:77:38","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23276:6:38"},"nodeType":"YulFunctionCall","src":"23276:88:38"},"nodeType":"YulExpressionStatement","src":"23276:88:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23380:1:38","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"23383:4:38","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23373:6:38"},"nodeType":"YulFunctionCall","src":"23373:15:38"},"nodeType":"YulExpressionStatement","src":"23373:15:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23404:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23407:4:38","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23397:6:38"},"nodeType":"YulFunctionCall","src":"23397:15:38"},"nodeType":"YulExpressionStatement","src":"23397:15:38"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"23238:180:38"},{"body":{"nodeType":"YulBlock","src":"23469:149:38","statements":[{"nodeType":"YulAssignment","src":"23479:25:38","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23502:1:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23484:17:38"},"nodeType":"YulFunctionCall","src":"23484:20:38"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"23479:1:38"}]},{"nodeType":"YulAssignment","src":"23513:25:38","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23536:1:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23518:17:38"},"nodeType":"YulFunctionCall","src":"23518:20:38"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"23513:1:38"}]},{"nodeType":"YulAssignment","src":"23547:17:38","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23559:1:38"},{"name":"y","nodeType":"YulIdentifier","src":"23562:1:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23555:3:38"},"nodeType":"YulFunctionCall","src":"23555:9:38"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"23547:4:38"}]},{"body":{"nodeType":"YulBlock","src":"23589:22:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23591:16:38"},"nodeType":"YulFunctionCall","src":"23591:18:38"},"nodeType":"YulExpressionStatement","src":"23591:18:38"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"23580:4:38"},{"name":"x","nodeType":"YulIdentifier","src":"23586:1:38"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23577:2:38"},"nodeType":"YulFunctionCall","src":"23577:11:38"},"nodeType":"YulIf","src":"23574:37:38"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"23455:1:38","type":""},{"name":"y","nodeType":"YulTypedName","src":"23458:1:38","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"23464:4:38","type":""}],"src":"23424:194:38"},{"body":{"nodeType":"YulBlock","src":"23778:288:38","statements":[{"nodeType":"YulAssignment","src":"23788:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23800:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"23811:2:38","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23796:3:38"},"nodeType":"YulFunctionCall","src":"23796:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23788:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23868:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23881:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"23892:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23877:3:38"},"nodeType":"YulFunctionCall","src":"23877:17:38"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"23824:43:38"},"nodeType":"YulFunctionCall","src":"23824:71:38"},"nodeType":"YulExpressionStatement","src":"23824:71:38"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23949:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23962:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"23973:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23958:3:38"},"nodeType":"YulFunctionCall","src":"23958:18:38"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23905:43:38"},"nodeType":"YulFunctionCall","src":"23905:72:38"},"nodeType":"YulExpressionStatement","src":"23905:72:38"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24031:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24044:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"24055:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24040:3:38"},"nodeType":"YulFunctionCall","src":"24040:18:38"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23987:43:38"},"nodeType":"YulFunctionCall","src":"23987:72:38"},"nodeType":"YulExpressionStatement","src":"23987:72:38"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23734:9:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23746:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23754:6:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23762:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23773:4:38","type":""}],"src":"23624:442:38"},{"body":{"nodeType":"YulBlock","src":"24178:75:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24200:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"24208:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24196:3:38"},"nodeType":"YulFunctionCall","src":"24196:14:38"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"24212:33:38","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24189:6:38"},"nodeType":"YulFunctionCall","src":"24189:57:38"},"nodeType":"YulExpressionStatement","src":"24189:57:38"}]},"name":"store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24170:6:38","type":""}],"src":"24072:181:38"},{"body":{"nodeType":"YulBlock","src":"24405:220:38","statements":[{"nodeType":"YulAssignment","src":"24415:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24481:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"24486:2:38","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24422:58:38"},"nodeType":"YulFunctionCall","src":"24422:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24415:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24587:3:38"}],"functionName":{"name":"store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","nodeType":"YulIdentifier","src":"24498:88:38"},"nodeType":"YulFunctionCall","src":"24498:93:38"},"nodeType":"YulExpressionStatement","src":"24498:93:38"},{"nodeType":"YulAssignment","src":"24600:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24611:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"24616:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24607:3:38"},"nodeType":"YulFunctionCall","src":"24607:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24600:3:38"}]}]},"name":"abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24393:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24401:3:38","type":""}],"src":"24259:366:38"},{"body":{"nodeType":"YulBlock","src":"24802:248:38","statements":[{"nodeType":"YulAssignment","src":"24812:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24824:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"24835:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24820:3:38"},"nodeType":"YulFunctionCall","src":"24820:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24812:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24859:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"24870:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24855:3:38"},"nodeType":"YulFunctionCall","src":"24855:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24878:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"24884:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24874:3:38"},"nodeType":"YulFunctionCall","src":"24874:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24848:6:38"},"nodeType":"YulFunctionCall","src":"24848:47:38"},"nodeType":"YulExpressionStatement","src":"24848:47:38"},{"nodeType":"YulAssignment","src":"24904:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25038:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24912:124:38"},"nodeType":"YulFunctionCall","src":"24912:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24904:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24782:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24797:4:38","type":""}],"src":"24631:419:38"},{"body":{"nodeType":"YulBlock","src":"25162:74:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25184:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"25192:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25180:3:38"},"nodeType":"YulFunctionCall","src":"25180:14:38"},{"hexValue":"455243313135353a2062616c616e6365206f662061646472657373283029","kind":"string","nodeType":"YulLiteral","src":"25196:32:38","type":"","value":"ERC1155: balance of address(0)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25173:6:38"},"nodeType":"YulFunctionCall","src":"25173:56:38"},"nodeType":"YulExpressionStatement","src":"25173:56:38"}]},"name":"store_literal_in_memory_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25154:6:38","type":""}],"src":"25056:180:38"},{"body":{"nodeType":"YulBlock","src":"25388:220:38","statements":[{"nodeType":"YulAssignment","src":"25398:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25464:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"25469:2:38","type":"","value":"30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25405:58:38"},"nodeType":"YulFunctionCall","src":"25405:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25398:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25570:3:38"}],"functionName":{"name":"store_literal_in_memory_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210","nodeType":"YulIdentifier","src":"25481:88:38"},"nodeType":"YulFunctionCall","src":"25481:93:38"},"nodeType":"YulExpressionStatement","src":"25481:93:38"},{"nodeType":"YulAssignment","src":"25583:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25594:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"25599:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25590:3:38"},"nodeType":"YulFunctionCall","src":"25590:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25583:3:38"}]}]},"name":"abi_encode_t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25376:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25384:3:38","type":""}],"src":"25242:366:38"},{"body":{"nodeType":"YulBlock","src":"25785:248:38","statements":[{"nodeType":"YulAssignment","src":"25795:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25807:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"25818:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25803:3:38"},"nodeType":"YulFunctionCall","src":"25803:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25795:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25842:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"25853:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25838:3:38"},"nodeType":"YulFunctionCall","src":"25838:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25861:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"25867:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25857:3:38"},"nodeType":"YulFunctionCall","src":"25857:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25831:6:38"},"nodeType":"YulFunctionCall","src":"25831:47:38"},"nodeType":"YulExpressionStatement","src":"25831:47:38"},{"nodeType":"YulAssignment","src":"25887:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26021:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25895:124:38"},"nodeType":"YulFunctionCall","src":"25895:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25887:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25765:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25780:4:38","type":""}],"src":"25614:419:38"},{"body":{"nodeType":"YulBlock","src":"26153:34:38","statements":[{"nodeType":"YulAssignment","src":"26163:18:38","value":{"name":"pos","nodeType":"YulIdentifier","src":"26178:3:38"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26163:11:38"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26125:3:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"26130:6:38","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26141:11:38","type":""}],"src":"26039:148:38"},{"body":{"nodeType":"YulBlock","src":"26299:68:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26321:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"26329:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26317:3:38"},"nodeType":"YulFunctionCall","src":"26317:14:38"},{"hexValue":"416363657373436f6e74726f6c3a206d697373696e672027","kind":"string","nodeType":"YulLiteral","src":"26333:26:38","type":"","value":"AccessControl: missing '"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26310:6:38"},"nodeType":"YulFunctionCall","src":"26310:50:38"},"nodeType":"YulExpressionStatement","src":"26310:50:38"}]},"name":"store_literal_in_memory_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26291:6:38","type":""}],"src":"26193:174:38"},{"body":{"nodeType":"YulBlock","src":"26537:238:38","statements":[{"nodeType":"YulAssignment","src":"26547:92:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26631:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"26636:2:38","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"26554:76:38"},"nodeType":"YulFunctionCall","src":"26554:85:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26547:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26737:3:38"}],"functionName":{"name":"store_literal_in_memory_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a","nodeType":"YulIdentifier","src":"26648:88:38"},"nodeType":"YulFunctionCall","src":"26648:93:38"},"nodeType":"YulExpressionStatement","src":"26648:93:38"},{"nodeType":"YulAssignment","src":"26750:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26761:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"26766:2:38","type":"","value":"24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26757:3:38"},"nodeType":"YulFunctionCall","src":"26757:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26750:3:38"}]}]},"name":"abi_encode_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26525:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26533:3:38","type":""}],"src":"26373:402:38"},{"body":{"nodeType":"YulBlock","src":"26891:280:38","statements":[{"nodeType":"YulVariableDeclaration","src":"26901:53:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26948:5:38"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"26915:32:38"},"nodeType":"YulFunctionCall","src":"26915:39:38"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26905:6:38","type":""}]},{"nodeType":"YulAssignment","src":"26963:96:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27047:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"27052:6:38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"26970:76:38"},"nodeType":"YulFunctionCall","src":"26970:89:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26963:3:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27107:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"27114:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27103:3:38"},"nodeType":"YulFunctionCall","src":"27103:16:38"},{"name":"pos","nodeType":"YulIdentifier","src":"27121:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"27126:6:38"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"27068:34:38"},"nodeType":"YulFunctionCall","src":"27068:65:38"},"nodeType":"YulExpressionStatement","src":"27068:65:38"},{"nodeType":"YulAssignment","src":"27142:23:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27153:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"27158:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27149:3:38"},"nodeType":"YulFunctionCall","src":"27149:16:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27142:3:38"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26872:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26879:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26887:3:38","type":""}],"src":"26781:390:38"},{"body":{"nodeType":"YulBlock","src":"27283:50:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27305:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"27313:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27301:3:38"},"nodeType":"YulFunctionCall","src":"27301:14:38"},{"hexValue":"2720726f6c65","kind":"string","nodeType":"YulLiteral","src":"27317:8:38","type":"","value":"' role"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27294:6:38"},"nodeType":"YulFunctionCall","src":"27294:32:38"},"nodeType":"YulExpressionStatement","src":"27294:32:38"}]},"name":"store_literal_in_memory_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27275:6:38","type":""}],"src":"27177:156:38"},{"body":{"nodeType":"YulBlock","src":"27503:236:38","statements":[{"nodeType":"YulAssignment","src":"27513:91:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27597:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"27602:1:38","type":"","value":"6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"27520:76:38"},"nodeType":"YulFunctionCall","src":"27520:84:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27513:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27702:3:38"}],"functionName":{"name":"store_literal_in_memory_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223","nodeType":"YulIdentifier","src":"27613:88:38"},"nodeType":"YulFunctionCall","src":"27613:93:38"},"nodeType":"YulExpressionStatement","src":"27613:93:38"},{"nodeType":"YulAssignment","src":"27715:18:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27726:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"27731:1:38","type":"","value":"6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27722:3:38"},"nodeType":"YulFunctionCall","src":"27722:11:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27715:3:38"}]}]},"name":"abi_encode_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27491:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27499:3:38","type":""}],"src":"27339:400:38"},{"body":{"nodeType":"YulBlock","src":"28083:469:38","statements":[{"nodeType":"YulAssignment","src":"28094:155:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28245:3:38"}],"functionName":{"name":"abi_encode_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28101:142:38"},"nodeType":"YulFunctionCall","src":"28101:148:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28094:3:38"}]},{"nodeType":"YulAssignment","src":"28259:102:38","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28348:6:38"},{"name":"pos","nodeType":"YulIdentifier","src":"28357:3:38"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28266:81:38"},"nodeType":"YulFunctionCall","src":"28266:95:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28259:3:38"}]},{"nodeType":"YulAssignment","src":"28371:155:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28522:3:38"}],"functionName":{"name":"abi_encode_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28378:142:38"},"nodeType":"YulFunctionCall","src":"28378:148:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28371:3:38"}]},{"nodeType":"YulAssignment","src":"28536:10:38","value":{"name":"pos","nodeType":"YulIdentifier","src":"28543:3:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28536:3:38"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_t_string_memory_ptr_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28062:3:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28068:6:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28079:3:38","type":""}],"src":"27745:807:38"},{"body":{"nodeType":"YulBlock","src":"28664:71:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28686:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"28694:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28682:3:38"},"nodeType":"YulFunctionCall","src":"28682:14:38"},{"hexValue":"455243313135353a206d696e7420746f2061646472657373283029","kind":"string","nodeType":"YulLiteral","src":"28698:29:38","type":"","value":"ERC1155: mint to address(0)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28675:6:38"},"nodeType":"YulFunctionCall","src":"28675:53:38"},"nodeType":"YulExpressionStatement","src":"28675:53:38"}]},"name":"store_literal_in_memory_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28656:6:38","type":""}],"src":"28558:177:38"},{"body":{"nodeType":"YulBlock","src":"28887:220:38","statements":[{"nodeType":"YulAssignment","src":"28897:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28963:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"28968:2:38","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28904:58:38"},"nodeType":"YulFunctionCall","src":"28904:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28897:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29069:3:38"}],"functionName":{"name":"store_literal_in_memory_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad","nodeType":"YulIdentifier","src":"28980:88:38"},"nodeType":"YulFunctionCall","src":"28980:93:38"},"nodeType":"YulExpressionStatement","src":"28980:93:38"},{"nodeType":"YulAssignment","src":"29082:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29093:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"29098:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29089:3:38"},"nodeType":"YulFunctionCall","src":"29089:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29082:3:38"}]}]},"name":"abi_encode_t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28875:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28883:3:38","type":""}],"src":"28741:366:38"},{"body":{"nodeType":"YulBlock","src":"29284:248:38","statements":[{"nodeType":"YulAssignment","src":"29294:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29306:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"29317:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29302:3:38"},"nodeType":"YulFunctionCall","src":"29302:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29294:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29341:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"29352:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29337:3:38"},"nodeType":"YulFunctionCall","src":"29337:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29360:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"29366:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29356:3:38"},"nodeType":"YulFunctionCall","src":"29356:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29330:6:38"},"nodeType":"YulFunctionCall","src":"29330:47:38"},"nodeType":"YulExpressionStatement","src":"29330:47:38"},{"nodeType":"YulAssignment","src":"29386:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29520:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29394:124:38"},"nodeType":"YulFunctionCall","src":"29394:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29386:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29264:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29279:4:38","type":""}],"src":"29113:419:38"},{"body":{"nodeType":"YulBlock","src":"29644:72:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29666:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"29674:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29662:3:38"},"nodeType":"YulFunctionCall","src":"29662:14:38"},{"hexValue":"455243313135353a20696e636f6e73697374656e7420617272617973","kind":"string","nodeType":"YulLiteral","src":"29678:30:38","type":"","value":"ERC1155: inconsistent arrays"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29655:6:38"},"nodeType":"YulFunctionCall","src":"29655:54:38"},"nodeType":"YulExpressionStatement","src":"29655:54:38"}]},"name":"store_literal_in_memory_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29636:6:38","type":""}],"src":"29538:178:38"},{"body":{"nodeType":"YulBlock","src":"29868:220:38","statements":[{"nodeType":"YulAssignment","src":"29878:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29944:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"29949:2:38","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29885:58:38"},"nodeType":"YulFunctionCall","src":"29885:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29878:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30050:3:38"}],"functionName":{"name":"store_literal_in_memory_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd","nodeType":"YulIdentifier","src":"29961:88:38"},"nodeType":"YulFunctionCall","src":"29961:93:38"},"nodeType":"YulExpressionStatement","src":"29961:93:38"},{"nodeType":"YulAssignment","src":"30063:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30074:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"30079:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30070:3:38"},"nodeType":"YulFunctionCall","src":"30070:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30063:3:38"}]}]},"name":"abi_encode_t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29856:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29864:3:38","type":""}],"src":"29722:366:38"},{"body":{"nodeType":"YulBlock","src":"30265:248:38","statements":[{"nodeType":"YulAssignment","src":"30275:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30287:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"30298:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30283:3:38"},"nodeType":"YulFunctionCall","src":"30283:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30275:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30322:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"30333:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30318:3:38"},"nodeType":"YulFunctionCall","src":"30318:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30341:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"30347:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30337:3:38"},"nodeType":"YulFunctionCall","src":"30337:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30311:6:38"},"nodeType":"YulFunctionCall","src":"30311:47:38"},"nodeType":"YulExpressionStatement","src":"30311:47:38"},{"nodeType":"YulAssignment","src":"30367:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30501:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30375:124:38"},"nodeType":"YulFunctionCall","src":"30375:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30367:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30245:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30260:4:38","type":""}],"src":"30094:419:38"},{"body":{"nodeType":"YulBlock","src":"30547:152:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30564:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30567:77:38","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30557:6:38"},"nodeType":"YulFunctionCall","src":"30557:88:38"},"nodeType":"YulExpressionStatement","src":"30557:88:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30661:1:38","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"30664:4:38","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30654:6:38"},"nodeType":"YulFunctionCall","src":"30654:15:38"},"nodeType":"YulExpressionStatement","src":"30654:15:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30685:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30688:4:38","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30678:6:38"},"nodeType":"YulFunctionCall","src":"30678:15:38"},"nodeType":"YulExpressionStatement","src":"30678:15:38"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"30519:180:38"},{"body":{"nodeType":"YulBlock","src":"30931:408:38","statements":[{"nodeType":"YulAssignment","src":"30941:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30953:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"30964:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30949:3:38"},"nodeType":"YulFunctionCall","src":"30949:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30941:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30988:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"30999:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30984:3:38"},"nodeType":"YulFunctionCall","src":"30984:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31007:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"31013:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31003:3:38"},"nodeType":"YulFunctionCall","src":"31003:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30977:6:38"},"nodeType":"YulFunctionCall","src":"30977:47:38"},"nodeType":"YulExpressionStatement","src":"30977:47:38"},{"nodeType":"YulAssignment","src":"31033:116:38","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"31135:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"31144:4:38"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31041:93:38"},"nodeType":"YulFunctionCall","src":"31041:108:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31033:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31170:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"31181:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31166:3:38"},"nodeType":"YulFunctionCall","src":"31166:18:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31190:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"31196:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31186:3:38"},"nodeType":"YulFunctionCall","src":"31186:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31159:6:38"},"nodeType":"YulFunctionCall","src":"31159:48:38"},"nodeType":"YulExpressionStatement","src":"31159:48:38"},{"nodeType":"YulAssignment","src":"31216:116:38","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"31318:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"31327:4:38"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31224:93:38"},"nodeType":"YulFunctionCall","src":"31224:108:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31216:4:38"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30895:9:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"30907:6:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30915:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30926:4:38","type":""}],"src":"30705:634:38"},{"body":{"nodeType":"YulBlock","src":"31373:152:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31390:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31393:77:38","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31383:6:38"},"nodeType":"YulFunctionCall","src":"31383:88:38"},"nodeType":"YulExpressionStatement","src":"31383:88:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31487:1:38","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"31490:4:38","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31480:6:38"},"nodeType":"YulFunctionCall","src":"31480:15:38"},"nodeType":"YulExpressionStatement","src":"31480:15:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31511:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31514:4:38","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"31504:6:38"},"nodeType":"YulFunctionCall","src":"31504:15:38"},"nodeType":"YulExpressionStatement","src":"31504:15:38"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"31345:180:38"},{"body":{"nodeType":"YulBlock","src":"31582:269:38","statements":[{"nodeType":"YulAssignment","src":"31592:22:38","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31606:4:38"},{"kind":"number","nodeType":"YulLiteral","src":"31612:1:38","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"31602:3:38"},"nodeType":"YulFunctionCall","src":"31602:12:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"31592:6:38"}]},{"nodeType":"YulVariableDeclaration","src":"31623:38:38","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31653:4:38"},{"kind":"number","nodeType":"YulLiteral","src":"31659:1:38","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31649:3:38"},"nodeType":"YulFunctionCall","src":"31649:12:38"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"31627:18:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"31700:51:38","statements":[{"nodeType":"YulAssignment","src":"31714:27:38","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"31728:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"31736:4:38","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31724:3:38"},"nodeType":"YulFunctionCall","src":"31724:17:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"31714:6:38"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"31680:18:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"31673:6:38"},"nodeType":"YulFunctionCall","src":"31673:26:38"},"nodeType":"YulIf","src":"31670:81:38"},{"body":{"nodeType":"YulBlock","src":"31803:42:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"31817:16:38"},"nodeType":"YulFunctionCall","src":"31817:18:38"},"nodeType":"YulExpressionStatement","src":"31817:18:38"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"31767:18:38"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"31790:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"31798:2:38","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31787:2:38"},"nodeType":"YulFunctionCall","src":"31787:14:38"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31764:2:38"},"nodeType":"YulFunctionCall","src":"31764:38:38"},"nodeType":"YulIf","src":"31761:84:38"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"31566:4:38","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"31575:6:38","type":""}],"src":"31531:320:38"},{"body":{"nodeType":"YulBlock","src":"31911:87:38","statements":[{"nodeType":"YulAssignment","src":"31921:11:38","value":{"name":"ptr","nodeType":"YulIdentifier","src":"31929:3:38"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"31921:4:38"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31949:1:38","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"31952:3:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31942:6:38"},"nodeType":"YulFunctionCall","src":"31942:14:38"},"nodeType":"YulExpressionStatement","src":"31942:14:38"},{"nodeType":"YulAssignment","src":"31965:26:38","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31983:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31986:4:38","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"31973:9:38"},"nodeType":"YulFunctionCall","src":"31973:18:38"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"31965:4:38"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"31898:3:38","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"31906:4:38","type":""}],"src":"31857:141:38"},{"body":{"nodeType":"YulBlock","src":"32135:767:38","statements":[{"nodeType":"YulVariableDeclaration","src":"32145:29:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32168:5:38"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"32162:5:38"},"nodeType":"YulFunctionCall","src":"32162:12:38"},"variables":[{"name":"slotValue","nodeType":"YulTypedName","src":"32149:9:38","type":""}]},{"nodeType":"YulVariableDeclaration","src":"32183:50:38","value":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"32223:9:38"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"32197:25:38"},"nodeType":"YulFunctionCall","src":"32197:36:38"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"32187:6:38","type":""}]},{"nodeType":"YulAssignment","src":"32242:96:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32326:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"32331:6:38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"32249:76:38"},"nodeType":"YulFunctionCall","src":"32249:89:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32242:3:38"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"32387:159:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32440:3:38"},{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"32449:9:38"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32464:4:38","type":"","value":"0xff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"32460:3:38"},"nodeType":"YulFunctionCall","src":"32460:9:38"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32445:3:38"},"nodeType":"YulFunctionCall","src":"32445:25:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32433:6:38"},"nodeType":"YulFunctionCall","src":"32433:38:38"},"nodeType":"YulExpressionStatement","src":"32433:38:38"},{"nodeType":"YulAssignment","src":"32484:52:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32495:3:38"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"32504:6:38"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"32526:6:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32519:6:38"},"nodeType":"YulFunctionCall","src":"32519:14:38"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32512:6:38"},"nodeType":"YulFunctionCall","src":"32512:22:38"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"32500:3:38"},"nodeType":"YulFunctionCall","src":"32500:35:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32491:3:38"},"nodeType":"YulFunctionCall","src":"32491:45:38"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32484:3:38"}]}]},"nodeType":"YulCase","src":"32380:166:38","value":{"kind":"number","nodeType":"YulLiteral","src":"32385:1:38","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"32562:334:38","statements":[{"nodeType":"YulVariableDeclaration","src":"32607:53:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32654:5:38"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"32622:31:38"},"nodeType":"YulFunctionCall","src":"32622:38:38"},"variables":[{"name":"dataPos","nodeType":"YulTypedName","src":"32611:7:38","type":""}]},{"nodeType":"YulVariableDeclaration","src":"32673:10:38","value":{"kind":"number","nodeType":"YulLiteral","src":"32682:1:38","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"32677:1:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"32740:110:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32769:3:38"},{"name":"i","nodeType":"YulIdentifier","src":"32774:1:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32765:3:38"},"nodeType":"YulFunctionCall","src":"32765:11:38"},{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"32784:7:38"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"32778:5:38"},"nodeType":"YulFunctionCall","src":"32778:14:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32758:6:38"},"nodeType":"YulFunctionCall","src":"32758:35:38"},"nodeType":"YulExpressionStatement","src":"32758:35:38"},{"nodeType":"YulAssignment","src":"32810:26:38","value":{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"32825:7:38"},{"kind":"number","nodeType":"YulLiteral","src":"32834:1:38","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32821:3:38"},"nodeType":"YulFunctionCall","src":"32821:15:38"},"variableNames":[{"name":"dataPos","nodeType":"YulIdentifier","src":"32810:7:38"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"32707:1:38"},{"name":"length","nodeType":"YulIdentifier","src":"32710:6:38"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32704:2:38"},"nodeType":"YulFunctionCall","src":"32704:13:38"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"32718:21:38","statements":[{"nodeType":"YulAssignment","src":"32720:17:38","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"32729:1:38"},{"kind":"number","nodeType":"YulLiteral","src":"32732:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32725:3:38"},"nodeType":"YulFunctionCall","src":"32725:12:38"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"32720:1:38"}]}]},"pre":{"nodeType":"YulBlock","src":"32700:3:38","statements":[]},"src":"32696:154:38"},{"nodeType":"YulAssignment","src":"32863:23:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32874:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"32879:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32870:3:38"},"nodeType":"YulFunctionCall","src":"32870:16:38"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32863:3:38"}]}]},"nodeType":"YulCase","src":"32555:341:38","value":{"kind":"number","nodeType":"YulLiteral","src":"32560:1:38","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"32358:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"32369:1:38","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32354:3:38"},"nodeType":"YulFunctionCall","src":"32354:17:38"},"nodeType":"YulSwitch","src":"32347:549:38"}]},"name":"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32116:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"32123:3:38","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"32131:3:38","type":""}],"src":"32028:874:38"},{"body":{"nodeType":"YulBlock","src":"33089:248:38","statements":[{"nodeType":"YulAssignment","src":"33100:99:38","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33186:6:38"},{"name":"pos","nodeType":"YulIdentifier","src":"33195:3:38"}],"functionName":{"name":"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"33107:78:38"},"nodeType":"YulFunctionCall","src":"33107:92:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33100:3:38"}]},{"nodeType":"YulAssignment","src":"33209:102:38","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"33298:6:38"},{"name":"pos","nodeType":"YulIdentifier","src":"33307:3:38"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"33216:81:38"},"nodeType":"YulFunctionCall","src":"33216:95:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33209:3:38"}]},{"nodeType":"YulAssignment","src":"33321:10:38","value":{"name":"pos","nodeType":"YulIdentifier","src":"33328:3:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33321:3:38"}]}]},"name":"abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33060:3:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"33066:6:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"33074:6:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33085:3:38","type":""}],"src":"32908:429:38"},{"body":{"nodeType":"YulBlock","src":"33449:72:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33471:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"33479:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33467:3:38"},"nodeType":"YulFunctionCall","src":"33467:14:38"},{"hexValue":"455243313135353a206e6f6e2d617070726f7665642073656e646572","kind":"string","nodeType":"YulLiteral","src":"33483:30:38","type":"","value":"ERC1155: non-approved sender"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33460:6:38"},"nodeType":"YulFunctionCall","src":"33460:54:38"},"nodeType":"YulExpressionStatement","src":"33460:54:38"}]},"name":"store_literal_in_memory_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33441:6:38","type":""}],"src":"33343:178:38"},{"body":{"nodeType":"YulBlock","src":"33673:220:38","statements":[{"nodeType":"YulAssignment","src":"33683:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33749:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"33754:2:38","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33690:58:38"},"nodeType":"YulFunctionCall","src":"33690:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33683:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33855:3:38"}],"functionName":{"name":"store_literal_in_memory_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd","nodeType":"YulIdentifier","src":"33766:88:38"},"nodeType":"YulFunctionCall","src":"33766:93:38"},"nodeType":"YulExpressionStatement","src":"33766:93:38"},{"nodeType":"YulAssignment","src":"33868:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33879:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"33884:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33875:3:38"},"nodeType":"YulFunctionCall","src":"33875:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33868:3:38"}]}]},"name":"abi_encode_t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33661:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33669:3:38","type":""}],"src":"33527:366:38"},{"body":{"nodeType":"YulBlock","src":"34070:248:38","statements":[{"nodeType":"YulAssignment","src":"34080:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34092:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"34103:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34088:3:38"},"nodeType":"YulFunctionCall","src":"34088:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34080:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34127:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"34138:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34123:3:38"},"nodeType":"YulFunctionCall","src":"34123:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34146:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"34152:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34142:3:38"},"nodeType":"YulFunctionCall","src":"34142:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34116:6:38"},"nodeType":"YulFunctionCall","src":"34116:47:38"},"nodeType":"YulExpressionStatement","src":"34116:47:38"},{"nodeType":"YulAssignment","src":"34172:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34306:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34180:124:38"},"nodeType":"YulFunctionCall","src":"34180:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34172:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34050:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34065:4:38","type":""}],"src":"33899:419:38"},{"body":{"nodeType":"YulBlock","src":"34450:206:38","statements":[{"nodeType":"YulAssignment","src":"34460:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34472:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"34483:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34468:3:38"},"nodeType":"YulFunctionCall","src":"34468:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34460:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"34540:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34553:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"34564:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34549:3:38"},"nodeType":"YulFunctionCall","src":"34549:17:38"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"34496:43:38"},"nodeType":"YulFunctionCall","src":"34496:71:38"},"nodeType":"YulExpressionStatement","src":"34496:71:38"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"34621:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34634:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"34645:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34630:3:38"},"nodeType":"YulFunctionCall","src":"34630:18:38"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"34577:43:38"},"nodeType":"YulFunctionCall","src":"34577:72:38"},"nodeType":"YulExpressionStatement","src":"34577:72:38"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34414:9:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"34426:6:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"34434:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34445:4:38","type":""}],"src":"34324:332:38"},{"body":{"nodeType":"YulBlock","src":"34768:75:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34790:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"34798:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34786:3:38"},"nodeType":"YulFunctionCall","src":"34786:14:38"},{"hexValue":"455243313135353a207472616e7366657220746f2061646472657373283029","kind":"string","nodeType":"YulLiteral","src":"34802:33:38","type":"","value":"ERC1155: transfer to address(0)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34779:6:38"},"nodeType":"YulFunctionCall","src":"34779:57:38"},"nodeType":"YulExpressionStatement","src":"34779:57:38"}]},"name":"store_literal_in_memory_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34760:6:38","type":""}],"src":"34662:181:38"},{"body":{"nodeType":"YulBlock","src":"34995:220:38","statements":[{"nodeType":"YulAssignment","src":"35005:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35071:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"35076:2:38","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35012:58:38"},"nodeType":"YulFunctionCall","src":"35012:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35005:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35177:3:38"}],"functionName":{"name":"store_literal_in_memory_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9","nodeType":"YulIdentifier","src":"35088:88:38"},"nodeType":"YulFunctionCall","src":"35088:93:38"},"nodeType":"YulExpressionStatement","src":"35088:93:38"},{"nodeType":"YulAssignment","src":"35190:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35201:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"35206:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35197:3:38"},"nodeType":"YulFunctionCall","src":"35197:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35190:3:38"}]}]},"name":"abi_encode_t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"34983:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"34991:3:38","type":""}],"src":"34849:366:38"},{"body":{"nodeType":"YulBlock","src":"35392:248:38","statements":[{"nodeType":"YulAssignment","src":"35402:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35414:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"35425:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35410:3:38"},"nodeType":"YulFunctionCall","src":"35410:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35402:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35449:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"35460:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35445:3:38"},"nodeType":"YulFunctionCall","src":"35445:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35468:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"35474:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35464:3:38"},"nodeType":"YulFunctionCall","src":"35464:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35438:6:38"},"nodeType":"YulFunctionCall","src":"35438:47:38"},"nodeType":"YulExpressionStatement","src":"35438:47:38"},{"nodeType":"YulAssignment","src":"35494:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35628:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35502:124:38"},"nodeType":"YulFunctionCall","src":"35502:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35494:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35372:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35387:4:38","type":""}],"src":"35221:419:38"},{"body":{"nodeType":"YulBlock","src":"35735:28:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35752:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"35755:1:38","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"35745:6:38"},"nodeType":"YulFunctionCall","src":"35745:12:38"},"nodeType":"YulExpressionStatement","src":"35745:12:38"}]},"name":"revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec","nodeType":"YulFunctionDefinition","src":"35646:117:38"},{"body":{"nodeType":"YulBlock","src":"35820:47:38","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"35843:3:38"},{"name":"src","nodeType":"YulIdentifier","src":"35848:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"35853:6:38"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"35830:12:38"},"nodeType":"YulFunctionCall","src":"35830:30:38"},"nodeType":"YulExpressionStatement","src":"35830:30:38"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"35802:3:38","type":""},{"name":"dst","nodeType":"YulTypedName","src":"35807:3:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"35812:6:38","type":""}],"src":"35769:98:38"},{"body":{"nodeType":"YulBlock","src":"36035:405:38","statements":[{"nodeType":"YulAssignment","src":"36045:93:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36126:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"36131:6:38"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36052:73:38"},"nodeType":"YulFunctionCall","src":"36052:86:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"36045:3:38"}]},{"body":{"nodeType":"YulBlock","src":"36230:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec","nodeType":"YulIdentifier","src":"36232:77:38"},"nodeType":"YulFunctionCall","src":"36232:79:38"},"nodeType":"YulExpressionStatement","src":"36232:79:38"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"36154:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"36162:66:38","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"36151:2:38"},"nodeType":"YulFunctionCall","src":"36151:78:38"},"nodeType":"YulIf","src":"36148:165:38"},{"nodeType":"YulAssignment","src":"36322:27:38","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"36336:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"36344:4:38","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"36332:3:38"},"nodeType":"YulFunctionCall","src":"36332:17:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"36322:6:38"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"36383:5:38"},{"name":"pos","nodeType":"YulIdentifier","src":"36390:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"36395:6:38"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"36359:23:38"},"nodeType":"YulFunctionCall","src":"36359:43:38"},"nodeType":"YulExpressionStatement","src":"36359:43:38"},{"nodeType":"YulAssignment","src":"36411:23:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36422:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"36427:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36418:3:38"},"nodeType":"YulFunctionCall","src":"36418:16:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36411:3:38"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_calldata_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"36008:5:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"36015:6:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"36023:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36031:3:38","type":""}],"src":"35903:537:38"},{"body":{"nodeType":"YulBlock","src":"36692:428:38","statements":[{"nodeType":"YulAssignment","src":"36702:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36714:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"36725:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36710:3:38"},"nodeType":"YulFunctionCall","src":"36710:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36702:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36749:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"36760:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36745:3:38"},"nodeType":"YulFunctionCall","src":"36745:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36768:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"36774:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36764:3:38"},"nodeType":"YulFunctionCall","src":"36764:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36738:6:38"},"nodeType":"YulFunctionCall","src":"36738:47:38"},"nodeType":"YulExpressionStatement","src":"36738:47:38"},{"nodeType":"YulAssignment","src":"36794:126:38","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"36898:6:38"},{"name":"value1","nodeType":"YulIdentifier","src":"36906:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"36915:4:38"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_calldata_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36802:95:38"},"nodeType":"YulFunctionCall","src":"36802:118:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36794:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36941:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"36952:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36937:3:38"},"nodeType":"YulFunctionCall","src":"36937:18:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36961:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"36967:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36957:3:38"},"nodeType":"YulFunctionCall","src":"36957:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36930:6:38"},"nodeType":"YulFunctionCall","src":"36930:48:38"},"nodeType":"YulExpressionStatement","src":"36930:48:38"},{"nodeType":"YulAssignment","src":"36987:126:38","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"37091:6:38"},{"name":"value3","nodeType":"YulIdentifier","src":"37099:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"37108:4:38"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_calldata_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36995:95:38"},"nodeType":"YulFunctionCall","src":"36995:118:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36987:4:38"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36640:9:38","type":""},{"name":"value3","nodeType":"YulTypedName","src":"36652:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"36660:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"36668:6:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36676:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36687:4:38","type":""}],"src":"36446:674:38"},{"body":{"nodeType":"YulBlock","src":"37232:68:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37254:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"37262:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37250:3:38"},"nodeType":"YulFunctionCall","src":"37250:14:38"},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"37266:26:38","type":"","value":"Ownership: not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37243:6:38"},"nodeType":"YulFunctionCall","src":"37243:50:38"},"nodeType":"YulExpressionStatement","src":"37243:50:38"}]},"name":"store_literal_in_memory_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37224:6:38","type":""}],"src":"37126:174:38"},{"body":{"nodeType":"YulBlock","src":"37452:220:38","statements":[{"nodeType":"YulAssignment","src":"37462:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37528:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"37533:2:38","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37469:58:38"},"nodeType":"YulFunctionCall","src":"37469:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37462:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37634:3:38"}],"functionName":{"name":"store_literal_in_memory_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","nodeType":"YulIdentifier","src":"37545:88:38"},"nodeType":"YulFunctionCall","src":"37545:93:38"},"nodeType":"YulExpressionStatement","src":"37545:93:38"},{"nodeType":"YulAssignment","src":"37647:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37658:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"37663:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37654:3:38"},"nodeType":"YulFunctionCall","src":"37654:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37647:3:38"}]}]},"name":"abi_encode_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37440:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37448:3:38","type":""}],"src":"37306:366:38"},{"body":{"nodeType":"YulBlock","src":"37849:248:38","statements":[{"nodeType":"YulAssignment","src":"37859:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37871:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"37882:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37867:3:38"},"nodeType":"YulFunctionCall","src":"37867:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37859:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37906:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"37917:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37902:3:38"},"nodeType":"YulFunctionCall","src":"37902:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37925:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"37931:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37921:3:38"},"nodeType":"YulFunctionCall","src":"37921:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37895:6:38"},"nodeType":"YulFunctionCall","src":"37895:47:38"},"nodeType":"YulExpressionStatement","src":"37895:47:38"},{"nodeType":"YulAssignment","src":"37951:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38085:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37959:124:38"},"nodeType":"YulFunctionCall","src":"37959:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37951:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37829:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37844:4:38","type":""}],"src":"37678:419:38"},{"body":{"nodeType":"YulBlock","src":"38131:152:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38148:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38151:77:38","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38141:6:38"},"nodeType":"YulFunctionCall","src":"38141:88:38"},"nodeType":"YulExpressionStatement","src":"38141:88:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38245:1:38","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"38248:4:38","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38238:6:38"},"nodeType":"YulFunctionCall","src":"38238:15:38"},"nodeType":"YulExpressionStatement","src":"38238:15:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38269:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38272:4:38","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"38262:6:38"},"nodeType":"YulFunctionCall","src":"38262:15:38"},"nodeType":"YulExpressionStatement","src":"38262:15:38"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"38103:180:38"},{"body":{"nodeType":"YulBlock","src":"38395:57:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38417:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"38425:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38413:3:38"},"nodeType":"YulFunctionCall","src":"38413:14:38"},{"hexValue":"50617573653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"38429:15:38","type":"","value":"Pause: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38406:6:38"},"nodeType":"YulFunctionCall","src":"38406:39:38"},"nodeType":"YulExpressionStatement","src":"38406:39:38"}]},"name":"store_literal_in_memory_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"38387:6:38","type":""}],"src":"38289:163:38"},{"body":{"nodeType":"YulBlock","src":"38604:220:38","statements":[{"nodeType":"YulAssignment","src":"38614:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38680:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"38685:2:38","type":"","value":"13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38621:58:38"},"nodeType":"YulFunctionCall","src":"38621:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"38614:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38786:3:38"}],"functionName":{"name":"store_literal_in_memory_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3","nodeType":"YulIdentifier","src":"38697:88:38"},"nodeType":"YulFunctionCall","src":"38697:93:38"},"nodeType":"YulExpressionStatement","src":"38697:93:38"},{"nodeType":"YulAssignment","src":"38799:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38810:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"38815:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38806:3:38"},"nodeType":"YulFunctionCall","src":"38806:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"38799:3:38"}]}]},"name":"abi_encode_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38592:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"38600:3:38","type":""}],"src":"38458:366:38"},{"body":{"nodeType":"YulBlock","src":"39001:248:38","statements":[{"nodeType":"YulAssignment","src":"39011:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39023:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"39034:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39019:3:38"},"nodeType":"YulFunctionCall","src":"39019:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39011:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39058:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"39069:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39054:3:38"},"nodeType":"YulFunctionCall","src":"39054:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39077:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"39083:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39073:3:38"},"nodeType":"YulFunctionCall","src":"39073:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39047:6:38"},"nodeType":"YulFunctionCall","src":"39047:47:38"},"nodeType":"YulExpressionStatement","src":"39047:47:38"},{"nodeType":"YulAssignment","src":"39103:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39237:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39111:124:38"},"nodeType":"YulFunctionCall","src":"39111:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39103:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38981:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38996:4:38","type":""}],"src":"38830:419:38"},{"body":{"nodeType":"YulBlock","src":"39321:31:38","statements":[{"nodeType":"YulAssignment","src":"39332:13:38","value":{"name":"len","nodeType":"YulIdentifier","src":"39342:3:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"39332:6:38"}]}]},"name":"array_length_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39299:5:38","type":""},{"name":"len","nodeType":"YulTypedName","src":"39306:3:38","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"39314:6:38","type":""}],"src":"39255:97:38"},{"body":{"nodeType":"YulBlock","src":"39402:49:38","statements":[{"nodeType":"YulAssignment","src":"39412:33:38","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39430:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"39437:2:38","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39426:3:38"},"nodeType":"YulFunctionCall","src":"39426:14:38"},{"kind":"number","nodeType":"YulLiteral","src":"39442:2:38","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"39422:3:38"},"nodeType":"YulFunctionCall","src":"39422:23:38"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"39412:6:38"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39385:5:38","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"39395:6:38","type":""}],"src":"39358:93:38"},{"body":{"nodeType":"YulBlock","src":"39510:54:38","statements":[{"nodeType":"YulAssignment","src":"39520:37:38","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"39545:4:38"},{"name":"value","nodeType":"YulIdentifier","src":"39551:5:38"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"39541:3:38"},"nodeType":"YulFunctionCall","src":"39541:16:38"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"39520:8:38"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"39485:4:38","type":""},{"name":"value","nodeType":"YulTypedName","src":"39491:5:38","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"39501:8:38","type":""}],"src":"39457:107:38"},{"body":{"nodeType":"YulBlock","src":"39646:317:38","statements":[{"nodeType":"YulVariableDeclaration","src":"39656:35:38","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"39677:10:38"},{"kind":"number","nodeType":"YulLiteral","src":"39689:1:38","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"39673:3:38"},"nodeType":"YulFunctionCall","src":"39673:18:38"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"39660:9:38","type":""}]},{"nodeType":"YulVariableDeclaration","src":"39700:109:38","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"39731:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"39742:66:38","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"39712:18:38"},"nodeType":"YulFunctionCall","src":"39712:97:38"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"39704:4:38","type":""}]},{"nodeType":"YulAssignment","src":"39818:51:38","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"39849:9:38"},{"name":"toInsert","nodeType":"YulIdentifier","src":"39860:8:38"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"39830:18:38"},"nodeType":"YulFunctionCall","src":"39830:39:38"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"39818:8:38"}]},{"nodeType":"YulAssignment","src":"39878:30:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39891:5:38"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"39902:4:38"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"39898:3:38"},"nodeType":"YulFunctionCall","src":"39898:9:38"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"39887:3:38"},"nodeType":"YulFunctionCall","src":"39887:21:38"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"39878:5:38"}]},{"nodeType":"YulAssignment","src":"39917:40:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39930:5:38"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"39941:8:38"},{"name":"mask","nodeType":"YulIdentifier","src":"39951:4:38"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"39937:3:38"},"nodeType":"YulFunctionCall","src":"39937:19:38"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"39927:2:38"},"nodeType":"YulFunctionCall","src":"39927:30:38"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"39917:6:38"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39607:5:38","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"39614:10:38","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"39626:8:38","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"39639:6:38","type":""}],"src":"39570:393:38"},{"body":{"nodeType":"YulBlock","src":"40001:28:38","statements":[{"nodeType":"YulAssignment","src":"40011:12:38","value":{"name":"value","nodeType":"YulIdentifier","src":"40018:5:38"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"40011:3:38"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39987:5:38","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"39997:3:38","type":""}],"src":"39969:60:38"},{"body":{"nodeType":"YulBlock","src":"40095:82:38","statements":[{"nodeType":"YulAssignment","src":"40105:66:38","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40163:5:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"40145:17:38"},"nodeType":"YulFunctionCall","src":"40145:24:38"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"40136:8:38"},"nodeType":"YulFunctionCall","src":"40136:34:38"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"40118:17:38"},"nodeType":"YulFunctionCall","src":"40118:53:38"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"40105:9:38"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40075:5:38","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"40085:9:38","type":""}],"src":"40035:142:38"},{"body":{"nodeType":"YulBlock","src":"40230:28:38","statements":[{"nodeType":"YulAssignment","src":"40240:12:38","value":{"name":"value","nodeType":"YulIdentifier","src":"40247:5:38"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"40240:3:38"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40216:5:38","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"40226:3:38","type":""}],"src":"40183:75:38"},{"body":{"nodeType":"YulBlock","src":"40340:193:38","statements":[{"nodeType":"YulVariableDeclaration","src":"40350:63:38","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"40405:7:38"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"40374:30:38"},"nodeType":"YulFunctionCall","src":"40374:39:38"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"40354:16:38","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40429:4:38"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40469:4:38"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"40463:5:38"},"nodeType":"YulFunctionCall","src":"40463:11:38"},{"name":"offset","nodeType":"YulIdentifier","src":"40476:6:38"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"40508:16:38"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"40484:23:38"},"nodeType":"YulFunctionCall","src":"40484:41:38"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"40435:27:38"},"nodeType":"YulFunctionCall","src":"40435:91:38"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"40422:6:38"},"nodeType":"YulFunctionCall","src":"40422:105:38"},"nodeType":"YulExpressionStatement","src":"40422:105:38"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"40317:4:38","type":""},{"name":"offset","nodeType":"YulTypedName","src":"40323:6:38","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"40331:7:38","type":""}],"src":"40264:269:38"},{"body":{"nodeType":"YulBlock","src":"40588:24:38","statements":[{"nodeType":"YulAssignment","src":"40598:8:38","value":{"kind":"number","nodeType":"YulLiteral","src":"40605:1:38","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"40598:3:38"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"40584:3:38","type":""}],"src":"40539:73:38"},{"body":{"nodeType":"YulBlock","src":"40671:136:38","statements":[{"nodeType":"YulVariableDeclaration","src":"40681:46:38","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"40695:30:38"},"nodeType":"YulFunctionCall","src":"40695:32:38"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"40685:6:38","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40780:4:38"},{"name":"offset","nodeType":"YulIdentifier","src":"40786:6:38"},{"name":"zero_0","nodeType":"YulIdentifier","src":"40794:6:38"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"40736:43:38"},"nodeType":"YulFunctionCall","src":"40736:65:38"},"nodeType":"YulExpressionStatement","src":"40736:65:38"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"40657:4:38","type":""},{"name":"offset","nodeType":"YulTypedName","src":"40663:6:38","type":""}],"src":"40618:189:38"},{"body":{"nodeType":"YulBlock","src":"40863:136:38","statements":[{"body":{"nodeType":"YulBlock","src":"40930:63:38","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"40974:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"40981:1:38","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"40944:29:38"},"nodeType":"YulFunctionCall","src":"40944:39:38"},"nodeType":"YulExpressionStatement","src":"40944:39:38"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"40883:5:38"},{"name":"end","nodeType":"YulIdentifier","src":"40890:3:38"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"40880:2:38"},"nodeType":"YulFunctionCall","src":"40880:14:38"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"40895:26:38","statements":[{"nodeType":"YulAssignment","src":"40897:22:38","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"40910:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"40917:1:38","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40906:3:38"},"nodeType":"YulFunctionCall","src":"40906:13:38"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"40897:5:38"}]}]},"pre":{"nodeType":"YulBlock","src":"40877:2:38","statements":[]},"src":"40873:120:38"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"40851:5:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"40858:3:38","type":""}],"src":"40813:186:38"},{"body":{"nodeType":"YulBlock","src":"41084:464:38","statements":[{"body":{"nodeType":"YulBlock","src":"41110:431:38","statements":[{"nodeType":"YulVariableDeclaration","src":"41124:54:38","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"41172:5:38"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"41140:31:38"},"nodeType":"YulFunctionCall","src":"41140:38:38"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"41128:8:38","type":""}]},{"nodeType":"YulVariableDeclaration","src":"41191:63:38","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"41214:8:38"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"41242:10:38"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"41224:17:38"},"nodeType":"YulFunctionCall","src":"41224:29:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41210:3:38"},"nodeType":"YulFunctionCall","src":"41210:44:38"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"41195:11:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"41411:27:38","statements":[{"nodeType":"YulAssignment","src":"41413:23:38","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"41428:8:38"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"41413:11:38"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"41395:10:38"},{"kind":"number","nodeType":"YulLiteral","src":"41407:2:38","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"41392:2:38"},"nodeType":"YulFunctionCall","src":"41392:18:38"},"nodeType":"YulIf","src":"41389:49:38"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"41480:11:38"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"41497:8:38"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"41525:3:38"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"41507:17:38"},"nodeType":"YulFunctionCall","src":"41507:22:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41493:3:38"},"nodeType":"YulFunctionCall","src":"41493:37:38"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"41451:28:38"},"nodeType":"YulFunctionCall","src":"41451:80:38"},"nodeType":"YulExpressionStatement","src":"41451:80:38"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"41101:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"41106:2:38","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"41098:2:38"},"nodeType":"YulFunctionCall","src":"41098:11:38"},"nodeType":"YulIf","src":"41095:446:38"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"41060:5:38","type":""},{"name":"len","nodeType":"YulTypedName","src":"41067:3:38","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"41072:10:38","type":""}],"src":"41005:543:38"},{"body":{"nodeType":"YulBlock","src":"41617:54:38","statements":[{"nodeType":"YulAssignment","src":"41627:37:38","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"41652:4:38"},{"name":"value","nodeType":"YulIdentifier","src":"41658:5:38"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"41648:3:38"},"nodeType":"YulFunctionCall","src":"41648:16:38"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"41627:8:38"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"41592:4:38","type":""},{"name":"value","nodeType":"YulTypedName","src":"41598:5:38","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"41608:8:38","type":""}],"src":"41554:117:38"},{"body":{"nodeType":"YulBlock","src":"41728:118:38","statements":[{"nodeType":"YulVariableDeclaration","src":"41738:68:38","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41787:1:38","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"41790:5:38"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"41783:3:38"},"nodeType":"YulFunctionCall","src":"41783:13:38"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41802:1:38","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"41798:3:38"},"nodeType":"YulFunctionCall","src":"41798:6:38"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"41754:28:38"},"nodeType":"YulFunctionCall","src":"41754:51:38"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"41750:3:38"},"nodeType":"YulFunctionCall","src":"41750:56:38"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"41742:4:38","type":""}]},{"nodeType":"YulAssignment","src":"41815:25:38","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"41829:4:38"},{"name":"mask","nodeType":"YulIdentifier","src":"41835:4:38"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41825:3:38"},"nodeType":"YulFunctionCall","src":"41825:15:38"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"41815:6:38"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"41705:4:38","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"41711:5:38","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"41721:6:38","type":""}],"src":"41677:169:38"},{"body":{"nodeType":"YulBlock","src":"41932:214:38","statements":[{"nodeType":"YulAssignment","src":"42065:37:38","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"42092:4:38"},{"name":"len","nodeType":"YulIdentifier","src":"42098:3:38"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"42073:18:38"},"nodeType":"YulFunctionCall","src":"42073:29:38"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"42065:4:38"}]},{"nodeType":"YulAssignment","src":"42111:29:38","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"42122:4:38"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42132:1:38","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"42135:3:38"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"42128:3:38"},"nodeType":"YulFunctionCall","src":"42128:11:38"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"42119:2:38"},"nodeType":"YulFunctionCall","src":"42119:21:38"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"42111:4:38"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"41913:4:38","type":""},{"name":"len","nodeType":"YulTypedName","src":"41919:3:38","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"41927:4:38","type":""}],"src":"41851:295:38"},{"body":{"nodeType":"YulBlock","src":"42250:1304:38","statements":[{"nodeType":"YulVariableDeclaration","src":"42261:58:38","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"42310:3:38"},{"name":"len","nodeType":"YulIdentifier","src":"42315:3:38"}],"functionName":{"name":"array_length_t_string_calldata_ptr","nodeType":"YulIdentifier","src":"42275:34:38"},"nodeType":"YulFunctionCall","src":"42275:44:38"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"42265:6:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"42404:22:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"42406:16:38"},"nodeType":"YulFunctionCall","src":"42406:18:38"},"nodeType":"YulExpressionStatement","src":"42406:18:38"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"42376:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"42384:18:38","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"42373:2:38"},"nodeType":"YulFunctionCall","src":"42373:30:38"},"nodeType":"YulIf","src":"42370:56:38"},{"nodeType":"YulVariableDeclaration","src":"42436:52:38","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"42482:4:38"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"42476:5:38"},"nodeType":"YulFunctionCall","src":"42476:11:38"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"42450:25:38"},"nodeType":"YulFunctionCall","src":"42450:38:38"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"42440:6:38","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"42581:4:38"},{"name":"oldLen","nodeType":"YulIdentifier","src":"42587:6:38"},{"name":"newLen","nodeType":"YulIdentifier","src":"42595:6:38"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"42535:45:38"},"nodeType":"YulFunctionCall","src":"42535:67:38"},"nodeType":"YulExpressionStatement","src":"42535:67:38"},{"nodeType":"YulVariableDeclaration","src":"42612:18:38","value":{"kind":"number","nodeType":"YulLiteral","src":"42629:1:38","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"42616:9:38","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"42677:625:38","statements":[{"nodeType":"YulVariableDeclaration","src":"42691:37:38","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"42710:6:38"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42722:4:38","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"42718:3:38"},"nodeType":"YulFunctionCall","src":"42718:9:38"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"42706:3:38"},"nodeType":"YulFunctionCall","src":"42706:22:38"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"42695:7:38","type":""}]},{"nodeType":"YulVariableDeclaration","src":"42742:51:38","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"42788:4:38"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"42756:31:38"},"nodeType":"YulFunctionCall","src":"42756:37:38"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"42746:6:38","type":""}]},{"nodeType":"YulVariableDeclaration","src":"42806:10:38","value":{"kind":"number","nodeType":"YulLiteral","src":"42815:1:38","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"42810:1:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"42874:170:38","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"42899:6:38"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"42924:3:38"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"42929:9:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42920:3:38"},"nodeType":"YulFunctionCall","src":"42920:19:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"42907:12:38"},"nodeType":"YulFunctionCall","src":"42907:33:38"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"42892:6:38"},"nodeType":"YulFunctionCall","src":"42892:49:38"},"nodeType":"YulExpressionStatement","src":"42892:49:38"},{"nodeType":"YulAssignment","src":"42958:24:38","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"42972:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"42980:1:38","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42968:3:38"},"nodeType":"YulFunctionCall","src":"42968:14:38"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"42958:6:38"}]},{"nodeType":"YulAssignment","src":"42999:31:38","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"43016:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"43027:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43012:3:38"},"nodeType":"YulFunctionCall","src":"43012:18:38"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"42999:9:38"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"42840:1:38"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"42843:7:38"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"42837:2:38"},"nodeType":"YulFunctionCall","src":"42837:14:38"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"42852:21:38","statements":[{"nodeType":"YulAssignment","src":"42854:17:38","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"42863:1:38"},{"kind":"number","nodeType":"YulLiteral","src":"42866:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42859:3:38"},"nodeType":"YulFunctionCall","src":"42859:12:38"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"42854:1:38"}]}]},"pre":{"nodeType":"YulBlock","src":"42833:3:38","statements":[]},"src":"42829:215:38"},{"body":{"nodeType":"YulBlock","src":"43080:163:38","statements":[{"nodeType":"YulVariableDeclaration","src":"43098:50:38","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"43132:3:38"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"43137:9:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43128:3:38"},"nodeType":"YulFunctionCall","src":"43128:19:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"43115:12:38"},"nodeType":"YulFunctionCall","src":"43115:33:38"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"43102:9:38","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"43172:6:38"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"43199:9:38"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"43214:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"43222:4:38","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"43210:3:38"},"nodeType":"YulFunctionCall","src":"43210:17:38"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"43180:18:38"},"nodeType":"YulFunctionCall","src":"43180:48:38"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"43165:6:38"},"nodeType":"YulFunctionCall","src":"43165:64:38"},"nodeType":"YulExpressionStatement","src":"43165:64:38"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"43063:7:38"},{"name":"newLen","nodeType":"YulIdentifier","src":"43072:6:38"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"43060:2:38"},"nodeType":"YulFunctionCall","src":"43060:19:38"},"nodeType":"YulIf","src":"43057:186:38"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"43263:4:38"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"43277:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"43285:1:38","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"43273:3:38"},"nodeType":"YulFunctionCall","src":"43273:14:38"},{"kind":"number","nodeType":"YulLiteral","src":"43289:1:38","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43269:3:38"},"nodeType":"YulFunctionCall","src":"43269:22:38"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"43256:6:38"},"nodeType":"YulFunctionCall","src":"43256:36:38"},"nodeType":"YulExpressionStatement","src":"43256:36:38"}]},"nodeType":"YulCase","src":"42670:632:38","value":{"kind":"number","nodeType":"YulLiteral","src":"42675:1:38","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"43319:229:38","statements":[{"nodeType":"YulVariableDeclaration","src":"43333:14:38","value":{"kind":"number","nodeType":"YulLiteral","src":"43346:1:38","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"43337:5:38","type":""}]},{"body":{"nodeType":"YulBlock","src":"43370:74:38","statements":[{"nodeType":"YulAssignment","src":"43388:42:38","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"43414:3:38"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"43419:9:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43410:3:38"},"nodeType":"YulFunctionCall","src":"43410:19:38"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"43397:12:38"},"nodeType":"YulFunctionCall","src":"43397:33:38"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"43388:5:38"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"43363:6:38"},"nodeType":"YulIf","src":"43360:84:38"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"43464:4:38"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"43523:5:38"},{"name":"newLen","nodeType":"YulIdentifier","src":"43530:6:38"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"43470:52:38"},"nodeType":"YulFunctionCall","src":"43470:67:38"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"43457:6:38"},"nodeType":"YulFunctionCall","src":"43457:81:38"},"nodeType":"YulExpressionStatement","src":"43457:81:38"}]},"nodeType":"YulCase","src":"43311:237:38","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"42650:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"42658:2:38","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"42647:2:38"},"nodeType":"YulFunctionCall","src":"42647:14:38"},"nodeType":"YulSwitch","src":"42640:908:38"}]},"name":"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"42234:4:38","type":""},{"name":"src","nodeType":"YulTypedName","src":"42240:3:38","type":""},{"name":"len","nodeType":"YulTypedName","src":"42245:3:38","type":""}],"src":"42151:1403:38"},{"body":{"nodeType":"YulBlock","src":"43624:82:38","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"43647:3:38"},{"name":"src","nodeType":"YulIdentifier","src":"43652:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"43657:6:38"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"43634:12:38"},"nodeType":"YulFunctionCall","src":"43634:30:38"},"nodeType":"YulExpressionStatement","src":"43634:30:38"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"43684:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"43689:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43680:3:38"},"nodeType":"YulFunctionCall","src":"43680:16:38"},{"kind":"number","nodeType":"YulLiteral","src":"43698:1:38","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43673:6:38"},"nodeType":"YulFunctionCall","src":"43673:27:38"},"nodeType":"YulExpressionStatement","src":"43673:27:38"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"43606:3:38","type":""},{"name":"dst","nodeType":"YulTypedName","src":"43611:3:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"43616:6:38","type":""}],"src":"43560:146:38"},{"body":{"nodeType":"YulBlock","src":"43838:215:38","statements":[{"nodeType":"YulAssignment","src":"43848:78:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43914:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"43919:6:38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43855:58:38"},"nodeType":"YulFunctionCall","src":"43855:71:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"43848:3:38"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"43973:5:38"},{"name":"pos","nodeType":"YulIdentifier","src":"43980:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"43985:6:38"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"43936:36:38"},"nodeType":"YulFunctionCall","src":"43936:56:38"},"nodeType":"YulExpressionStatement","src":"43936:56:38"},{"nodeType":"YulAssignment","src":"44001:46:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44012:3:38"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"44039:6:38"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"44017:21:38"},"nodeType":"YulFunctionCall","src":"44017:29:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44008:3:38"},"nodeType":"YulFunctionCall","src":"44008:39:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44001:3:38"}]}]},"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"43811:5:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"43818:6:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"43826:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"43834:3:38","type":""}],"src":"43736:317:38"},{"body":{"nodeType":"YulBlock","src":"44187:205:38","statements":[{"nodeType":"YulAssignment","src":"44197:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44209:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"44220:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44205:3:38"},"nodeType":"YulFunctionCall","src":"44205:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44197:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44244:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"44255:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44240:3:38"},"nodeType":"YulFunctionCall","src":"44240:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44263:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"44269:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44259:3:38"},"nodeType":"YulFunctionCall","src":"44259:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44233:6:38"},"nodeType":"YulFunctionCall","src":"44233:47:38"},"nodeType":"YulExpressionStatement","src":"44233:47:38"},{"nodeType":"YulAssignment","src":"44289:96:38","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"44363:6:38"},{"name":"value1","nodeType":"YulIdentifier","src":"44371:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"44380:4:38"}],"functionName":{"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44297:65:38"},"nodeType":"YulFunctionCall","src":"44297:88:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44289:4:38"}]}]},"name":"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"44151:9:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"44163:6:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"44171:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44182:4:38","type":""}],"src":"44059:333:38"},{"body":{"nodeType":"YulBlock","src":"44504:74:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44526:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"44534:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44522:3:38"},"nodeType":"YulFunctionCall","src":"44522:14:38"},{"hexValue":"455243313135353a2073656c662d617070726f76616c20666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"44538:32:38","type":"","value":"ERC1155: self-approval for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44515:6:38"},"nodeType":"YulFunctionCall","src":"44515:56:38"},"nodeType":"YulExpressionStatement","src":"44515:56:38"}]},"name":"store_literal_in_memory_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44496:6:38","type":""}],"src":"44398:180:38"},{"body":{"nodeType":"YulBlock","src":"44730:220:38","statements":[{"nodeType":"YulAssignment","src":"44740:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44806:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"44811:2:38","type":"","value":"30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44747:58:38"},"nodeType":"YulFunctionCall","src":"44747:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"44740:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44912:3:38"}],"functionName":{"name":"store_literal_in_memory_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0","nodeType":"YulIdentifier","src":"44823:88:38"},"nodeType":"YulFunctionCall","src":"44823:93:38"},"nodeType":"YulExpressionStatement","src":"44823:93:38"},{"nodeType":"YulAssignment","src":"44925:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44936:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"44941:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44932:3:38"},"nodeType":"YulFunctionCall","src":"44932:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44925:3:38"}]}]},"name":"abi_encode_t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"44718:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"44726:3:38","type":""}],"src":"44584:366:38"},{"body":{"nodeType":"YulBlock","src":"45127:248:38","statements":[{"nodeType":"YulAssignment","src":"45137:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45149:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"45160:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45145:3:38"},"nodeType":"YulFunctionCall","src":"45145:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45137:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45184:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"45195:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45180:3:38"},"nodeType":"YulFunctionCall","src":"45180:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45203:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"45209:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45199:3:38"},"nodeType":"YulFunctionCall","src":"45199:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45173:6:38"},"nodeType":"YulFunctionCall","src":"45173:47:38"},"nodeType":"YulExpressionStatement","src":"45173:47:38"},{"nodeType":"YulAssignment","src":"45229:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45363:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45237:124:38"},"nodeType":"YulFunctionCall","src":"45237:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45229:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45107:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"45122:4:38","type":""}],"src":"44956:419:38"},{"body":{"nodeType":"YulBlock","src":"45428:32:38","statements":[{"nodeType":"YulAssignment","src":"45438:16:38","value":{"name":"value","nodeType":"YulIdentifier","src":"45449:5:38"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"45438:7:38"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"45410:5:38","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"45420:7:38","type":""}],"src":"45381:79:38"},{"body":{"nodeType":"YulBlock","src":"45549:74:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45566:3:38"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"45609:5:38"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"45591:17:38"},"nodeType":"YulFunctionCall","src":"45591:24:38"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"45571:19:38"},"nodeType":"YulFunctionCall","src":"45571:45:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45559:6:38"},"nodeType":"YulFunctionCall","src":"45559:58:38"},"nodeType":"YulExpressionStatement","src":"45559:58:38"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"45537:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"45544:3:38","type":""}],"src":"45466:157:38"},{"body":{"nodeType":"YulBlock","src":"45745:140:38","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"45818:6:38"},{"name":"pos","nodeType":"YulIdentifier","src":"45827:3:38"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"45756:61:38"},"nodeType":"YulFunctionCall","src":"45756:75:38"},"nodeType":"YulExpressionStatement","src":"45756:75:38"},{"nodeType":"YulAssignment","src":"45840:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45851:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"45856:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45847:3:38"},"nodeType":"YulFunctionCall","src":"45847:12:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45840:3:38"}]},{"nodeType":"YulAssignment","src":"45869:10:38","value":{"name":"pos","nodeType":"YulIdentifier","src":"45876:3:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"45869:3:38"}]}]},"name":"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"45724:3:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"45730:6:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45741:3:38","type":""}],"src":"45629:256:38"},{"body":{"nodeType":"YulBlock","src":"45997:69:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46019:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"46027:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46015:3:38"},"nodeType":"YulFunctionCall","src":"46015:14:38"},{"hexValue":"455243313135353a2062616c616e6365206f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"46031:27:38","type":"","value":"ERC1155: balance overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46008:6:38"},"nodeType":"YulFunctionCall","src":"46008:51:38"},"nodeType":"YulExpressionStatement","src":"46008:51:38"}]},"name":"store_literal_in_memory_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45989:6:38","type":""}],"src":"45891:175:38"},{"body":{"nodeType":"YulBlock","src":"46218:220:38","statements":[{"nodeType":"YulAssignment","src":"46228:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46294:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"46299:2:38","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46235:58:38"},"nodeType":"YulFunctionCall","src":"46235:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"46228:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46400:3:38"}],"functionName":{"name":"store_literal_in_memory_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101","nodeType":"YulIdentifier","src":"46311:88:38"},"nodeType":"YulFunctionCall","src":"46311:93:38"},"nodeType":"YulExpressionStatement","src":"46311:93:38"},{"nodeType":"YulAssignment","src":"46413:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46424:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"46429:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46420:3:38"},"nodeType":"YulFunctionCall","src":"46420:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"46413:3:38"}]}]},"name":"abi_encode_t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"46206:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"46214:3:38","type":""}],"src":"46072:366:38"},{"body":{"nodeType":"YulBlock","src":"46615:248:38","statements":[{"nodeType":"YulAssignment","src":"46625:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46637:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"46648:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46633:3:38"},"nodeType":"YulFunctionCall","src":"46633:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46625:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46672:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"46683:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46668:3:38"},"nodeType":"YulFunctionCall","src":"46668:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46691:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"46697:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46687:3:38"},"nodeType":"YulFunctionCall","src":"46687:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46661:6:38"},"nodeType":"YulFunctionCall","src":"46661:47:38"},"nodeType":"YulExpressionStatement","src":"46661:47:38"},{"nodeType":"YulAssignment","src":"46717:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46851:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46725:124:38"},"nodeType":"YulFunctionCall","src":"46725:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46717:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46595:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46610:4:38","type":""}],"src":"46444:419:38"},{"body":{"nodeType":"YulBlock","src":"46927:40:38","statements":[{"nodeType":"YulAssignment","src":"46938:22:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"46954:5:38"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"46948:5:38"},"nodeType":"YulFunctionCall","src":"46948:12:38"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"46938:6:38"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"46910:5:38","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"46920:6:38","type":""}],"src":"46869:98:38"},{"body":{"nodeType":"YulBlock","src":"47068:73:38","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47085:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"47090:6:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47078:6:38"},"nodeType":"YulFunctionCall","src":"47078:19:38"},"nodeType":"YulExpressionStatement","src":"47078:19:38"},{"nodeType":"YulAssignment","src":"47106:29:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47125:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"47130:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47121:3:38"},"nodeType":"YulFunctionCall","src":"47121:14:38"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"47106:11:38"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"47040:3:38","type":""},{"name":"length","nodeType":"YulTypedName","src":"47045:6:38","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"47056:11:38","type":""}],"src":"46973:168:38"},{"body":{"nodeType":"YulBlock","src":"47237:283:38","statements":[{"nodeType":"YulVariableDeclaration","src":"47247:52:38","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"47293:5:38"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"47261:31:38"},"nodeType":"YulFunctionCall","src":"47261:38:38"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"47251:6:38","type":""}]},{"nodeType":"YulAssignment","src":"47308:77:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47373:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"47378:6:38"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"47315:57:38"},"nodeType":"YulFunctionCall","src":"47315:70:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47308:3:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"47433:5:38"},{"kind":"number","nodeType":"YulLiteral","src":"47440:4:38","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47429:3:38"},"nodeType":"YulFunctionCall","src":"47429:16:38"},{"name":"pos","nodeType":"YulIdentifier","src":"47447:3:38"},{"name":"length","nodeType":"YulIdentifier","src":"47452:6:38"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"47394:34:38"},"nodeType":"YulFunctionCall","src":"47394:65:38"},"nodeType":"YulExpressionStatement","src":"47394:65:38"},{"nodeType":"YulAssignment","src":"47468:46:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47479:3:38"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"47506:6:38"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"47484:21:38"},"nodeType":"YulFunctionCall","src":"47484:29:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47475:3:38"},"nodeType":"YulFunctionCall","src":"47475:39:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"47468:3:38"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47218:5:38","type":""},{"name":"pos","nodeType":"YulTypedName","src":"47225:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"47233:3:38","type":""}],"src":"47147:373:38"},{"body":{"nodeType":"YulBlock","src":"47854:725:38","statements":[{"nodeType":"YulAssignment","src":"47864:27:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47876:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"47887:3:38","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47872:3:38"},"nodeType":"YulFunctionCall","src":"47872:19:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47864:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"47945:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47958:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"47969:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47954:3:38"},"nodeType":"YulFunctionCall","src":"47954:17:38"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"47901:43:38"},"nodeType":"YulFunctionCall","src":"47901:71:38"},"nodeType":"YulExpressionStatement","src":"47901:71:38"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"48026:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48039:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"48050:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48035:3:38"},"nodeType":"YulFunctionCall","src":"48035:18:38"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"47982:43:38"},"nodeType":"YulFunctionCall","src":"47982:72:38"},"nodeType":"YulExpressionStatement","src":"47982:72:38"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48075:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"48086:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48071:3:38"},"nodeType":"YulFunctionCall","src":"48071:18:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48095:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"48101:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"48091:3:38"},"nodeType":"YulFunctionCall","src":"48091:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48064:6:38"},"nodeType":"YulFunctionCall","src":"48064:48:38"},"nodeType":"YulExpressionStatement","src":"48064:48:38"},{"nodeType":"YulAssignment","src":"48121:116:38","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"48223:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"48232:4:38"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48129:93:38"},"nodeType":"YulFunctionCall","src":"48129:108:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48121:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48258:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"48269:2:38","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48254:3:38"},"nodeType":"YulFunctionCall","src":"48254:18:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48278:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"48284:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"48274:3:38"},"nodeType":"YulFunctionCall","src":"48274:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48247:6:38"},"nodeType":"YulFunctionCall","src":"48247:48:38"},"nodeType":"YulExpressionStatement","src":"48247:48:38"},{"nodeType":"YulAssignment","src":"48304:116:38","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"48406:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"48415:4:38"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48312:93:38"},"nodeType":"YulFunctionCall","src":"48312:108:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48304:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48441:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"48452:3:38","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48437:3:38"},"nodeType":"YulFunctionCall","src":"48437:19:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48462:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"48468:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"48458:3:38"},"nodeType":"YulFunctionCall","src":"48458:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48430:6:38"},"nodeType":"YulFunctionCall","src":"48430:49:38"},"nodeType":"YulExpressionStatement","src":"48430:49:38"},{"nodeType":"YulAssignment","src":"48488:84:38","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"48558:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"48567:4:38"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48496:61:38"},"nodeType":"YulFunctionCall","src":"48496:76:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48488:4:38"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47794:9:38","type":""},{"name":"value4","nodeType":"YulTypedName","src":"47806:6:38","type":""},{"name":"value3","nodeType":"YulTypedName","src":"47814:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"47822:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"47830:6:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"47838:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"47849:4:38","type":""}],"src":"47526:1053:38"},{"body":{"nodeType":"YulBlock","src":"48647:79:38","statements":[{"nodeType":"YulAssignment","src":"48657:22:38","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"48672:6:38"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"48666:5:38"},"nodeType":"YulFunctionCall","src":"48666:13:38"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"48657:5:38"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48714:5:38"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"48688:25:38"},"nodeType":"YulFunctionCall","src":"48688:32:38"},"nodeType":"YulExpressionStatement","src":"48688:32:38"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48625:6:38","type":""},{"name":"end","nodeType":"YulTypedName","src":"48633:3:38","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"48641:5:38","type":""}],"src":"48585:141:38"},{"body":{"nodeType":"YulBlock","src":"48808:273:38","statements":[{"body":{"nodeType":"YulBlock","src":"48854:83:38","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"48856:77:38"},"nodeType":"YulFunctionCall","src":"48856:79:38"},"nodeType":"YulExpressionStatement","src":"48856:79:38"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"48829:7:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"48838:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"48825:3:38"},"nodeType":"YulFunctionCall","src":"48825:23:38"},{"kind":"number","nodeType":"YulLiteral","src":"48850:2:38","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"48821:3:38"},"nodeType":"YulFunctionCall","src":"48821:32:38"},"nodeType":"YulIf","src":"48818:119:38"},{"nodeType":"YulBlock","src":"48947:127:38","statements":[{"nodeType":"YulVariableDeclaration","src":"48962:15:38","value":{"kind":"number","nodeType":"YulLiteral","src":"48976:1:38","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"48966:6:38","type":""}]},{"nodeType":"YulAssignment","src":"48991:73:38","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49036:9:38"},{"name":"offset","nodeType":"YulIdentifier","src":"49047:6:38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49032:3:38"},"nodeType":"YulFunctionCall","src":"49032:22:38"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"49056:7:38"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"49001:30:38"},"nodeType":"YulFunctionCall","src":"49001:63:38"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"48991:6:38"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48778:9:38","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"48789:7:38","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"48801:6:38","type":""}],"src":"48732:349:38"},{"body":{"nodeType":"YulBlock","src":"49193:70:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"49215:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"49223:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49211:3:38"},"nodeType":"YulFunctionCall","src":"49211:14:38"},{"hexValue":"455243313135353a207472616e736665722072656a6563746564","kind":"string","nodeType":"YulLiteral","src":"49227:28:38","type":"","value":"ERC1155: transfer rejected"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49204:6:38"},"nodeType":"YulFunctionCall","src":"49204:52:38"},"nodeType":"YulExpressionStatement","src":"49204:52:38"}]},"name":"store_literal_in_memory_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"49185:6:38","type":""}],"src":"49087:176:38"},{"body":{"nodeType":"YulBlock","src":"49415:220:38","statements":[{"nodeType":"YulAssignment","src":"49425:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49491:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"49496:2:38","type":"","value":"26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49432:58:38"},"nodeType":"YulFunctionCall","src":"49432:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"49425:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49597:3:38"}],"functionName":{"name":"store_literal_in_memory_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c","nodeType":"YulIdentifier","src":"49508:88:38"},"nodeType":"YulFunctionCall","src":"49508:93:38"},"nodeType":"YulExpressionStatement","src":"49508:93:38"},{"nodeType":"YulAssignment","src":"49610:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49621:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"49626:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49617:3:38"},"nodeType":"YulFunctionCall","src":"49617:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"49610:3:38"}]}]},"name":"abi_encode_t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"49403:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"49411:3:38","type":""}],"src":"49269:366:38"},{"body":{"nodeType":"YulBlock","src":"49812:248:38","statements":[{"nodeType":"YulAssignment","src":"49822:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49834:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"49845:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49830:3:38"},"nodeType":"YulFunctionCall","src":"49830:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49822:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49869:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"49880:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49865:3:38"},"nodeType":"YulFunctionCall","src":"49865:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49888:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"49894:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"49884:3:38"},"nodeType":"YulFunctionCall","src":"49884:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49858:6:38"},"nodeType":"YulFunctionCall","src":"49858:47:38"},"nodeType":"YulExpressionStatement","src":"49858:47:38"},{"nodeType":"YulAssignment","src":"49914:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50048:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49922:124:38"},"nodeType":"YulFunctionCall","src":"49922:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49914:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49792:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49807:4:38","type":""}],"src":"49641:419:38"},{"body":{"nodeType":"YulBlock","src":"50094:152:38","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"50111:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"50114:77:38","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50104:6:38"},"nodeType":"YulFunctionCall","src":"50104:88:38"},"nodeType":"YulExpressionStatement","src":"50104:88:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"50208:1:38","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"50211:4:38","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50201:6:38"},"nodeType":"YulFunctionCall","src":"50201:15:38"},"nodeType":"YulExpressionStatement","src":"50201:15:38"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"50232:1:38","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"50235:4:38","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"50225:6:38"},"nodeType":"YulFunctionCall","src":"50225:15:38"},"nodeType":"YulExpressionStatement","src":"50225:15:38"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"50066:180:38"},{"body":{"nodeType":"YulBlock","src":"50358:73:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"50380:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"50388:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50376:3:38"},"nodeType":"YulFunctionCall","src":"50376:14:38"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"50392:31:38","type":"","value":"ERC1155: insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50369:6:38"},"nodeType":"YulFunctionCall","src":"50369:55:38"},"nodeType":"YulExpressionStatement","src":"50369:55:38"}]},"name":"store_literal_in_memory_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"50350:6:38","type":""}],"src":"50252:179:38"},{"body":{"nodeType":"YulBlock","src":"50583:220:38","statements":[{"nodeType":"YulAssignment","src":"50593:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50659:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"50664:2:38","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50600:58:38"},"nodeType":"YulFunctionCall","src":"50600:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"50593:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50765:3:38"}],"functionName":{"name":"store_literal_in_memory_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab","nodeType":"YulIdentifier","src":"50676:88:38"},"nodeType":"YulFunctionCall","src":"50676:93:38"},"nodeType":"YulExpressionStatement","src":"50676:93:38"},{"nodeType":"YulAssignment","src":"50778:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50789:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"50794:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50785:3:38"},"nodeType":"YulFunctionCall","src":"50785:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"50778:3:38"}]}]},"name":"abi_encode_t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"50571:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"50579:3:38","type":""}],"src":"50437:366:38"},{"body":{"nodeType":"YulBlock","src":"50980:248:38","statements":[{"nodeType":"YulAssignment","src":"50990:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51002:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"51013:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50998:3:38"},"nodeType":"YulFunctionCall","src":"50998:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50990:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51037:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"51048:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51033:3:38"},"nodeType":"YulFunctionCall","src":"51033:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51056:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"51062:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"51052:3:38"},"nodeType":"YulFunctionCall","src":"51052:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51026:6:38"},"nodeType":"YulFunctionCall","src":"51026:47:38"},"nodeType":"YulExpressionStatement","src":"51026:47:38"},{"nodeType":"YulAssignment","src":"51082:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51216:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51090:124:38"},"nodeType":"YulFunctionCall","src":"51090:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51082:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50960:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"50975:4:38","type":""}],"src":"50809:419:38"},{"body":{"nodeType":"YulBlock","src":"51340:61:38","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"51362:6:38"},{"kind":"number","nodeType":"YulLiteral","src":"51370:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51358:3:38"},"nodeType":"YulFunctionCall","src":"51358:14:38"},{"hexValue":"50617573653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"51374:19:38","type":"","value":"Pause: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51351:6:38"},"nodeType":"YulFunctionCall","src":"51351:43:38"},"nodeType":"YulExpressionStatement","src":"51351:43:38"}]},"name":"store_literal_in_memory_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"51332:6:38","type":""}],"src":"51234:167:38"},{"body":{"nodeType":"YulBlock","src":"51553:220:38","statements":[{"nodeType":"YulAssignment","src":"51563:74:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51629:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"51634:2:38","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51570:58:38"},"nodeType":"YulFunctionCall","src":"51570:67:38"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"51563:3:38"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51735:3:38"}],"functionName":{"name":"store_literal_in_memory_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2","nodeType":"YulIdentifier","src":"51646:88:38"},"nodeType":"YulFunctionCall","src":"51646:93:38"},"nodeType":"YulExpressionStatement","src":"51646:93:38"},{"nodeType":"YulAssignment","src":"51748:19:38","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51759:3:38"},{"kind":"number","nodeType":"YulLiteral","src":"51764:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51755:3:38"},"nodeType":"YulFunctionCall","src":"51755:12:38"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"51748:3:38"}]}]},"name":"abi_encode_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"51541:3:38","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"51549:3:38","type":""}],"src":"51407:366:38"},{"body":{"nodeType":"YulBlock","src":"51950:248:38","statements":[{"nodeType":"YulAssignment","src":"51960:26:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51972:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"51983:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51968:3:38"},"nodeType":"YulFunctionCall","src":"51968:18:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51960:4:38"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52007:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"52018:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52003:3:38"},"nodeType":"YulFunctionCall","src":"52003:17:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"52026:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"52032:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"52022:3:38"},"nodeType":"YulFunctionCall","src":"52022:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51996:6:38"},"nodeType":"YulFunctionCall","src":"51996:47:38"},"nodeType":"YulExpressionStatement","src":"51996:47:38"},{"nodeType":"YulAssignment","src":"52052:139:38","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"52186:4:38"}],"functionName":{"name":"abi_encode_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"52060:124:38"},"nodeType":"YulFunctionCall","src":"52060:131:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"52052:4:38"}]}]},"name":"abi_encode_tuple_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"51930:9:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"51945:4:38","type":""}],"src":"51779:419:38"},{"body":{"nodeType":"YulBlock","src":"52432:523:38","statements":[{"nodeType":"YulAssignment","src":"52442:27:38","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52454:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"52465:3:38","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52450:3:38"},"nodeType":"YulFunctionCall","src":"52450:19:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"52442:4:38"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"52523:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52536:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"52547:1:38","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52532:3:38"},"nodeType":"YulFunctionCall","src":"52532:17:38"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"52479:43:38"},"nodeType":"YulFunctionCall","src":"52479:71:38"},"nodeType":"YulExpressionStatement","src":"52479:71:38"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"52604:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52617:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"52628:2:38","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52613:3:38"},"nodeType":"YulFunctionCall","src":"52613:18:38"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"52560:43:38"},"nodeType":"YulFunctionCall","src":"52560:72:38"},"nodeType":"YulExpressionStatement","src":"52560:72:38"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"52686:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52699:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"52710:2:38","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52695:3:38"},"nodeType":"YulFunctionCall","src":"52695:18:38"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"52642:43:38"},"nodeType":"YulFunctionCall","src":"52642:72:38"},"nodeType":"YulExpressionStatement","src":"52642:72:38"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"52768:6:38"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52781:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"52792:2:38","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52777:3:38"},"nodeType":"YulFunctionCall","src":"52777:18:38"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"52724:43:38"},"nodeType":"YulFunctionCall","src":"52724:72:38"},"nodeType":"YulExpressionStatement","src":"52724:72:38"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52817:9:38"},{"kind":"number","nodeType":"YulLiteral","src":"52828:3:38","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52813:3:38"},"nodeType":"YulFunctionCall","src":"52813:19:38"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"52838:4:38"},{"name":"headStart","nodeType":"YulIdentifier","src":"52844:9:38"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"52834:3:38"},"nodeType":"YulFunctionCall","src":"52834:20:38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52806:6:38"},"nodeType":"YulFunctionCall","src":"52806:49:38"},"nodeType":"YulExpressionStatement","src":"52806:49:38"},{"nodeType":"YulAssignment","src":"52864:84:38","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"52934:6:38"},{"name":"tail","nodeType":"YulIdentifier","src":"52943:4:38"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"52872:61:38"},"nodeType":"YulFunctionCall","src":"52872:76:38"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"52864:4:38"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"52372:9:38","type":""},{"name":"value4","nodeType":"YulTypedName","src":"52384:6:38","type":""},{"name":"value3","nodeType":"YulTypedName","src":"52392:6:38","type":""},{"name":"value2","nodeType":"YulTypedName","src":"52400:6:38","type":""},{"name":"value1","nodeType":"YulTypedName","src":"52408:6:38","type":""},{"name":"value0","nodeType":"YulTypedName","src":"52416:6:38","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"52427:4:38","type":""}],"src":"52204:751:38"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1, value2 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3, value4 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value5, value6 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4, value5 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value6, value7 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_array$_t_address_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3, value4 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_string_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1, value2 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3, value4 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4, value5 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ORNF: not admin\")\n\n    }\n\n    function abi_encode_t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 15)\n        store_literal_in_memory_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1279a6440d63b891539c77c01a16af83b8f4d86b9d21fc559ee837204ba7863f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff(memPtr) {\n\n        mstore(add(memPtr, 0), \"ORNF: not super admin\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebe5fb9767df7b1ad9c6ffa78d76b146763bdac097169da2ccd1883331081dff_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300(memPtr) {\n\n        mstore(add(memPtr, 0), \"InterfaceDetection: wrong value\")\n\n    }\n\n    function abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1155: balance of address(0)\")\n\n    }\n\n    function abi_encode_t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_da291acb7ba7320e5cb3008f2562eb4ca104e80ed0f27cb90a724f7ab789a210_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: missing '\")\n\n    }\n\n    function abi_encode_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 24)\n        store_literal_in_memory_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a(pos)\n        end := add(pos, 24)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223(memPtr) {\n\n        mstore(add(memPtr, 0), \"' role\")\n\n    }\n\n    function abi_encode_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 6)\n        store_literal_in_memory_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223(pos)\n        end := add(pos, 6)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_t_string_memory_ptr_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1155: mint to address(0)\")\n\n    }\n\n    function abi_encode_t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_46d78662f7f0687a6bbb38de2fcf626859d705febe421c092808994b05b322ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1155: inconsistent arrays\")\n\n    }\n\n    function abi_encode_t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_af3f0b8f4a736e1bff751e98309584a1417f01fc3bdd5bc41e170b7b365308bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    // string -> string\n    function abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> ret {\n        let slotValue := sload(value)\n        let length := extract_byte_array_length(slotValue)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        switch and(slotValue, 1)\n        case 0 {\n            // short byte array\n            mstore(pos, and(slotValue, not(0xff)))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            // long byte array\n            let dataPos := array_dataslot_t_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 0x20) } {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos, length)\n        }\n    }\n\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1155: non-approved sender\")\n\n    }\n\n    function abi_encode_t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8aa52ca01cf10c77ed8cff8d5d762342b3ac33a1185515aec54f3c2f6d4905bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1155: transfer to address(0)\")\n\n    }\n\n    function abi_encode_t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3291634731be37f0f904d93fe49e4c7df2656110e49a3eefebf1caac5f986dc9_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec() {\n        revert(0, 0)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_calldata_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec() }\n        length := mul(length, 0x20)\n\n        copy_calldata_to_memory(start, pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_calldata_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0, value1,  tail)\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_calldata_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value2, value3,  tail)\n\n    }\n\n    function store_literal_in_memory_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownership: not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pause: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n        store_literal_in_memory_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3327c9534c03baca5f9512908933627b5e282607a0ada6aa064fb028d393a0d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_calldata_ptr(value, len) -> length {\n\n        length := len\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage(slot, src, len) {\n\n        let newLen := array_length_t_string_calldata_ptr(src, len)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := calldataload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function store_literal_in_memory_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1155: self-approval for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_968cf457ade26ecaeb66403f5c7deca0e306a7d83ac3164909487820d81c87f0_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1155: balance overflow\")\n\n    }\n\n    function abi_encode_t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a065c3d6e886798a9ca1119af3f796e79c644f9504cc7fd5baa8dcc5998ca101_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value2,  tail)\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value3,  tail)\n\n        mstore(add(headStart, 128), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value4,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1155: transfer rejected\")\n\n    }\n\n    function abi_encode_t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_059ebd7d0fcfaf37ee765853f36c7f573403b3a1cb82c9f6d66b5bc913fb2d4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1155: insufficient balance\")\n\n    }\n\n    function abi_encode_t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6e93ff111d45171ae69454aafb8e27105c39414d2e548e44c094cd0bd4a1b4ab_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pause: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_21851e75a44236cf8e2000329debbb7cf906dabd696f7ed67909fbd1febe81a2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        mstore(add(headStart, 128), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value4,  tail)\n\n    }\n\n}\n","id":38,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101c35760003560e01c806375b238fc116100f9578063a22cb46511610097578063d547741f11610071578063d547741f146104b4578063e985e9c5146104d0578063f242432a14610500578063f2fde38b1461051c576101c3565b8063a22cb4651461045e578063c634b78e1461047a578063d539139314610496576101c3565b80638456cb59116100d35780638456cb59146103ea5780638bb9c5bf146103f45780638da5cb5b1461041057806391d148541461042e576101c3565b806375b238fc146103945780637e518ec8146103b257806380534934146103ce576101c3565b80633dd1eb61116101665780634e1273f4116101405780634e1273f41461030c5780635b2bd79e1461033c5780635c975abb1461035a5780635cfa929714610378576101c3565b80633dd1eb61146102c85780633f4ba83a146102e45780634460bdd6146102ee576101c3565b80630e89341c116101a25780630e89341c14610244578063124d91e5146102745780632eb2c2d6146102905780632f2ff15d146102ac576101c3565b8062fdd58e146101c857806301ffc9a7146101f85780630d6a5bbb14610228575b600080fd5b6101e260048036038101906101dd9190613509565b610538565b6040516101ef9190613558565b60405180910390f35b610212600480360381019061020d91906135cb565b61055e565b60405161021f9190613613565b60405180910390f35b610242600480360381019061023d91906136e9565b610581565b005b61025e600480360381019061025991906137b2565b6106bb565b60405161026b919061386f565b60405180910390f35b61028e60048036038101906102899190613891565b6106de565b005b6102aa60048036038101906102a591906138e4565b61070a565b005b6102c660048036038101906102c191906139f6565b610745565b005b6102e260048036038101906102dd9190613a36565b61078e565b005b6102ec61085e565b005b6102f6610891565b6040516103039190613a72565b60405180910390f35b61032660048036038101906103219190613ae3565b6108b5565b6040516103339190613c22565b60405180910390f35b6103446108e1565b604051610351919061386f565b60405180910390f35b6103626108f8565b60405161036f9190613613565b60405180910390f35b610392600480360381019061038d9190613c44565b61090f565b005b61039c6109d5565b6040516103a99190613a72565b60405180910390f35b6103cc60048036038101906103c79190613d22565b6109f9565b005b6103e860048036038101906103e39190613d6f565b610a3a565b005b6103f2610a6c565b005b61040e60048036038101906104099190613e04565b610a9f565b005b610418610ac5565b6040516104259190613e40565b60405180910390f35b610448600480360381019061044391906139f6565b610adc565b6040516104559190613613565b60405180910390f35b61047860048036038101906104739190613e87565b610b02565b005b610494600480360381019061048f9190613a36565b610b2b565b005b61049e610bfb565b6040516104ab9190613a72565b60405180910390f35b6104ce60048036038101906104c991906139f6565b610c1f565b005b6104ea60048036038101906104e59190613ec7565b610c68565b6040516104f79190613613565b60405180910390f35b61051a60048036038101906105159190613f07565b610c8e565b005b61053660048036038101906105319190613a36565b610cc3565b005b600061055683836105476112f3565b6113329092919063ffffffff16565b905092915050565b600061057a8261056c611152565b6113fe90919063ffffffff16565b9050919050565b600061058b61152d565b90506105c97f6d696e7465720000000000000000000000000000000000000000000000000000826105ba61104d565b6115359092919063ffffffff16565b6106b18189898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061069f6112f3565b6115b79095949392919063ffffffff16565b5050505050505050565b60606106d7826106c9611781565b6117c090919063ffffffff16565b9050919050565b6107056106e961152d565b8484846106f46112f3565b6117f790949392919063ffffffff16565b505050565b61073b61071561152d565b89898989898989896107256112f3565b6118d3909998979695949392919063ffffffff16565b5050505050505050565b600061074f61152d565b905061076b8161075d610daa565b611bb690919063ffffffff16565b61078983838361077961104d565b61108c909392919063ffffffff16565b505050565b600061079861152d565b90506107dd7f61646d696e0000000000000000000000000000000000000000000000000000006107c661152d565b6107ce61104d565b6112889092919063ffffffff16565b61081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081390613fed565b60405180910390fd5b61085a7f6d696e7465720000000000000000000000000000000000000000000000000000838361084a61104d565b61108c909392919063ffffffff16565b5050565b61087f61086961152d565b610871610daa565b611bb690919063ffffffff16565b61088f61088a610f7b565b611c4c565b565b7f73757065725f61646d696e00000000000000000000000000000000000000000081565b60606108d7858585856108c66112f3565b611ca190949392919063ffffffff16565b9050949350505050565b60606108f36108ee611781565b611dd2565b905090565b600061090a610905610f7b565b611e68565b905090565b61091f61091a610f7b565b611e83565b600061092961152d565b90506109677f6d696e74657200000000000000000000000000000000000000000000000000008261095861104d565b6115359092919063ffffffff16565b6109cd8187878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506109bb6112f3565b611ed89095949392919063ffffffff16565b505050505050565b7f61646d696e00000000000000000000000000000000000000000000000000000081565b610a1a610a0461152d565b610a0c610daa565b611bb690919063ffffffff16565b610a368282610a27611781565b61200e9092919063ffffffff16565b5050565b610a65610a4561152d565b8686868686610a526112f3565b612060909695949392919063ffffffff16565b5050505050565b610a8d610a7761152d565b610a7f610daa565b611bb690919063ffffffff16565b610a9d610a98610f7b565b6121d8565b565b610ac2610aaa61152d565b82610ab361104d565b61222d9092919063ffffffff16565b50565b6000610ad7610ad2610daa565b6122ed565b905090565b6000610afa8383610aeb61104d565b6112889092919063ffffffff16565b905092915050565b610b27610b0d61152d565b8383610b176112f3565b61231b909392919063ffffffff16565b5050565b6000610b3561152d565b9050610b7a7f73757065725f61646d696e000000000000000000000000000000000000000000610b6361152d565b610b6b61104d565b6112889092919063ffffffff16565b610bb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb090614059565b60405180910390fd5b610bf77f61646d696e0000000000000000000000000000000000000000000000000000008383610be761104d565b61108c909392919063ffffffff16565b5050565b7f6d696e746572000000000000000000000000000000000000000000000000000081565b6000610c2961152d565b9050610c4581610c37610daa565b611bb690919063ffffffff16565b610c63838383610c5361104d565b61248a909392919063ffffffff16565b505050565b6000610c868383610c776112f3565b6125519092919063ffffffff16565b905092915050565b610cbb610c9961152d565b878787878787610ca76112f3565b6125e890979695949392919063ffffffff16565b505050505050565b610d067f73757065725f61646d696e000000000000000000000000000000000000000000610cef61152d565b610cf761104d565b6112889092919063ffffffff16565b610d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3c90614059565b60405180910390fd5b610d68610d5061152d565b82610d59610daa565b6127ad9092919063ffffffff16565b50565b610da87fd9b67a26000000000000000000000000000000000000000000000000000000006001610d99611152565b6111919092919063ffffffff16565b565b60008060017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd60001c610ddd91906140a8565b60001b90508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ebc57808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b610ef97f7f5828d0000000000000000000000000000000000000000000000000000000006001610eea611152565b6111919092919063ffffffff16565b5050565b610f3a7f5190c92c000000000000000000000000000000000000000000000000000000006001610f2b611152565b6111919092919063ffffffff16565b565b610f797f921ed8d1000000000000000000000000000000000000000000000000000000006001610f6a611152565b6111919092919063ffffffff16565b565b60008060017f0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f60001c610fae91906140a8565b60001b90508091505090565b801561100a5760018260000160006101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a15b5050565b61104b7f0e89341c00000000000000000000000000000000000000000000000000000000600161103c611152565b6111919092919063ffffffff16565b565b60008060017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b2360001c61108091906140a8565b60001b90508091505090565b6110a18383866112889092919063ffffffff16565b61114c57600184600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d838383604051611143939291906140dc565b60405180910390a15b50505050565b60008060017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e60001c61118591906140a8565b60001b90508091505090565b63ffffffff60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120f9061415f565b60405180910390fd5b80836000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600083600001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b60008060017f5ccf5846fa27a68fafc8e588671a68f5e67c2f9b56af4263806a4d71735e861360001c61132691906140a8565b60001b90508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611399906141cb565b60405180910390fd5b83600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b600063ffffffff60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036114555760009050611527565b7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036114c35760019050611527565b826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff1690505b92915050565b600033905090565b61154a8282856112889092919063ffffffff16565b6115b2576115578261291b565b60405160200161156791906142bf565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a9919061386f565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d90614338565b60405180910390fd5b6000835190508251811461166f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611666906143a4565b60405180910390fd5b60005b8181146116c4576116b98887878481518110611691576116906143c4565b5b60200260200101518785815181106116ac576116ab6143c4565b5b6020026020010151612a9c565b806001019050611672565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161173c9291906143f3565b60405180910390a46117638573ffffffffffffffffffffffffffffffffffffffff16612ba4565b156117785761177786600087878787612bc7565b5b50505050505050565b60008060017fe94434e3c6b941c5d90218142fadcc69cb2e13723993540bfa1c131dd1d3475a60001c6117b491906140a8565b60001b90508091505090565b6060826000016117cf83612cd9565b6040516020016117e0929190614522565b604051602081830303815290604052905092915050565b611802858486612da7565b611841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183890614592565b60405180910390fd5b61184d85848484612e74565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516118c49291906145b2565b60405180910390a45050505050565b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603611942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193990614627565b60405180910390fd5b600086869050905084849050811461198f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611986906143a4565b60405180910390fd5b61199a8b8a8c612da7565b6119d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d090614592565b60405180910390fd5b60005b818114611a2d57611a228c8b8b8b8b868181106119fc576119fb6143c4565b5b905060200201358a8a87818110611a1657611a156143c4565b5b90506020020135612f7c565b8060010190506119dc565b508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8a8a8a8a604051611aa894939291906146b1565b60405180910390a4611acf8873ffffffffffffffffffffffffffffffffffffffff16612ba4565b15611ba957611ba88a8a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612bc7565b5b5050505050505050505050565b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3f90614738565b60405180910390fd5b5050565b611c55816131b2565b60008160000160006101000a81548160ff0219169083151502179055507fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693360405160405180910390a150565b60606000858590509050838390508114611cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce7906143a4565b60405180910390fd5b8585905067ffffffffffffffff811115611d0d57611d0c614758565b5b604051908082528060200260200182016040528015611d3b5781602001602082028036833780820191505090505b50915060005b818114611dc757611d9d878783818110611d5e57611d5d6143c4565b5b9050602002016020810190611d739190613a36565b868684818110611d8657611d856143c4565b5b905060200201358a6113329092919063ffffffff16565b838281518110611db057611daf6143c4565b5b602002602001018181525050806001019050611d41565b505095945050505050565b6060816000018054611de390614459565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0f90614459565b8015611e5c5780601f10611e3157610100808354040283529160200191611e5c565b820191906000526020600020905b815481529060010190602001808311611e3f57829003601f168201915b50505050509050919050565b60008160000160009054906101000a900460ff169050919050565b8060000160009054906101000a900460ff1615611ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecc906147d3565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611f47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3e90614338565b60405180910390fd5b611f5386858585612a9c565b8373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051611fca9291906145b2565b60405180910390a4611ff18473ffffffffffffffffffffffffffffffffffffffff16612ba4565b156120065761200585600086868686613206565b5b505050505050565b8181846000019182612021929190614995565b507f04b1dc5c136a3ce9fded8db0ce3d3366c58764ec3a8e4c2b9e52e4ddfe5ebbf78282604051612053929190614aa1565b60405180910390a1505050565b60008484905090508282905081146120ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a4906143a4565b60405180910390fd5b6120b8888789612da7565b6120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90614592565b60405180910390fd5b60005b81811461214a5761213f8988888885818110612119576121186143c4565b5b90506020020135878786818110612133576121326143c4565b5b90506020020135612e74565b8060010190506120fa565b50600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb888888886040516121c694939291906146b1565b60405180910390a45050505050505050565b6121e181611e83565b60018160000160006101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a150565b6122428183856115359092919063ffffffff16565b600083600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8183846040516122e0939291906140dc565b60405180910390a1505050565b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238090614b11565b60405180910390fd5b808460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161247c9190613613565b60405180910390a350505050565b61249f8383866112889092919063ffffffff16565b1561254b57600084600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b838383604051612542939291906140dc565b60405180910390a15b50505050565b60008360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264e90614627565b60405180910390fd5b612662888789612da7565b6126a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269890614592565b60405180910390fd5b6126ae8887878787612f7c565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516127249291906145b2565b60405180910390a461274b8573ffffffffffffffffffffffffffffffffffffffff16612ba4565b156127a3576127a2878787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613206565b5b5050505050505050565b60008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283b90614738565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461291557818460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b50505050565b60606000801b820361293e57604051806020016040528060008152509050612a97565b6000826040516020016129519190614b52565b60405160208183030381529060405290506000601f90505b6001156129c657600060f81b828281518110612988576129876143c4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036129c65780600190039050612969565b60006001820167ffffffffffffffff8111156129e5576129e4614758565b5b6040519080825280601f01601f191660200182016040528015612a175781602001600182028036833780820191505090505b50905060005b828111612a8f57838181518110612a3757612a366143c4565b5b602001015160f81c60f81b828281518110612a5557612a546143c4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806001019050612a1d565b508093505050505b919050565b60008114612b9e57600084600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008282019050818111612b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3b90614bb9565b60405180910390fd5b8086600001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663bc197c8188888787876040518663ffffffff1660e01b8152600401612c2f959493929190614c2e565b6020604051808303816000875af1158015612c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c729190614cab565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc890614d24565b60405180910390fd5b505050505050565b606060006001612ce884613318565b01905060008167ffffffffffffffff811115612d0757612d06614758565b5b6040519080825280601f01601f191660200182016040528015612d395781602001600182028036833780820191505090505b509050600082602001820190505b600115612d9c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612d9057612d8f614d44565b5b04945060008503612d47575b819350505050919050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612e6b57508360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b90509392505050565b60008114612f7657600084600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008282039050818110612f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1390614dbf565b60405180910390fd5b8086600001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505b50505050565b600081146131ab57600085600001600084815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008282039050818110613024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301b90614dbf565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146131a857600087600001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600084820190508181116130f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ee90614bb9565b60405180910390fd5b8289600001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508089600001600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505b50505b5050505050565b8060000160009054906101000a900460ff16613203576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131fa90614e2b565b60405180910390fd5b50565b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663f23a6e6188888787876040518663ffffffff1660e01b815260040161326e959493929190614e4b565b6020604051808303816000875af115801561328d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b19190614cab565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161330790614d24565b60405180910390fd5b505050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613376577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161336c5761336b614d44565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106133b3576d04ee2d6d415b85acef810000000083816133a9576133a8614d44565b5b0492506020810190505b662386f26fc1000083106133e257662386f26fc1000083816133d8576133d7614d44565b5b0492506010810190505b6305f5e100831061340b576305f5e100838161340157613400614d44565b5b0492506008810190505b612710831061343057612710838161342657613425614d44565b5b0492506004810190505b60648310613453576064838161344957613448614d44565b5b0492506002810190505b600a8310613462576001810190505b80915050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134a082613475565b9050919050565b6134b081613495565b81146134bb57600080fd5b50565b6000813590506134cd816134a7565b92915050565b6000819050919050565b6134e6816134d3565b81146134f157600080fd5b50565b600081359050613503816134dd565b92915050565b600080604083850312156135205761351f61346b565b5b600061352e858286016134be565b925050602061353f858286016134f4565b9150509250929050565b613552816134d3565b82525050565b600060208201905061356d6000830184613549565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6135a881613573565b81146135b357600080fd5b50565b6000813590506135c58161359f565b92915050565b6000602082840312156135e1576135e061346b565b5b60006135ef848285016135b6565b91505092915050565b60008115159050919050565b61360d816135f8565b82525050565b60006020820190506136286000830184613604565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126136535761365261362e565b5b8235905067ffffffffffffffff8111156136705761366f613633565b5b60208301915083602082028301111561368c5761368b613638565b5b9250929050565b60008083601f8401126136a9576136a861362e565b5b8235905067ffffffffffffffff8111156136c6576136c5613633565b5b6020830191508360018202830111156136e2576136e1613638565b5b9250929050565b60008060008060008060006080888a0312156137085761370761346b565b5b60006137168a828b016134be565b975050602088013567ffffffffffffffff81111561373757613736613470565b5b6137438a828b0161363d565b9650965050604088013567ffffffffffffffff81111561376657613765613470565b5b6137728a828b0161363d565b9450945050606088013567ffffffffffffffff81111561379557613794613470565b5b6137a18a828b01613693565b925092505092959891949750929550565b6000602082840312156137c8576137c761346b565b5b60006137d6848285016134f4565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156138195780820151818401526020810190506137fe565b60008484015250505050565b6000601f19601f8301169050919050565b6000613841826137df565b61384b81856137ea565b935061385b8185602086016137fb565b61386481613825565b840191505092915050565b600060208201905081810360008301526138898184613836565b905092915050565b6000806000606084860312156138aa576138a961346b565b5b60006138b8868287016134be565b93505060206138c9868287016134f4565b92505060406138da868287016134f4565b9150509250925092565b60008060008060008060008060a0898b0312156139045761390361346b565b5b60006139128b828c016134be565b98505060206139238b828c016134be565b975050604089013567ffffffffffffffff81111561394457613943613470565b5b6139508b828c0161363d565b9650965050606089013567ffffffffffffffff81111561397357613972613470565b5b61397f8b828c0161363d565b9450945050608089013567ffffffffffffffff8111156139a2576139a1613470565b5b6139ae8b828c01613693565b92509250509295985092959890939650565b6000819050919050565b6139d3816139c0565b81146139de57600080fd5b50565b6000813590506139f0816139ca565b92915050565b60008060408385031215613a0d57613a0c61346b565b5b6000613a1b858286016139e1565b9250506020613a2c858286016134be565b9150509250929050565b600060208284031215613a4c57613a4b61346b565b5b6000613a5a848285016134be565b91505092915050565b613a6c816139c0565b82525050565b6000602082019050613a876000830184613a63565b92915050565b60008083601f840112613aa357613aa261362e565b5b8235905067ffffffffffffffff811115613ac057613abf613633565b5b602083019150836020820283011115613adc57613adb613638565b5b9250929050565b60008060008060408587031215613afd57613afc61346b565b5b600085013567ffffffffffffffff811115613b1b57613b1a613470565b5b613b2787828801613a8d565b9450945050602085013567ffffffffffffffff811115613b4a57613b49613470565b5b613b568782880161363d565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613b99816134d3565b82525050565b6000613bab8383613b90565b60208301905092915050565b6000602082019050919050565b6000613bcf82613b64565b613bd98185613b6f565b9350613be483613b80565b8060005b83811015613c15578151613bfc8882613b9f565b9750613c0783613bb7565b925050600181019050613be8565b5085935050505092915050565b60006020820190508181036000830152613c3c8184613bc4565b905092915050565b600080600080600060808688031215613c6057613c5f61346b565b5b6000613c6e888289016134be565b9550506020613c7f888289016134f4565b9450506040613c90888289016134f4565b935050606086013567ffffffffffffffff811115613cb157613cb0613470565b5b613cbd88828901613693565b92509250509295509295909350565b60008083601f840112613ce257613ce161362e565b5b8235905067ffffffffffffffff811115613cff57613cfe613633565b5b602083019150836001820283011115613d1b57613d1a613638565b5b9250929050565b60008060208385031215613d3957613d3861346b565b5b600083013567ffffffffffffffff811115613d5757613d56613470565b5b613d6385828601613ccc565b92509250509250929050565b600080600080600060608688031215613d8b57613d8a61346b565b5b6000613d99888289016134be565b955050602086013567ffffffffffffffff811115613dba57613db9613470565b5b613dc68882890161363d565b9450945050604086013567ffffffffffffffff811115613de957613de8613470565b5b613df58882890161363d565b92509250509295509295909350565b600060208284031215613e1a57613e1961346b565b5b6000613e28848285016139e1565b91505092915050565b613e3a81613495565b82525050565b6000602082019050613e556000830184613e31565b92915050565b613e64816135f8565b8114613e6f57600080fd5b50565b600081359050613e8181613e5b565b92915050565b60008060408385031215613e9e57613e9d61346b565b5b6000613eac858286016134be565b9250506020613ebd85828601613e72565b9150509250929050565b60008060408385031215613ede57613edd61346b565b5b6000613eec858286016134be565b9250506020613efd858286016134be565b9150509250929050565b60008060008060008060a08789031215613f2457613f2361346b565b5b6000613f3289828a016134be565b9650506020613f4389828a016134be565b9550506040613f5489828a016134f4565b9450506060613f6589828a016134f4565b935050608087013567ffffffffffffffff811115613f8657613f85613470565b5b613f9289828a01613693565b92509250509295509295509295565b7f4f524e463a206e6f742061646d696e0000000000000000000000000000000000600082015250565b6000613fd7600f836137ea565b9150613fe282613fa1565b602082019050919050565b6000602082019050818103600083015261400681613fca565b9050919050565b7f4f524e463a206e6f742073757065722061646d696e0000000000000000000000600082015250565b60006140436015836137ea565b915061404e8261400d565b602082019050919050565b6000602082019050818103600083015261407281614036565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006140b3826134d3565b91506140be836134d3565b92508282039050818111156140d6576140d5614079565b5b92915050565b60006060820190506140f16000830186613a63565b6140fe6020830185613e31565b61410b6040830184613e31565b949350505050565b7f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500600082015250565b6000614149601f836137ea565b915061415482614113565b602082019050919050565b600060208201905081810360008301526141788161413c565b9050919050565b7f455243313135353a2062616c616e6365206f6620616464726573732830290000600082015250565b60006141b5601e836137ea565b91506141c08261417f565b602082019050919050565b600060208201905081810360008301526141e4816141a8565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206d697373696e6720270000000000000000600082015250565b600061422c6018836141eb565b9150614237826141f6565b601882019050919050565b600061424d826137df565b61425781856141eb565b93506142678185602086016137fb565b80840191505092915050565b7f2720726f6c650000000000000000000000000000000000000000000000000000600082015250565b60006142a96006836141eb565b91506142b482614273565b600682019050919050565b60006142ca8261421f565b91506142d68284614242565b91506142e18261429c565b915081905092915050565b7f455243313135353a206d696e7420746f20616464726573732830290000000000600082015250565b6000614322601b836137ea565b915061432d826142ec565b602082019050919050565b6000602082019050818103600083015261435181614315565b9050919050565b7f455243313135353a20696e636f6e73697374656e742061727261797300000000600082015250565b600061438e601c836137ea565b915061439982614358565b602082019050919050565b600060208201905081810360008301526143bd81614381565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050818103600083015261440d8185613bc4565b905081810360208301526144218184613bc4565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061447157607f821691505b6020821081036144845761448361442a565b5b50919050565b60008190508160005260206000209050919050565b600081546144ac81614459565b6144b681866141eb565b945060018216600081146144d157600181146144e657614519565b60ff1983168652811515820286019350614519565b6144ef8561448a565b60005b83811015614511578154818901526001820191506020810190506144f2565b838801955050505b50505092915050565b600061452e828561449f565b915061453a8284614242565b91508190509392505050565b7f455243313135353a206e6f6e2d617070726f7665642073656e64657200000000600082015250565b600061457c601c836137ea565b915061458782614546565b602082019050919050565b600060208201905081810360008301526145ab8161456f565b9050919050565b60006040820190506145c76000830185613549565b6145d46020830184613549565b9392505050565b7f455243313135353a207472616e7366657220746f206164647265737328302900600082015250565b6000614611601f836137ea565b915061461c826145db565b602082019050919050565b6000602082019050818103600083015261464081614604565b9050919050565b600080fd5b82818337505050565b60006146618385613b6f565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561469457614693614647565b5b6020830292506146a583858461464c565b82840190509392505050565b600060408201905081810360008301526146cc818688614655565b905081810360208301526146e1818486614655565b905095945050505050565b7f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000600082015250565b60006147226018836137ea565b915061472d826146ec565b602082019050919050565b6000602082019050818103600083015261475181614715565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f50617573653a2070617573656400000000000000000000000000000000000000600082015250565b60006147bd600d836137ea565b91506147c882614787565b602082019050919050565b600060208201905081810360008301526147ec816147b0565b9050919050565b600082905092915050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261484b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261480e565b614855868361480e565b95508019841693508086168417925050509392505050565b6000819050919050565b600061489261488d614888846134d3565b61486d565b6134d3565b9050919050565b6000819050919050565b6148ac83614877565b6148c06148b882614899565b84845461481b565b825550505050565b600090565b6148d56148c8565b6148e08184846148a3565b505050565b5b81811015614904576148f96000826148cd565b6001810190506148e6565b5050565b601f8211156149495761491a8161448a565b614923846147fe565b81016020851015614932578190505b61494661493e856147fe565b8301826148e5565b50505b505050565b600082821c905092915050565b600061496c6000198460080261494e565b1980831691505092915050565b6000614985838361495b565b9150826002028217905092915050565b61499f83836147f3565b67ffffffffffffffff8111156149b8576149b7614758565b5b6149c28254614459565b6149cd828285614908565b6000601f8311600181146149fc57600084156149ea578287013590505b6149f48582614979565b865550614a5c565b601f198416614a0a8661448a565b60005b82811015614a3257848901358255600182019150602085019450602081019050614a0d565b86831015614a4f5784890135614a4b601f89168261495b565b8355505b6001600288020188555050505b50505050505050565b82818337600083830152505050565b6000614a8083856137ea565b9350614a8d838584614a65565b614a9683613825565b840190509392505050565b60006020820190508181036000830152614abc818486614a74565b90509392505050565b7f455243313135353a2073656c662d617070726f76616c20666f7220616c6c0000600082015250565b6000614afb601e836137ea565b9150614b0682614ac5565b602082019050919050565b60006020820190508181036000830152614b2a81614aee565b9050919050565b6000819050919050565b614b4c614b47826139c0565b614b31565b82525050565b6000614b5e8284614b3b565b60208201915081905092915050565b7f455243313135353a2062616c616e6365206f766572666c6f7700000000000000600082015250565b6000614ba36019836137ea565b9150614bae82614b6d565b602082019050919050565b60006020820190508181036000830152614bd281614b96565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614c0082614bd9565b614c0a8185614be4565b9350614c1a8185602086016137fb565b614c2381613825565b840191505092915050565b600060a082019050614c436000830188613e31565b614c506020830187613e31565b8181036040830152614c628186613bc4565b90508181036060830152614c768185613bc4565b90508181036080830152614c8a8184614bf5565b90509695505050505050565b600081519050614ca58161359f565b92915050565b600060208284031215614cc157614cc061346b565b5b6000614ccf84828501614c96565b91505092915050565b7f455243313135353a207472616e736665722072656a6563746564000000000000600082015250565b6000614d0e601a836137ea565b9150614d1982614cd8565b602082019050919050565b60006020820190508181036000830152614d3d81614d01565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f455243313135353a20696e73756666696369656e742062616c616e6365000000600082015250565b6000614da9601d836137ea565b9150614db482614d73565b602082019050919050565b60006020820190508181036000830152614dd881614d9c565b9050919050565b7f50617573653a206e6f7420706175736564000000000000000000000000000000600082015250565b6000614e156011836137ea565b9150614e2082614ddf565b602082019050919050565b60006020820190508181036000830152614e4481614e08565b9050919050565b600060a082019050614e606000830188613e31565b614e6d6020830187613e31565b614e7a6040830186613549565b614e876060830185613549565b8181036080830152614e998184614bf5565b9050969550505050505056fea2646970667358221220b0e63b1882236726543f30c62a83fcebc8f9c556a7d5751ab1bd161b87f37b8464736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4D0 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x500 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x51C JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x45E JUMPI DUP1 PUSH4 0xC634B78E EQ PUSH2 0x47A JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x496 JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0x8456CB59 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x42E JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0x75B238FC EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x7E518EC8 EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x80534934 EQ PUSH2 0x3CE JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0x3DD1EB61 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x5B2BD79E EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0x5CFA9297 EQ PUSH2 0x378 JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0x3DD1EB61 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x4460BDD6 EQ PUSH2 0x2EE JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0x124D91E5 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2AC JUMPI PUSH2 0x1C3 JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xD6A5BBB EQ PUSH2 0x228 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0x3509 JUMP JUMPDEST PUSH2 0x538 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0x3558 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x212 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20D SWAP2 SWAP1 PUSH2 0x35CB JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21F SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x242 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23D SWAP2 SWAP1 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x581 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x259 SWAP2 SWAP1 PUSH2 0x37B2 JUMP JUMPDEST PUSH2 0x6BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26B SWAP2 SWAP1 PUSH2 0x386F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x289 SWAP2 SWAP1 PUSH2 0x3891 JUMP JUMPDEST PUSH2 0x6DE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x38E4 JUMP JUMPDEST PUSH2 0x70A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x39F6 JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DD SWAP2 SWAP1 PUSH2 0x3A36 JUMP JUMPDEST PUSH2 0x78E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2EC PUSH2 0x85E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F6 PUSH2 0x891 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x303 SWAP2 SWAP1 PUSH2 0x3A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x326 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x3AE3 JUMP JUMPDEST PUSH2 0x8B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x333 SWAP2 SWAP1 PUSH2 0x3C22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x344 PUSH2 0x8E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x351 SWAP2 SWAP1 PUSH2 0x386F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x362 PUSH2 0x8F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x392 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x3C44 JUMP JUMPDEST PUSH2 0x90F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x39C PUSH2 0x9D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A9 SWAP2 SWAP1 PUSH2 0x3A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C7 SWAP2 SWAP1 PUSH2 0x3D22 JUMP JUMPDEST PUSH2 0x9F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3E3 SWAP2 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0xA3A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F2 PUSH2 0xA6C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x40E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x409 SWAP2 SWAP1 PUSH2 0x3E04 JUMP JUMPDEST PUSH2 0xA9F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x418 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x3E40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x448 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x443 SWAP2 SWAP1 PUSH2 0x39F6 JUMP JUMPDEST PUSH2 0xADC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x455 SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x478 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x473 SWAP2 SWAP1 PUSH2 0x3E87 JUMP JUMPDEST PUSH2 0xB02 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x494 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x48F SWAP2 SWAP1 PUSH2 0x3A36 JUMP JUMPDEST PUSH2 0xB2B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x49E PUSH2 0xBFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4AB SWAP2 SWAP1 PUSH2 0x3A72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x39F6 JUMP JUMPDEST PUSH2 0xC1F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4EA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4E5 SWAP2 SWAP1 PUSH2 0x3EC7 JUMP JUMPDEST PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F7 SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x51A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x515 SWAP2 SWAP1 PUSH2 0x3F07 JUMP JUMPDEST PUSH2 0xC8E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x531 SWAP2 SWAP1 PUSH2 0x3A36 JUMP JUMPDEST PUSH2 0xCC3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x556 DUP4 DUP4 PUSH2 0x547 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x1332 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57A DUP3 PUSH2 0x56C PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x13FE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0x5C9 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP3 PUSH2 0x5BA PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1535 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x6B1 DUP2 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x69F PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x15B7 SWAP1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6D7 DUP3 PUSH2 0x6C9 PUSH2 0x1781 JUMP JUMPDEST PUSH2 0x17C0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x705 PUSH2 0x6E9 PUSH2 0x152D JUMP JUMPDEST DUP5 DUP5 DUP5 PUSH2 0x6F4 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x17F7 SWAP1 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x73B PUSH2 0x715 PUSH2 0x152D JUMP JUMPDEST DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x725 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x18D3 SWAP1 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74F PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0x76B DUP2 PUSH2 0x75D PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x789 DUP4 DUP4 DUP4 PUSH2 0x779 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x108C SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x798 PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0x7DD PUSH32 0x61646D696E000000000000000000000000000000000000000000000000000000 PUSH2 0x7C6 PUSH2 0x152D JUMP JUMPDEST PUSH2 0x7CE PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x81C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x813 SWAP1 PUSH2 0x3FED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x85A PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP4 DUP4 PUSH2 0x84A PUSH2 0x104D JUMP JUMPDEST PUSH2 0x108C SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x87F PUSH2 0x869 PUSH2 0x152D JUMP JUMPDEST PUSH2 0x871 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x88F PUSH2 0x88A PUSH2 0xF7B JUMP JUMPDEST PUSH2 0x1C4C JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x73757065725F61646D696E000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x8D7 DUP6 DUP6 DUP6 DUP6 PUSH2 0x8C6 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x1CA1 SWAP1 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x8F3 PUSH2 0x8EE PUSH2 0x1781 JUMP JUMPDEST PUSH2 0x1DD2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90A PUSH2 0x905 PUSH2 0xF7B JUMP JUMPDEST PUSH2 0x1E68 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x91F PUSH2 0x91A PUSH2 0xF7B JUMP JUMPDEST PUSH2 0x1E83 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x929 PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0x967 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP3 PUSH2 0x958 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1535 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9CD DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x9BB PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x1ED8 SWAP1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x61646D696E000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0xA1A PUSH2 0xA04 PUSH2 0x152D JUMP JUMPDEST PUSH2 0xA0C PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xA36 DUP3 DUP3 PUSH2 0xA27 PUSH2 0x1781 JUMP JUMPDEST PUSH2 0x200E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA65 PUSH2 0xA45 PUSH2 0x152D JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0xA52 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x2060 SWAP1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA8D PUSH2 0xA77 PUSH2 0x152D JUMP JUMPDEST PUSH2 0xA7F PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xA9D PUSH2 0xA98 PUSH2 0xF7B JUMP JUMPDEST PUSH2 0x21D8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xAC2 PUSH2 0xAAA PUSH2 0x152D JUMP JUMPDEST DUP3 PUSH2 0xAB3 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x222D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD7 PUSH2 0xAD2 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x22ED JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAFA DUP4 DUP4 PUSH2 0xAEB PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB27 PUSH2 0xB0D PUSH2 0x152D JUMP JUMPDEST DUP4 DUP4 PUSH2 0xB17 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x231B SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB35 PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0xB7A PUSH32 0x73757065725F61646D696E000000000000000000000000000000000000000000 PUSH2 0xB63 PUSH2 0x152D JUMP JUMPDEST PUSH2 0xB6B PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xBB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB0 SWAP1 PUSH2 0x4059 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBF7 PUSH32 0x61646D696E000000000000000000000000000000000000000000000000000000 DUP4 DUP4 PUSH2 0xBE7 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x108C SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC29 PUSH2 0x152D JUMP JUMPDEST SWAP1 POP PUSH2 0xC45 DUP2 PUSH2 0xC37 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x1BB6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC63 DUP4 DUP4 DUP4 PUSH2 0xC53 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x248A SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC86 DUP4 DUP4 PUSH2 0xC77 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x2551 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCBB PUSH2 0xC99 PUSH2 0x152D JUMP JUMPDEST DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xCA7 PUSH2 0x12F3 JUMP JUMPDEST PUSH2 0x25E8 SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD06 PUSH32 0x73757065725F61646D696E000000000000000000000000000000000000000000 PUSH2 0xCEF PUSH2 0x152D JUMP JUMPDEST PUSH2 0xCF7 PUSH2 0x104D JUMP JUMPDEST PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xD45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD3C SWAP1 PUSH2 0x4059 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD68 PUSH2 0xD50 PUSH2 0x152D JUMP JUMPDEST DUP3 PUSH2 0xD59 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x27AD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xDA8 PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xD99 PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH1 0x0 SHR PUSH2 0xDDD SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEBC JUMPI DUP1 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST PUSH2 0xEF9 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xEEA PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xF3A PUSH32 0x5190C92C00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xF2B PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF79 PUSH32 0x921ED8D100000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xF6A PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0x186A05F63B1553398AD5EA3233C0CE68B8C9EECC47717F123C5C2B42FBD6D9F PUSH1 0x0 SHR PUSH2 0xFAE SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x100A JUMPI PUSH1 0x1 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x104B PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x103C PUSH2 0x1152 JUMP JUMPDEST PUSH2 0x1191 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH1 0x0 SHR PUSH2 0x1080 SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x10A1 DUP4 DUP4 DUP7 PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x114C JUMPI PUSH1 0x1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1143 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH1 0x0 SHR PUSH2 0x1185 SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SUB PUSH2 0x1218 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120F SWAP1 PUSH2 0x415F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0x5CCF5846FA27A68FAFC8E588671A68F5E67C2F9B56AF4263806A4D71735E8613 PUSH1 0x0 SHR PUSH2 0x1326 SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1399 SWAP1 PUSH2 0x41CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SUB PUSH2 0x1455 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1527 JUMP JUMPDEST PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SUB PUSH2 0x14C3 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1527 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x154A DUP3 DUP3 DUP6 PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x15B2 JUMPI PUSH2 0x1557 DUP3 PUSH2 0x291B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1567 SWAP2 SWAP1 PUSH2 0x42BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15A9 SWAP2 SWAP1 PUSH2 0x386F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1626 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x161D SWAP1 PUSH2 0x4338 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD SWAP1 POP DUP3 MLOAD DUP2 EQ PUSH2 0x166F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1666 SWAP1 PUSH2 0x43A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x16C4 JUMPI PUSH2 0x16B9 DUP9 DUP8 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1691 JUMPI PUSH2 0x1690 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x16AC JUMPI PUSH2 0x16AB PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2A9C JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1672 JUMP JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x173C SWAP3 SWAP2 SWAP1 PUSH2 0x43F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1763 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BA4 JUMP JUMPDEST ISZERO PUSH2 0x1778 JUMPI PUSH2 0x1777 DUP7 PUSH1 0x0 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2BC7 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH32 0xE94434E3C6B941C5D90218142FADCC69CB2E13723993540BFA1C131DD1D3475A PUSH1 0x0 SHR PUSH2 0x17B4 SWAP2 SWAP1 PUSH2 0x40A8 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH1 0x0 ADD PUSH2 0x17CF DUP4 PUSH2 0x2CD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17E0 SWAP3 SWAP2 SWAP1 PUSH2 0x4522 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1802 DUP6 DUP5 DUP7 PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x1841 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1838 SWAP1 PUSH2 0x4592 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x184D DUP6 DUP5 DUP5 DUP5 PUSH2 0x2E74 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x18C4 SWAP3 SWAP2 SWAP1 PUSH2 0x45B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1942 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1939 SWAP1 PUSH2 0x4627 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP7 SWAP1 POP SWAP1 POP DUP5 DUP5 SWAP1 POP DUP2 EQ PUSH2 0x198F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1986 SWAP1 PUSH2 0x43A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x199A DUP12 DUP11 DUP13 PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x19D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19D0 SWAP1 PUSH2 0x4592 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A2D JUMPI PUSH2 0x1A22 DUP13 DUP12 DUP12 DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x19FC JUMPI PUSH2 0x19FB PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP11 DUP11 DUP8 DUP2 DUP2 LT PUSH2 0x1A16 JUMPI PUSH2 0x1A15 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x2F7C JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x19DC JUMP JUMPDEST POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0x1AA8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x46B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1ACF DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BA4 JUMP JUMPDEST ISZERO PUSH2 0x1BA9 JUMPI PUSH2 0x1BA8 DUP11 DUP11 DUP11 DUP11 DUP11 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x2BC7 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C3F SWAP1 PUSH2 0x4738 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1C55 DUP2 PUSH2 0x31B2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xA45F47FDEA8A1EFDD9029A5691C7F759C32B7C698632B563573E155625D16933 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 DUP6 SWAP1 POP SWAP1 POP DUP4 DUP4 SWAP1 POP DUP2 EQ PUSH2 0x1CF0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CE7 SWAP1 PUSH2 0x43A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 DUP6 SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D0D JUMPI PUSH2 0x1D0C PUSH2 0x4758 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D3B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1DC7 JUMPI PUSH2 0x1D9D DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x1D5E JUMPI PUSH2 0x1D5D PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1D73 SWAP2 SWAP1 PUSH2 0x3A36 JUMP JUMPDEST DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1D86 JUMPI PUSH2 0x1D85 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP11 PUSH2 0x1332 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DB0 JUMPI PUSH2 0x1DAF PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1D41 JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1DE3 SWAP1 PUSH2 0x4459 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E0F SWAP1 PUSH2 0x4459 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E5C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E31 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1E5C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E3F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1ED5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ECC SWAP1 PUSH2 0x47D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1F47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3E SWAP1 PUSH2 0x4338 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F53 DUP7 DUP6 DUP6 DUP6 PUSH2 0x2A9C JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1FCA SWAP3 SWAP2 SWAP1 PUSH2 0x45B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1FF1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BA4 JUMP JUMPDEST ISZERO PUSH2 0x2006 JUMPI PUSH2 0x2005 DUP6 PUSH1 0x0 DUP7 DUP7 DUP7 DUP7 PUSH2 0x3206 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 DUP5 PUSH1 0x0 ADD SWAP2 DUP3 PUSH2 0x2021 SWAP3 SWAP2 SWAP1 PUSH2 0x4995 JUMP JUMPDEST POP PUSH32 0x4B1DC5C136A3CE9FDED8DB0CE3D3366C58764EC3A8E4C2B9E52E4DDFE5EBBF7 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2053 SWAP3 SWAP2 SWAP1 PUSH2 0x4AA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 SWAP1 POP SWAP1 POP DUP3 DUP3 SWAP1 POP DUP2 EQ PUSH2 0x20AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20A4 SWAP1 PUSH2 0x43A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20B8 DUP9 DUP8 DUP10 PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x20F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20EE SWAP1 PUSH2 0x4592 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x214A JUMPI PUSH2 0x213F DUP10 DUP9 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x2119 JUMPI PUSH2 0x2118 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x2133 JUMPI PUSH2 0x2132 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x2E74 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x20FA JUMP JUMPDEST POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x21C6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x46B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x21E1 DUP2 PUSH2 0x1E83 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x2242 DUP2 DUP4 DUP6 PUSH2 0x1535 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B DUP2 DUP4 DUP5 PUSH1 0x40 MLOAD PUSH2 0x22E0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2389 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2380 SWAP1 PUSH2 0x4B11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x247C SWAP2 SWAP1 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x249F DUP4 DUP4 DUP7 PUSH2 0x1288 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x254B JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x2542 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2657 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x264E SWAP1 PUSH2 0x4627 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2662 DUP9 DUP8 DUP10 PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x26A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2698 SWAP1 PUSH2 0x4592 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x26AE DUP9 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2F7C JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2724 SWAP3 SWAP2 SWAP1 PUSH2 0x45B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x274B DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BA4 JUMP JUMPDEST ISZERO PUSH2 0x27A3 JUMPI PUSH2 0x27A2 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x3206 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2844 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x283B SWAP1 PUSH2 0x4738 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2915 JUMPI DUP2 DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SHL DUP3 SUB PUSH2 0x293E JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH2 0x2A97 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2951 SWAP2 SWAP1 PUSH2 0x4B52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 PUSH1 0x1F SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x29C6 JUMPI PUSH1 0x0 PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2988 JUMPI PUSH2 0x2987 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SUB PUSH2 0x29C6 JUMPI DUP1 PUSH1 0x1 SWAP1 SUB SWAP1 POP PUSH2 0x2969 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29E5 JUMPI PUSH2 0x29E4 PUSH2 0x4758 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A17 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 GT PUSH2 0x2A8F JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2A37 JUMPI PUSH2 0x2A36 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A55 JUMPI PUSH2 0x2A54 PUSH2 0x43C4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x2A1D JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x2B9E JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP3 DUP3 ADD SWAP1 POP DUP2 DUP2 GT PUSH2 0x2B44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B3B SWAP1 PUSH2 0x4BB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC197C81 DUP9 DUP9 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C2F SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4C2E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C4E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C72 SWAP2 SWAP1 PUSH2 0x4CAB JUMP JUMPDEST PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2CD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CC8 SWAP1 PUSH2 0x4D24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x2CE8 DUP5 PUSH2 0x3318 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D07 JUMPI PUSH2 0x2D06 PUSH2 0x4758 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D39 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2D9C JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2D90 JUMPI PUSH2 0x2D8F PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2D47 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2E6B JUMPI POP DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x2F76 JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 LT PUSH2 0x2F1C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F13 SWAP1 PUSH2 0x4DBF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x31AB JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 LT PUSH2 0x3024 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x301B SWAP1 PUSH2 0x4DBF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x31A8 JUMPI PUSH1 0x0 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP3 ADD SWAP1 POP DUP2 DUP2 GT PUSH2 0x30F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30EE SWAP1 PUSH2 0x4BB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP10 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP10 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMPDEST POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3203 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31FA SWAP1 PUSH2 0x4E2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF23A6E61 DUP9 DUP9 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x326E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4E4B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x328D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32B1 SWAP2 SWAP1 PUSH2 0x4CAB JUMP JUMPDEST PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x3310 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3307 SWAP1 PUSH2 0x4D24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x3376 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x336C JUMPI PUSH2 0x336B PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x33B3 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x33A9 JUMPI PUSH2 0x33A8 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x33E2 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x33D8 JUMPI PUSH2 0x33D7 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x340B JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x3401 JUMPI PUSH2 0x3400 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x3430 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x3426 JUMPI PUSH2 0x3425 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x3453 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x3449 JUMPI PUSH2 0x3448 PUSH2 0x4D44 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x3462 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34A0 DUP3 PUSH2 0x3475 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34B0 DUP2 PUSH2 0x3495 JUMP JUMPDEST DUP2 EQ PUSH2 0x34BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x34CD DUP2 PUSH2 0x34A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34E6 DUP2 PUSH2 0x34D3 JUMP JUMPDEST DUP2 EQ PUSH2 0x34F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3503 DUP2 PUSH2 0x34DD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3520 JUMPI PUSH2 0x351F PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x352E DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x353F DUP6 DUP3 DUP7 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3552 DUP2 PUSH2 0x34D3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x356D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3549 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35A8 DUP2 PUSH2 0x3573 JUMP JUMPDEST DUP2 EQ PUSH2 0x35B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x35C5 DUP2 PUSH2 0x359F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x35E1 JUMPI PUSH2 0x35E0 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35EF DUP5 DUP3 DUP6 ADD PUSH2 0x35B6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x360D DUP2 PUSH2 0x35F8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3628 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3604 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3653 JUMPI PUSH2 0x3652 PUSH2 0x362E JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3670 JUMPI PUSH2 0x366F PUSH2 0x3633 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x368C JUMPI PUSH2 0x368B PUSH2 0x3638 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x36A9 JUMPI PUSH2 0x36A8 PUSH2 0x362E JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x36C6 JUMPI PUSH2 0x36C5 PUSH2 0x3633 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x36E2 JUMPI PUSH2 0x36E1 PUSH2 0x3638 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3708 JUMPI PUSH2 0x3707 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3716 DUP11 DUP3 DUP12 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3737 JUMPI PUSH2 0x3736 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3743 DUP11 DUP3 DUP12 ADD PUSH2 0x363D JUMP JUMPDEST SWAP7 POP SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3766 JUMPI PUSH2 0x3765 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3772 DUP11 DUP3 DUP12 ADD PUSH2 0x363D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3795 JUMPI PUSH2 0x3794 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x37A1 DUP11 DUP3 DUP12 ADD PUSH2 0x3693 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C8 JUMPI PUSH2 0x37C7 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37D6 DUP5 DUP3 DUP6 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3819 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x37FE JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3841 DUP3 PUSH2 0x37DF JUMP JUMPDEST PUSH2 0x384B DUP2 DUP6 PUSH2 0x37EA JUMP JUMPDEST SWAP4 POP PUSH2 0x385B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37FB JUMP JUMPDEST PUSH2 0x3864 DUP2 PUSH2 0x3825 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3889 DUP2 DUP5 PUSH2 0x3836 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x38AA JUMPI PUSH2 0x38A9 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38B8 DUP7 DUP3 DUP8 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x38C9 DUP7 DUP3 DUP8 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x38DA DUP7 DUP3 DUP8 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3904 JUMPI PUSH2 0x3903 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3912 DUP12 DUP3 DUP13 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x3923 DUP12 DUP3 DUP13 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3944 JUMPI PUSH2 0x3943 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3950 DUP12 DUP3 DUP13 ADD PUSH2 0x363D JUMP JUMPDEST SWAP7 POP SWAP7 POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3973 JUMPI PUSH2 0x3972 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x397F DUP12 DUP3 DUP13 ADD PUSH2 0x363D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39A2 JUMPI PUSH2 0x39A1 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x39AE DUP12 DUP3 DUP13 ADD PUSH2 0x3693 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x39D3 DUP2 PUSH2 0x39C0 JUMP JUMPDEST DUP2 EQ PUSH2 0x39DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x39F0 DUP2 PUSH2 0x39CA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A0D JUMPI PUSH2 0x3A0C PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A1B DUP6 DUP3 DUP7 ADD PUSH2 0x39E1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3A2C DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A4C JUMPI PUSH2 0x3A4B PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A5A DUP5 DUP3 DUP6 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3A6C DUP2 PUSH2 0x39C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3A87 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3A63 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3AA3 JUMPI PUSH2 0x3AA2 PUSH2 0x362E JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AC0 JUMPI PUSH2 0x3ABF PUSH2 0x3633 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3ADC JUMPI PUSH2 0x3ADB PUSH2 0x3638 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3AFD JUMPI PUSH2 0x3AFC PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B1B JUMPI PUSH2 0x3B1A PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3B27 DUP8 DUP3 DUP9 ADD PUSH2 0x3A8D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B4A JUMPI PUSH2 0x3B49 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3B56 DUP8 DUP3 DUP9 ADD PUSH2 0x363D JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3B99 DUP2 PUSH2 0x34D3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BAB DUP4 DUP4 PUSH2 0x3B90 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BCF DUP3 PUSH2 0x3B64 JUMP JUMPDEST PUSH2 0x3BD9 DUP2 DUP6 PUSH2 0x3B6F JUMP JUMPDEST SWAP4 POP PUSH2 0x3BE4 DUP4 PUSH2 0x3B80 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C15 JUMPI DUP2 MLOAD PUSH2 0x3BFC DUP9 DUP3 PUSH2 0x3B9F JUMP JUMPDEST SWAP8 POP PUSH2 0x3C07 DUP4 PUSH2 0x3BB7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3BE8 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C3C DUP2 DUP5 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3C60 JUMPI PUSH2 0x3C5F PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3C6E DUP9 DUP3 DUP10 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x3C7F DUP9 DUP3 DUP10 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x3C90 DUP9 DUP3 DUP10 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CB1 JUMPI PUSH2 0x3CB0 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3CBD DUP9 DUP3 DUP10 ADD PUSH2 0x3693 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3CE2 JUMPI PUSH2 0x3CE1 PUSH2 0x362E JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CFF JUMPI PUSH2 0x3CFE PUSH2 0x3633 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3D1B JUMPI PUSH2 0x3D1A PUSH2 0x3638 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D39 JUMPI PUSH2 0x3D38 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D57 JUMPI PUSH2 0x3D56 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3D63 DUP6 DUP3 DUP7 ADD PUSH2 0x3CCC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3D8B JUMPI PUSH2 0x3D8A PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D99 DUP9 DUP3 DUP10 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DBA JUMPI PUSH2 0x3DB9 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3DC6 DUP9 DUP3 DUP10 ADD PUSH2 0x363D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DE9 JUMPI PUSH2 0x3DE8 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3DF5 DUP9 DUP3 DUP10 ADD PUSH2 0x363D JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E1A JUMPI PUSH2 0x3E19 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E28 DUP5 DUP3 DUP6 ADD PUSH2 0x39E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E3A DUP2 PUSH2 0x3495 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3E55 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3E31 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E64 DUP2 PUSH2 0x35F8 JUMP JUMPDEST DUP2 EQ PUSH2 0x3E6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3E81 DUP2 PUSH2 0x3E5B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E9E JUMPI PUSH2 0x3E9D PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3EAC DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3EBD DUP6 DUP3 DUP7 ADD PUSH2 0x3E72 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3EDE JUMPI PUSH2 0x3EDD PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3EEC DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3EFD DUP6 DUP3 DUP7 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3F24 JUMPI PUSH2 0x3F23 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F32 DUP10 DUP3 DUP11 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3F43 DUP10 DUP3 DUP11 ADD PUSH2 0x34BE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x3F54 DUP10 DUP3 DUP11 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x3F65 DUP10 DUP3 DUP11 ADD PUSH2 0x34F4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F86 JUMPI PUSH2 0x3F85 PUSH2 0x3470 JUMP JUMPDEST JUMPDEST PUSH2 0x3F92 DUP10 DUP3 DUP11 ADD PUSH2 0x3693 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH32 0x4F524E463A206E6F742061646D696E0000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FD7 PUSH1 0xF DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3FE2 DUP3 PUSH2 0x3FA1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4006 DUP2 PUSH2 0x3FCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F524E463A206E6F742073757065722061646D696E0000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4043 PUSH1 0x15 DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x404E DUP3 PUSH2 0x400D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4072 DUP2 PUSH2 0x4036 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x40B3 DUP3 PUSH2 0x34D3 JUMP JUMPDEST SWAP2 POP PUSH2 0x40BE DUP4 PUSH2 0x34D3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x40D6 JUMPI PUSH2 0x40D5 PUSH2 0x4079 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x40F1 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3A63 JUMP JUMPDEST PUSH2 0x40FE PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3E31 JUMP JUMPDEST PUSH2 0x410B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3E31 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4149 PUSH1 0x1F DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4154 DUP3 PUSH2 0x4113 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4178 DUP2 PUSH2 0x413C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243313135353A2062616C616E6365206F6620616464726573732830290000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41B5 PUSH1 0x1E DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x41C0 DUP3 PUSH2 0x417F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x41E4 DUP2 PUSH2 0x41A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206D697373696E6720270000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x422C PUSH1 0x18 DUP4 PUSH2 0x41EB JUMP JUMPDEST SWAP2 POP PUSH2 0x4237 DUP3 PUSH2 0x41F6 JUMP JUMPDEST PUSH1 0x18 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x424D DUP3 PUSH2 0x37DF JUMP JUMPDEST PUSH2 0x4257 DUP2 DUP6 PUSH2 0x41EB JUMP JUMPDEST SWAP4 POP PUSH2 0x4267 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37FB JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x2720726F6C650000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A9 PUSH1 0x6 DUP4 PUSH2 0x41EB JUMP JUMPDEST SWAP2 POP PUSH2 0x42B4 DUP3 PUSH2 0x4273 JUMP JUMPDEST PUSH1 0x6 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42CA DUP3 PUSH2 0x421F JUMP JUMPDEST SWAP2 POP PUSH2 0x42D6 DUP3 DUP5 PUSH2 0x4242 JUMP JUMPDEST SWAP2 POP PUSH2 0x42E1 DUP3 PUSH2 0x429C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243313135353A206D696E7420746F20616464726573732830290000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4322 PUSH1 0x1B DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x432D DUP3 PUSH2 0x42EC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4351 DUP2 PUSH2 0x4315 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243313135353A20696E636F6E73697374656E742061727261797300000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x438E PUSH1 0x1C DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4399 DUP3 PUSH2 0x4358 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x43BD DUP2 PUSH2 0x4381 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x440D DUP2 DUP6 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4421 DUP2 DUP5 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x4471 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x4484 JUMPI PUSH2 0x4483 PUSH2 0x442A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x44AC DUP2 PUSH2 0x4459 JUMP JUMPDEST PUSH2 0x44B6 DUP2 DUP7 PUSH2 0x41EB JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x44D1 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x44E6 JUMPI PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 ISZERO ISZERO DUP3 MUL DUP7 ADD SWAP4 POP PUSH2 0x4519 JUMP JUMPDEST PUSH2 0x44EF DUP6 PUSH2 0x448A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4511 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x44F2 JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x452E DUP3 DUP6 PUSH2 0x449F JUMP JUMPDEST SWAP2 POP PUSH2 0x453A DUP3 DUP5 PUSH2 0x4242 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x455243313135353A206E6F6E2D617070726F7665642073656E64657200000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x457C PUSH1 0x1C DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4587 DUP3 PUSH2 0x4546 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x45AB DUP2 PUSH2 0x456F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x45C7 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3549 JUMP JUMPDEST PUSH2 0x45D4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3549 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x455243313135353A207472616E7366657220746F206164647265737328302900 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4611 PUSH1 0x1F DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x461C DUP3 PUSH2 0x45DB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4640 DUP2 PUSH2 0x4604 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4661 DUP4 DUP6 PUSH2 0x3B6F JUMP JUMPDEST SWAP4 POP PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x4694 JUMPI PUSH2 0x4693 PUSH2 0x4647 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 MUL SWAP3 POP PUSH2 0x46A5 DUP4 DUP6 DUP5 PUSH2 0x464C JUMP JUMPDEST DUP3 DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x46CC DUP2 DUP7 DUP9 PUSH2 0x4655 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x46E1 DUP2 DUP5 DUP7 PUSH2 0x4655 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4722 PUSH1 0x18 DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x472D DUP3 PUSH2 0x46EC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4751 DUP2 PUSH2 0x4715 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x50617573653A2070617573656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47BD PUSH1 0xD DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x47C8 DUP3 PUSH2 0x4787 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x47EC DUP2 PUSH2 0x47B0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x484B PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x480E JUMP JUMPDEST PUSH2 0x4855 DUP7 DUP4 PUSH2 0x480E JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4892 PUSH2 0x488D PUSH2 0x4888 DUP5 PUSH2 0x34D3 JUMP JUMPDEST PUSH2 0x486D JUMP JUMPDEST PUSH2 0x34D3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x48AC DUP4 PUSH2 0x4877 JUMP JUMPDEST PUSH2 0x48C0 PUSH2 0x48B8 DUP3 PUSH2 0x4899 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x481B JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x48D5 PUSH2 0x48C8 JUMP JUMPDEST PUSH2 0x48E0 DUP2 DUP5 DUP5 PUSH2 0x48A3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4904 JUMPI PUSH2 0x48F9 PUSH1 0x0 DUP3 PUSH2 0x48CD JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x48E6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x4949 JUMPI PUSH2 0x491A DUP2 PUSH2 0x448A JUMP JUMPDEST PUSH2 0x4923 DUP5 PUSH2 0x47FE JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x4932 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x4946 PUSH2 0x493E DUP6 PUSH2 0x47FE JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x48E5 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x496C PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x494E JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4985 DUP4 DUP4 PUSH2 0x495B JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x499F DUP4 DUP4 PUSH2 0x47F3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x49B8 JUMPI PUSH2 0x49B7 PUSH2 0x4758 JUMP JUMPDEST JUMPDEST PUSH2 0x49C2 DUP3 SLOAD PUSH2 0x4459 JUMP JUMPDEST PUSH2 0x49CD DUP3 DUP3 DUP6 PUSH2 0x4908 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x49FC JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x49EA JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x49F4 DUP6 DUP3 PUSH2 0x4979 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x4A5C JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x4A0A DUP7 PUSH2 0x448A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4A32 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4A0D JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x4A4F JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x4A4B PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x495B JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A80 DUP4 DUP6 PUSH2 0x37EA JUMP JUMPDEST SWAP4 POP PUSH2 0x4A8D DUP4 DUP6 DUP5 PUSH2 0x4A65 JUMP JUMPDEST PUSH2 0x4A96 DUP4 PUSH2 0x3825 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4ABC DUP2 DUP5 DUP7 PUSH2 0x4A74 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x455243313135353A2073656C662D617070726F76616C20666F7220616C6C0000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AFB PUSH1 0x1E DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4B06 DUP3 PUSH2 0x4AC5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B2A DUP2 PUSH2 0x4AEE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4B4C PUSH2 0x4B47 DUP3 PUSH2 0x39C0 JUMP JUMPDEST PUSH2 0x4B31 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B5E DUP3 DUP5 PUSH2 0x4B3B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243313135353A2062616C616E6365206F766572666C6F7700000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BA3 PUSH1 0x19 DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4BAE DUP3 PUSH2 0x4B6D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4BD2 DUP2 PUSH2 0x4B96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C00 DUP3 PUSH2 0x4BD9 JUMP JUMPDEST PUSH2 0x4C0A DUP2 DUP6 PUSH2 0x4BE4 JUMP JUMPDEST SWAP4 POP PUSH2 0x4C1A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37FB JUMP JUMPDEST PUSH2 0x4C23 DUP2 PUSH2 0x3825 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x4C43 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3E31 JUMP JUMPDEST PUSH2 0x4C50 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3E31 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4C62 DUP2 DUP7 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4C76 DUP2 DUP6 PUSH2 0x3BC4 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4C8A DUP2 DUP5 PUSH2 0x4BF5 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4CA5 DUP2 PUSH2 0x359F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CC1 JUMPI PUSH2 0x4CC0 PUSH2 0x346B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4CCF DUP5 DUP3 DUP6 ADD PUSH2 0x4C96 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243313135353A207472616E736665722072656A6563746564000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D0E PUSH1 0x1A DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4D19 DUP3 PUSH2 0x4CD8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4D3D DUP2 PUSH2 0x4D01 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA9 PUSH1 0x1D DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4DB4 DUP3 PUSH2 0x4D73 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4DD8 DUP2 PUSH2 0x4D9C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x50617573653A206E6F7420706175736564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E15 PUSH1 0x11 DUP4 PUSH2 0x37EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4E20 DUP3 PUSH2 0x4DDF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4E44 DUP2 PUSH2 0x4E08 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x4E60 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3E31 JUMP JUMPDEST PUSH2 0x4E6D PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3E31 JUMP JUMPDEST PUSH2 0x4E7A PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x3549 JUMP JUMPDEST PUSH2 0x4E87 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x3549 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4E99 DUP2 DUP5 PUSH2 0x4BF5 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 0xE6 EXTCODESIZE XOR DUP3 0x23 PUSH8 0x26543F30C62A83FC 0xEB 0xC8 0xF9 0xC5 JUMP 0xA7 0xD5 PUSH22 0x1AB1BD161B87F37B8464736F6C634300081200330000 ","sourceMap":"1202:2318:37:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1646:171:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;541:174:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1404:332:21;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2174:169:20;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;668:165:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;864:306:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1607:257:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3195:323:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1339:156:11;;;:::i;:::-;;1328:56:37;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1852:217:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1973:155:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1615:101:11;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2024:386:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1390:44;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1649:227:20;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;876:201:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;988:152:11;;;:::i;:::-;;2615:124:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;709:129:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2914:153:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1205:178:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2810:379:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;839:46:21;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2161:259:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1418:193:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;605:224;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2416:388:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1646:171:18;1732:15;1766:44;1800:5;1807:2;1766:23;:21;:23::i;:::-;:33;;:44;;;;;:::i;:::-;1759:51;;1646:171;;;;:::o;541:174:7:-;620:4;643:65;696:11;643:34;:32;:34::i;:::-;:52;;:65;;;;:::i;:::-;636:72;;541:174;;;:::o;1404:332:21:-;1547:14;1564:12;:10;:12::i;:::-;1547:29;;1586:65;1631:11;1644:6;1586:29;:27;:29::i;:::-;:44;;:65;;;;;:::i;:::-;1661:68;1699:6;1707:2;1711:3;;1661:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1716:6;;1661:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1724:4;;1661:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;:21;:23::i;:::-;:37;;:68;;;;;;;;:::i;:::-;1537:199;1404:332;;;;;;;:::o;2174:169:20:-;2231:25;2275:61;2333:2;2275:40;:38;:40::i;:::-;:57;;:61;;;;:::i;:::-;2268:68;;2174:169;;;:::o;668:165:19:-;763:63;796:12;:10;:12::i;:::-;810:4;816:2;820:5;763:23;:21;:23::i;:::-;:32;;:63;;;;;;;:::i;:::-;668:165;;;:::o;864:306:18:-;1075:88;1121:12;:10;:12::i;:::-;1135:4;1141:2;1145:3;;1150:6;;1158:4;;1075:23;:21;:23::i;:::-;:45;;:88;;;;;;;;;;;;:::i;:::-;864:306;;;;;;;;:::o;1607:257:2:-;1676:16;1695:12;:10;:12::i;:::-;1676:31;;1717:66;1774:8;1717:33;:31;:33::i;:::-;:56;;:66;;;;:::i;:::-;1793:64;1833:4;1839:7;1848:8;1793:29;:27;:29::i;:::-;:39;;:64;;;;;;:::i;:::-;1666:198;1607:257;;:::o;3195:323:37:-;3264:16;3283:12;:10;:12::i;:::-;3264:31;;3326:63;3364:10;3376:12;:10;:12::i;:::-;3326:29;:27;:29::i;:::-;:37;;:63;;;;;:::i;:::-;3305:125;;;;;;;;;;;;:::i;:::-;;;;;;;;;3440:71;3480:11;3493:7;3502:8;3440:29;:27;:29::i;:::-;:39;;:71;;;;;;:::i;:::-;3254:264;3195:323;:::o;1339:156:11:-;1377:70;1434:12;:10;:12::i;:::-;1377:33;:31;:33::i;:::-;:56;;:70;;;;:::i;:::-;1457:31;:21;:19;:21::i;:::-;:29;:31::i;:::-;1339:156::o;1328:56:37:-;;;:::o;1852:217:18:-;1967:25;2011:51;2050:6;;2058:3;;2011:23;:21;:23::i;:::-;:38;;:51;;;;;;;:::i;:::-;2004:58;;1852:217;;;;;;:::o;1973:155:20:-;2023:21;2063:58;:40;:38;:40::i;:::-;:56;:58::i;:::-;2056:65;;1973:155;:::o;1615:101:11:-;1656:4;1679:30;:21;:19;:21::i;:::-;:28;:30::i;:::-;1672:37;;1615:101;:::o;2024:386:37:-;2176:42;:21;:19;:21::i;:::-;:40;:42::i;:::-;2228:14;2245:12;:10;:12::i;:::-;2228:29;;2267:65;2312:11;2325:6;2267:29;:27;:29::i;:::-;:44;;:65;;;;;:::i;:::-;2342:61;2375:6;2383:2;2387;2391:5;2398:4;;2342:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;:21;:23::i;:::-;:32;;:61;;;;;;;;:::i;:::-;2166:244;2024:386;;;;;:::o;1390:44::-;;;:::o;1649:227:20:-;1721:70;1778:12;:10;:12::i;:::-;1721:33;:31;:33::i;:::-;:56;;:70;;;;:::i;:::-;1801:68;1861:7;;1801:40;:38;:40::i;:::-;:59;;:68;;;;;:::i;:::-;1649:227;;:::o;876:201:19:-;1000:70;1038:12;:10;:12::i;:::-;1052:4;1058:3;;1063:6;;1000:23;:21;:23::i;:::-;:37;;:70;;;;;;;;;:::i;:::-;876:201;;;;;:::o;988:152:11:-;1024:70;1081:12;:10;:12::i;:::-;1024:33;:31;:33::i;:::-;:56;;:70;;;;:::i;:::-;1104:29;:21;:19;:21::i;:::-;:27;:29::i;:::-;988:152::o;2615:124:2:-;2670:62;2713:12;:10;:12::i;:::-;2727:4;2670:29;:27;:29::i;:::-;:42;;:62;;;;;:::i;:::-;2615:124;:::o;709:129:3:-;764:7;790:41;:33;:31;:33::i;:::-;:39;:41::i;:::-;783:48;;709:129;:::o;2914:153:2:-;2985:4;3008:52;3046:4;3052:7;3008:29;:27;:29::i;:::-;:37;;:52;;;;;:::i;:::-;3001:59;;2914:153;;;;:::o;1205:178:18:-;1301:75;1343:12;:10;:12::i;:::-;1357:8;1367;1301:23;:21;:23::i;:::-;:41;;:75;;;;;;:::i;:::-;1205:178;;:::o;2810:379:37:-;2878:16;2897:12;:10;:12::i;:::-;2878:31;;2940:115;2995:16;3029:12;:10;:12::i;:::-;2940:29;:27;:29::i;:::-;:37;;:115;;;;;:::i;:::-;2919:183;;;;;;;;;;;;:::i;:::-;;;;;;;;;3112:70;3152:10;3164:7;3173:8;3112:29;:27;:29::i;:::-;:39;;:70;;;;;;:::i;:::-;2868:321;2810:379;:::o;839:46:21:-;;;:::o;2161:259:2:-;2231:16;2250:12;:10;:12::i;:::-;2231:31;;2272:66;2329:8;2272:33;:31;:33::i;:::-;:56;;:66;;;;:::i;:::-;2348:65;2389:4;2395:7;2404:8;2348:29;:27;:29::i;:::-;:40;;:65;;;;;;:::i;:::-;2221:199;2161:259;;:::o;1418:193:18:-;1509:19;1547:57;1588:5;1595:8;1547:23;:21;:23::i;:::-;:40;;:57;;;;;:::i;:::-;1540:64;;1418:193;;;;:::o;605:224::-;741:81;782:12;:10;:12::i;:::-;796:4;802:2;806;810:5;817:4;;741:23;:21;:23::i;:::-;:40;;:81;;;;;;;;;;:::i;:::-;605:224;;;;;;:::o;2416:388:37:-;2516:115;2571:16;2605:12;:10;:12::i;:::-;2516:29;:27;:29::i;:::-;:37;;:115;;;;;:::i;:::-;2495:183;;;;;;;;;;;;:::i;:::-;;;;;;;;;2688:109;2753:12;:10;:12::i;:::-;2779:8;2688:33;:31;:33::i;:::-;:51;;:109;;;;;:::i;:::-;2416:388;:::o;1905:132:28:-;1940:90;1997:26;2025:4;1940:34;:32;:34::i;:::-;:56;;:90;;;;;:::i;:::-;1905:132::o;3707:174:6:-;3748:16;3776;671:1;609:58;601:67;;:71;;;;:::i;:::-;593:80;;3776:38;;3857:8;3847:18;;3833:42;3707:174;:::o;1332:341::-;1444:1;1420:26;;:12;:26;;;1416:152;;1480:12;1462:1;:15;;;:30;;;;;;;;;;;;;;;;;;1544:12;1511:46;;1540:1;1511:46;;;;;;;;;;;;1416:152;1577:89;1634:25;1661:4;1577:34;:32;:34::i;:::-;:56;;:89;;;;;:::i;:::-;1332:341;;:::o;2387:155:28:-;2437:98;2494:34;2530:4;2437:34;:32;:34::i;:::-;:56;;:98;;;;;:::i;:::-;2387:155::o;2892:::-;2942:98;2999:34;3035:4;2942:34;:32;:34::i;:::-;:56;;:98;;;;;:::i;:::-;2892:155::o;2859:174:12:-;2900:16;2928;386:1;333:49;325:58;;:62;;;;:::i;:::-;317:71;;2928:38;;3009:8;2999:18;;2985:42;2859:174;:::o;874:166::-;955:8;951:83;;;992:4;979:1;:10;;;:17;;;;;;;;;;;;;;;;;;1015:8;;;;;;;;;;951:83;874:166;;:::o;2133:161:28:-;2186:101;2243:37;2282:4;2186:34;:32;:34::i;:::-;:56;;:101;;;;;:::i;:::-;2133:161::o;3069:174:5:-;3110:16;3138;459:1;401:54;393:63;;:67;;;;:::i;:::-;385:76;;3138:38;;3219:8;3209:18;;3195:42;3069:174;:::o;987:251::-;1097:24;1107:4;1113:7;1097:1;:9;;:24;;;;;:::i;:::-;1092:140;;1162:4;1137:1;:7;;:13;1145:4;1137:13;;;;;;;;;;;:22;1151:7;1137:22;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;1185:36;1197:4;1203:7;1212:8;1185:36;;;;;;;;:::i;:::-;;;;;;;;1092:140;987:251;;;;:::o;1613:174:9:-;1654:16;1682;365:1;295:66;287:75;;:79;;;;:::i;:::-;279:88;;1682:38;;1763:8;1753:18;;1739:42;1613:174;:::o;670:246::-;422:10;797:20;;782:35;;;:11;:35;;;;774:79;;;;;;;;;;;;:::i;:::-;;;;;;;;;900:9;863:1;:21;;:34;885:11;863:34;;;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;670:246;;;:::o;2491:141:5:-;2580:4;2603:1;:7;;:13;2611:4;2603:13;;;;;;;;;;;:22;2617:7;2603:22;;;;;;;;;;;;;;;;;;;;;;;;;2596:29;;2491:141;;;;;:::o;15080:174:28:-;15121:16;15149;1215:1;1161:50;1153:59;;:63;;;;:::i;:::-;1145:72;;15149:38;;15230:8;15220:18;;15206:42;15080:174;:::o;14043:221::-;14130:15;14182:1;14165:19;;:5;:19;;;14157:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;14236:1;:10;;:14;14247:2;14236:14;;;;;;;;;;;:21;14251:5;14236:21;;;;;;;;;;;;;;;;14229:28;;14043:221;;;;;:::o;1267:340:9:-;1355:14;422:10;1400:20;;1385:35;;;:11;:35;;;;1381:78;;1443:5;1436:12;;;;1381:78;1487:25;1472:40;;;:11;:40;;;;1468:82;;1535:4;1528:11;;;;1468:82;1566:1;:21;;:34;1588:11;1566:34;;;;;;;;;;;;;;;;;;;;;;;;;;;1559:41;;1267:340;;;;;:::o;640:96:32:-;693:7;719:10;712:17;;640:96;:::o;2812:251:5:-;2914:24;2924:4;2930:7;2914:1;:9;;:24;;;;;:::i;:::-;2909:148;;3013:20;:4;:18;:20::i;:::-;2968:76;;;;;;;;:::i;:::-;;;;;;;;;;;;;2954:92;;;;;;;;;;;:::i;:::-;;;;;;;;2909:148;2812:251;;;:::o;8690:667:28:-;8866:1;8852:16;;:2;:16;;;8844:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;8910:14;8927:3;:10;8910:27;;8965:6;:13;8955:6;:23;8947:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;9051:9;9046:103;9067:6;9062:1;:11;9046:103;;9098:36;9109:1;9112:2;9116:3;9120:1;9116:6;;;;;;;;:::i;:::-;;;;;;;;9124;9131:1;9124:9;;;;;;;;:::i;:::-;;;;;;;;9098:10;:36::i;:::-;9075:3;;;;;9046:103;;;;9208:2;9174:50;;9204:1;9174:50;;9188:6;9174:50;;;9212:3;9217:6;9174:50;;;;;;;:::i;:::-;;;;;;;;9239:15;:2;:13;;;:15::i;:::-;9235:116;;;9270:70;9298:6;9314:1;9318:2;9322:3;9327:6;9335:4;9270:27;:70::i;:::-;9235:116;8834:523;8690:667;;;;;;:::o;1617:174:29:-;1658:16;1686;562:1;490:68;482:77;;:81;;;;:::i;:::-;474:90;;1686:38;;1767:8;1757:18;;1743:42;1617:174;:::o;1434:177::-;1513:22;1578:1;:9;;1589:13;:2;:11;:13::i;:::-;1561:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1547:57;;1434:177;;;;:::o;11370:296:28:-;11490:30;11504:1;11507:4;11513:6;11490:13;:30::i;:::-;11482:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;11563:30;11574:1;11577:4;11583:2;11587:5;11563:10;:30::i;:::-;11645:1;11608:51;;11631:4;11608:51;;11623:6;11608:51;;;11649:2;11653:5;11608:51;;;;;;;:::i;:::-;;;;;;;;11370:296;;;;;:::o;5657:841::-;5923:1;5909:16;;:2;:16;;;5901:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;5971:14;5988:3;;:10;;5971:27;;6026:6;;:13;;6016:6;:23;6008:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;6091:30;6105:1;6108:4;6114:6;6091:13;:30::i;:::-;6083:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;6194:9;6189:113;6210:6;6205:1;:11;6189:113;;6241:46;6256:1;6259:4;6265:2;6269:3;;6273:1;6269:6;;;;;;;:::i;:::-;;;;;;;;6277;;6284:1;6277:9;;;;;;;:::i;:::-;;;;;;;;6241:14;:46::i;:::-;6218:3;;;;;6189:113;;;;6355:2;6327:44;;6349:4;6327:44;;6341:6;6327:44;;;6359:3;;6364:6;;6327:44;;;;;;;;;:::i;:::-;;;;;;;;6386:15;:2;:13;;;:15::i;:::-;6382:110;;;6417:64;6445:6;6453:4;6459:2;6463:3;;6417:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6468:6;;6417:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6476:4;;6417:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:27;:64::i;:::-;6382:110;5891:607;5657:841;;;;;;;;;;:::o;3540:161:6:-;3650:1;:15;;;;;;;;;;;;3639:26;;:7;:26;;;3631:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:161;;:::o;2044:133:12:-;2098:19;:1;:17;:19::i;:::-;2140:5;2127:1;:10;;;:18;;;;;;;;;;;;;;;;;;2160:10;;;;;;;;;;2044:133;:::o;14608:466:28:-;14724:25;14761:14;14778:6;;:13;;14761:30;;14819:3;;:10;;14809:6;:20;14801:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;14898:6;;:13;;14884:28;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14873:39;;14952:9;14947:111;14968:6;14963:1;:11;14947:111;;15013:30;15025:6;;15032:1;15025:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;15036:3;;15040:1;15036:6;;;;;;;:::i;:::-;;;;;;;;15013:1;:11;;:30;;;;;:::i;:::-;14999:8;15008:1;14999:11;;;;;;;;:::i;:::-;;;;;;;:44;;;;;14976:3;;;;;14947:111;;;;14751:323;14608:466;;;;;;;:::o;1020:122:29:-;1086:21;1126:1;:9;;1119:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1020:122;;;:::o;2297:106:12:-;2354:13;2386:1;:10;;;;;;;;;;;;2379:17;;2297:106;;;:::o;2739:114::-;2818:1;:10;;;;;;;;;;;;2817:11;2809:37;;;;;;;;;;;;:::i;:::-;;;;;;;;;2739:114;:::o;7335:415:28:-;7486:1;7472:16;;:2;:16;;;7464:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;7531:28;7542:1;7545:2;7549;7553:5;7531:10;:28::i;:::-;7610:2;7575:49;;7606:1;7575:49;;7590:6;7575:49;;;7614:2;7618:5;7575:49;;;;;;;:::i;:::-;;;;;;;;7639:15;:2;:13;;;:15::i;:::-;7635:109;;;7670:63;7693:6;7709:1;7713:2;7717;7721:5;7728:4;7670:22;:63::i;:::-;7635:109;7335:415;;;;;;:::o;765:158:29:-;867:7;;855:1;:9;;:19;;;;;;;:::i;:::-;;889:27;908:7;;889:27;;;;;;;:::i;:::-;;;;;;;;765:158;;;:::o;12207:547:28:-;12348:14;12365:3;;:10;;12348:27;;12403:6;;:13;;12393:6;:23;12385:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;12467:30;12481:1;12484:4;12490:6;12467:13;:30::i;:::-;12459:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;12570:9;12565:105;12586:6;12581:1;:11;12565:105;;12617:38;12628:1;12631:4;12637:3;;12641:1;12637:6;;;;;;;:::i;:::-;;;;;;;;12645;;12652:1;12645:9;;;;;;;:::i;:::-;;;;;;;;12617:10;:38::i;:::-;12594:3;;;;;12565:105;;;;12731:1;12695:52;;12717:4;12695:52;;12709:6;12695:52;;;12735:3;;12740:6;;12695:52;;;;;;;;;:::i;:::-;;;;;;;;12338:416;12207:547;;;;;;;:::o;1776:131:12:-;1828:22;:1;:20;:22::i;:::-;1873:4;1860:1;:10;;;:17;;;;;;;;;;;;;;;;;;1892:8;;;;;;;;;;1776:131;:::o;2103:213:5:-;2192:30;2209:4;2215:6;2192:1;:16;;:30;;;;;:::i;:::-;2256:5;2232:1;:7;;:13;2240:4;2232:13;;;;;;;;;;;:21;2246:6;2232:21;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;2276:33;2288:4;2294:6;2302;2276:33;;;;;;;;:::i;:::-;;;;;;;;2103:213;;;:::o;3256:118:6:-;3312:21;3352:1;:15;;;;;;;;;;;;3345:22;;3256:118;;;:::o;13053:288:28:-;13186:6;13174:18;;:8;:18;;;13166:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;13269:8;13237:1;:11;;:19;13249:6;13237:19;;;;;;;;;;;;;;;:29;13257:8;13237:29;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;13315:8;13292:42;;13307:6;13292:42;;;13325:8;13292:42;;;;;;:::i;:::-;;;;;;;;13053:288;;;;:::o;1616:252:5:-;1726:24;1736:4;1742:7;1726:1;:9;;:24;;;;;:::i;:::-;1722:140;;;1791:5;1766:1;:7;;:13;1774:4;1766:13;;;;;;;;;;;:22;1780:7;1766:22;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;1815:36;1827:4;1833:7;1842:8;1815:36;;;;;;;;:::i;:::-;;;;;;;;1722:140;1616:252;;;;:::o;13606:167:28:-;13706:13;13738:1;:11;;:18;13750:5;13738:18;;;;;;;;;;;;;;;:28;13757:8;13738:28;;;;;;;;;;;;;;;;;;;;;;;;;13731:35;;13606:167;;;;;:::o;4039:522::-;4214:1;4200:16;;:2;:16;;;4192:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;4270:30;4284:1;4287:4;4293:6;4270:13;:30::i;:::-;4262:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;4344:38;4359:1;4362:4;4368:2;4372;4376:5;4344:14;:38::i;:::-;4427:2;4398:43;;4421:4;4398:43;;4413:6;4398:43;;;4431:2;4435:5;4398:43;;;;;;;:::i;:::-;;;;;;;;4456:15;:2;:13;;;:15::i;:::-;4452:103;;;4487:57;4510:6;4518:4;4524:2;4528;4532:5;4539:4;;4487:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;:57::i;:::-;4452:103;4039:522;;;;;;;;:::o;2760:369:6:-;2858:21;2882:1;:15;;;;;;;;;;;;2858:39;;2925:13;2915:23;;:6;:23;;;2907:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;2998:8;2981:25;;:13;:25;;;2977:146;;3040:8;3022:1;:15;;;:26;;;;;;;;;;;;;;;;;;3103:8;3067:45;;3088:13;3067:45;;;;;;;;;;;;2977:146;2848:281;2760:369;;;:::o;1022:577:30:-;1083:13;1145:4;1136:13;;:5;:13;1132:28;;1151:9;;;;;;;;;;;;;;;;1132:28;1174:24;1224:5;1207:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;1174:57;;1245:11;1259:2;1245:16;;1275:101;1282:4;1275:101;;;1330:1;1310:21;;:11;1322:3;1310:16;;;;;;;;:::i;:::-;;;;;;;;;;:21;;;;1333:5;1306:32;1356:5;;;;;;1275:101;;;1389:24;1432:1;1426:3;:7;1416:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1389:45;;1453:9;1448:95;1469:3;1464:1;:8;1448:95;;1514:11;1526:1;1514:14;;;;;;;;:::i;:::-;;;;;;;;;;1497:11;1509:1;1497:14;;;;;;;;:::i;:::-;;;;;:31;;;;;;;;;;;1474:3;;;;;1448:95;;;;1570:11;1556:26;;;;;1022:577;;;;:::o;16531:399:28:-;16639:1;16630:5;:10;16626:298;;16684:15;16702:1;:10;;:14;16713:2;16702:14;;;;;;;;;;;:18;16717:2;16702:18;;;;;;;;;;;;;;;;16684:36;;16738:18;16769:5;16759:7;:15;16738:36;;16813:7;16800:10;:20;16792:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;16889:10;16868:1;:10;;:14;16879:2;16868:14;;;;;;;;;;;:18;16883:2;16868:18;;;;;;;;;;;;;;;:31;;;;16656:258;;16626:298;16531:399;;;;:::o;1412:320:31:-;1472:4;1724:1;1702:7;:19;;;:23;1695:30;;1412:320;;;:::o;18570:404:28:-;1379:53;;;18808:107;;;18830:2;18808:48;;;18857:6;18865:4;18871:3;18876:6;18884:4;18808:81;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:107;;;;18787:180;;;;;;;;;;;;:::i;:::-;;;;;;;;;18570:404;;;;;;:::o;447:696:34:-;503:13;552:14;589:1;569:17;580:5;569:10;:17::i;:::-;:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;604:41;;659:11;785:6;781:2;777:15;769:6;765:28;758:35;;820:280;827:4;820:280;;;851:5;;;;;;;;990:8;985:2;978:5;974:14;969:30;964:3;956:44;1044:2;1035:11;;;;;;:::i;:::-;;;;;1077:1;1068:5;:10;820:280;1064:21;820:280;1120:6;1113:13;;;;;447:696;;;:::o;15567:185:28:-;15662:15;15706:7;15697:16;;:5;:16;;;15696:49;;;;15718:1;:11;;:18;15730:5;15718:18;;;;;;;;;;;;;;;:27;15737:7;15718:27;;;;;;;;;;;;;;;;;;;;;;;;;15696:49;15689:56;;15567:185;;;;;:::o;16936:409::-;17046:1;17037:5;:10;17033:306;;17091:15;17109:1;:10;;:14;17120:2;17109:14;;;;;;;;;;;:20;17124:4;17109:20;;;;;;;;;;;;;;;;17091:38;;17147:18;17178:5;17168:7;:15;17147:36;;17222:7;17209:10;:20;17201:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;17304:10;17281:1;:10;;:14;17292:2;17281:14;;;;;;;;;;;:20;17296:4;17281:20;;;;;;;;;;;;;;;:33;;;;17063:266;;17033:306;16936:409;;;;:::o;15758:767::-;15884:1;15875:5;:10;15871:648;;15929:19;15951:1;:10;;:14;15962:2;15951:14;;;;;;;;;;;:20;15966:4;15951:20;;;;;;;;;;;;;;;;15929:42;;15989:22;16028:5;16014:11;:19;15989:44;;16076:11;16059:14;:28;16051:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;16151:2;16143:10;;:4;:10;;;16139:356;;16177:17;16197:1;:10;;:14;16208:2;16197:14;;;;;;;;;;;:18;16212:2;16197:18;;;;;;;;;;;;;;;;16177:38;;16237:20;16272:5;16260:9;:17;16237:40;;16322:9;16307:12;:24;16299:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;16407:14;16384:1;:10;;:14;16395:2;16384:14;;;;;;;;;;;:20;16399:4;16384:20;;;;;;;;;;;;;;;:37;;;;16464:12;16443:1;:10;;:14;16454:2;16443:14;;;;;;;;;;;:18;16458:2;16443:18;;;;;;;;;;;;;;;:33;;;;16155:340;;16139:356;15901:608;;15871:648;15758:767;;;;;:::o;2514:114:12:-;2589:1;:10;;;;;;;;;;;;2581:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;2514:114;:::o;17810:285:28:-;1275:48;;;17956:101;;;17978:2;17956:43;;;18000:6;18008:4;18014:2;18018:5;18025:4;17956:74;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:101;;;;17948:140;;;;;;;;;;;;:::i;:::-;;;;;;;;;17810:285;;;;;;:::o;10139:916:35:-;10192:7;10211:14;10228:1;10211:18;;10276:8;10267:5;:17;10263:103;;10313:8;10304:17;;;;;;:::i;:::-;;;;;10349:2;10339:12;;;;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;;;;:::i;:::-;;;;;10465:2;10455:12;;;;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;;;;:::i;:::-;;;;;10581:2;10571:12;;;;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;;;;:::i;:::-;;;;;10695:1;10685:11;;;;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;;;;:::i;:::-;;;;;10808:1;10798:11;;;;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;;;;:::i;:::-;;;;;10921:1;10911:11;;;;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;;;;10950:66;11042:6;11035:13;;;10139:916;;;:::o;88:117:38:-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:118::-;1764:24;1782:5;1764:24;:::i;:::-;1759:3;1752:37;1677:118;;:::o;1801:222::-;1894:4;1932:2;1921:9;1917:18;1909:26;;1945:71;2013:1;2002:9;1998:17;1989:6;1945:71;:::i;:::-;1801:222;;;;:::o;2029:149::-;2065:7;2105:66;2098:5;2094:78;2083:89;;2029:149;;;:::o;2184:120::-;2256:23;2273:5;2256:23;:::i;:::-;2249:5;2246:34;2236:62;;2294:1;2291;2284:12;2236:62;2184:120;:::o;2310:137::-;2355:5;2393:6;2380:20;2371:29;;2409:32;2435:5;2409:32;:::i;:::-;2310:137;;;;:::o;2453:327::-;2511:6;2560:2;2548:9;2539:7;2535:23;2531:32;2528:119;;;2566:79;;:::i;:::-;2528:119;2686:1;2711:52;2755:7;2746:6;2735:9;2731:22;2711:52;:::i;:::-;2701:62;;2657:116;2453:327;;;;:::o;2786:90::-;2820:7;2863:5;2856:13;2849:21;2838:32;;2786:90;;;:::o;2882:109::-;2963:21;2978:5;2963:21;:::i;:::-;2958:3;2951:34;2882:109;;:::o;2997:210::-;3084:4;3122:2;3111:9;3107:18;3099:26;;3135:65;3197:1;3186:9;3182:17;3173:6;3135:65;:::i;:::-;2997:210;;;;:::o;3213:117::-;3322:1;3319;3312:12;3336:117;3445:1;3442;3435:12;3459:117;3568:1;3565;3558:12;3599:568;3672:8;3682:6;3732:3;3725:4;3717:6;3713:17;3709:27;3699:122;;3740:79;;:::i;:::-;3699:122;3853:6;3840:20;3830:30;;3883:18;3875:6;3872:30;3869:117;;;3905:79;;:::i;:::-;3869:117;4019:4;4011:6;4007:17;3995:29;;4073:3;4065:4;4057:6;4053:17;4043:8;4039:32;4036:41;4033:128;;;4080:79;;:::i;:::-;4033:128;3599:568;;;;;:::o;4186:552::-;4243:8;4253:6;4303:3;4296:4;4288:6;4284:17;4280:27;4270:122;;4311:79;;:::i;:::-;4270:122;4424:6;4411:20;4401:30;;4454:18;4446:6;4443:30;4440:117;;;4476:79;;:::i;:::-;4440:117;4590:4;4582:6;4578:17;4566:29;;4644:3;4636:4;4628:6;4624:17;4614:8;4610:32;4607:41;4604:128;;;4651:79;;:::i;:::-;4604:128;4186:552;;;;;:::o;4744:1423::-;4895:6;4903;4911;4919;4927;4935;4943;4992:3;4980:9;4971:7;4967:23;4963:33;4960:120;;;4999:79;;:::i;:::-;4960:120;5119:1;5144:53;5189:7;5180:6;5169:9;5165:22;5144:53;:::i;:::-;5134:63;;5090:117;5274:2;5263:9;5259:18;5246:32;5305:18;5297:6;5294:30;5291:117;;;5327:79;;:::i;:::-;5291:117;5440:80;5512:7;5503:6;5492:9;5488:22;5440:80;:::i;:::-;5422:98;;;;5217:313;5597:2;5586:9;5582:18;5569:32;5628:18;5620:6;5617:30;5614:117;;;5650:79;;:::i;:::-;5614:117;5763:80;5835:7;5826:6;5815:9;5811:22;5763:80;:::i;:::-;5745:98;;;;5540:313;5920:2;5909:9;5905:18;5892:32;5951:18;5943:6;5940:30;5937:117;;;5973:79;;:::i;:::-;5937:117;6086:64;6142:7;6133:6;6122:9;6118:22;6086:64;:::i;:::-;6068:82;;;;5863:297;4744:1423;;;;;;;;;;:::o;6173:329::-;6232:6;6281:2;6269:9;6260:7;6256:23;6252:32;6249:119;;;6287:79;;:::i;:::-;6249:119;6407:1;6432:53;6477:7;6468:6;6457:9;6453:22;6432:53;:::i;:::-;6422:63;;6378:117;6173:329;;;;:::o;6508:99::-;6560:6;6594:5;6588:12;6578:22;;6508:99;;;:::o;6613:169::-;6697:11;6731:6;6726:3;6719:19;6771:4;6766:3;6762:14;6747:29;;6613:169;;;;:::o;6788:246::-;6869:1;6879:113;6893:6;6890:1;6887:13;6879:113;;;6978:1;6973:3;6969:11;6963:18;6959:1;6954:3;6950:11;6943:39;6915:2;6912:1;6908:10;6903:15;;6879:113;;;7026:1;7017:6;7012:3;7008:16;7001:27;6850:184;6788:246;;;:::o;7040:102::-;7081:6;7132:2;7128:7;7123:2;7116:5;7112:14;7108:28;7098:38;;7040:102;;;:::o;7148:377::-;7236:3;7264:39;7297:5;7264:39;:::i;:::-;7319:71;7383:6;7378:3;7319:71;:::i;:::-;7312:78;;7399:65;7457:6;7452:3;7445:4;7438:5;7434:16;7399:65;:::i;:::-;7489:29;7511:6;7489:29;:::i;:::-;7484:3;7480:39;7473:46;;7240:285;7148:377;;;;:::o;7531:313::-;7644:4;7682:2;7671:9;7667:18;7659:26;;7731:9;7725:4;7721:20;7717:1;7706:9;7702:17;7695:47;7759:78;7832:4;7823:6;7759:78;:::i;:::-;7751:86;;7531:313;;;;:::o;7850:619::-;7927:6;7935;7943;7992:2;7980:9;7971:7;7967:23;7963:32;7960:119;;;7998:79;;:::i;:::-;7960:119;8118:1;8143:53;8188:7;8179:6;8168:9;8164:22;8143:53;:::i;:::-;8133:63;;8089:117;8245:2;8271:53;8316:7;8307:6;8296:9;8292:22;8271:53;:::i;:::-;8261:63;;8216:118;8373:2;8399:53;8444:7;8435:6;8424:9;8420:22;8399:53;:::i;:::-;8389:63;;8344:118;7850:619;;;;;:::o;8475:1569::-;8635:6;8643;8651;8659;8667;8675;8683;8691;8740:3;8728:9;8719:7;8715:23;8711:33;8708:120;;;8747:79;;:::i;:::-;8708:120;8867:1;8892:53;8937:7;8928:6;8917:9;8913:22;8892:53;:::i;:::-;8882:63;;8838:117;8994:2;9020:53;9065:7;9056:6;9045:9;9041:22;9020:53;:::i;:::-;9010:63;;8965:118;9150:2;9139:9;9135:18;9122:32;9181:18;9173:6;9170:30;9167:117;;;9203:79;;:::i;:::-;9167:117;9316:80;9388:7;9379:6;9368:9;9364:22;9316:80;:::i;:::-;9298:98;;;;9093:313;9473:2;9462:9;9458:18;9445:32;9504:18;9496:6;9493:30;9490:117;;;9526:79;;:::i;:::-;9490:117;9639:80;9711:7;9702:6;9691:9;9687:22;9639:80;:::i;:::-;9621:98;;;;9416:313;9796:3;9785:9;9781:19;9768:33;9828:18;9820:6;9817:30;9814:117;;;9850:79;;:::i;:::-;9814:117;9963:64;10019:7;10010:6;9999:9;9995:22;9963:64;:::i;:::-;9945:82;;;;9739:298;8475:1569;;;;;;;;;;;:::o;10050:77::-;10087:7;10116:5;10105:16;;10050:77;;;:::o;10133:122::-;10206:24;10224:5;10206:24;:::i;:::-;10199:5;10196:35;10186:63;;10245:1;10242;10235:12;10186:63;10133:122;:::o;10261:139::-;10307:5;10345:6;10332:20;10323:29;;10361:33;10388:5;10361:33;:::i;:::-;10261:139;;;;:::o;10406:474::-;10474:6;10482;10531:2;10519:9;10510:7;10506:23;10502:32;10499:119;;;10537:79;;:::i;:::-;10499:119;10657:1;10682:53;10727:7;10718:6;10707:9;10703:22;10682:53;:::i;:::-;10672:63;;10628:117;10784:2;10810:53;10855:7;10846:6;10835:9;10831:22;10810:53;:::i;:::-;10800:63;;10755:118;10406:474;;;;;:::o;10886:329::-;10945:6;10994:2;10982:9;10973:7;10969:23;10965:32;10962:119;;;11000:79;;:::i;:::-;10962:119;11120:1;11145:53;11190:7;11181:6;11170:9;11166:22;11145:53;:::i;:::-;11135:63;;11091:117;10886:329;;;;:::o;11221:118::-;11308:24;11326:5;11308:24;:::i;:::-;11303:3;11296:37;11221:118;;:::o;11345:222::-;11438:4;11476:2;11465:9;11461:18;11453:26;;11489:71;11557:1;11546:9;11542:17;11533:6;11489:71;:::i;:::-;11345:222;;;;:::o;11590:568::-;11663:8;11673:6;11723:3;11716:4;11708:6;11704:17;11700:27;11690:122;;11731:79;;:::i;:::-;11690:122;11844:6;11831:20;11821:30;;11874:18;11866:6;11863:30;11860:117;;;11896:79;;:::i;:::-;11860:117;12010:4;12002:6;11998:17;11986:29;;12064:3;12056:4;12048:6;12044:17;12034:8;12030:32;12027:41;12024:128;;;12071:79;;:::i;:::-;12024:128;11590:568;;;;;:::o;12164:934::-;12286:6;12294;12302;12310;12359:2;12347:9;12338:7;12334:23;12330:32;12327:119;;;12365:79;;:::i;:::-;12327:119;12513:1;12502:9;12498:17;12485:31;12543:18;12535:6;12532:30;12529:117;;;12565:79;;:::i;:::-;12529:117;12678:80;12750:7;12741:6;12730:9;12726:22;12678:80;:::i;:::-;12660:98;;;;12456:312;12835:2;12824:9;12820:18;12807:32;12866:18;12858:6;12855:30;12852:117;;;12888:79;;:::i;:::-;12852:117;13001:80;13073:7;13064:6;13053:9;13049:22;13001:80;:::i;:::-;12983:98;;;;12778:313;12164:934;;;;;;;:::o;13104:114::-;13171:6;13205:5;13199:12;13189:22;;13104:114;;;:::o;13224:184::-;13323:11;13357:6;13352:3;13345:19;13397:4;13392:3;13388:14;13373:29;;13224:184;;;;:::o;13414:132::-;13481:4;13504:3;13496:11;;13534:4;13529:3;13525:14;13517:22;;13414:132;;;:::o;13552:108::-;13629:24;13647:5;13629:24;:::i;:::-;13624:3;13617:37;13552:108;;:::o;13666:179::-;13735:10;13756:46;13798:3;13790:6;13756:46;:::i;:::-;13834:4;13829:3;13825:14;13811:28;;13666:179;;;;:::o;13851:113::-;13921:4;13953;13948:3;13944:14;13936:22;;13851:113;;;:::o;14000:732::-;14119:3;14148:54;14196:5;14148:54;:::i;:::-;14218:86;14297:6;14292:3;14218:86;:::i;:::-;14211:93;;14328:56;14378:5;14328:56;:::i;:::-;14407:7;14438:1;14423:284;14448:6;14445:1;14442:13;14423:284;;;14524:6;14518:13;14551:63;14610:3;14595:13;14551:63;:::i;:::-;14544:70;;14637:60;14690:6;14637:60;:::i;:::-;14627:70;;14483:224;14470:1;14467;14463:9;14458:14;;14423:284;;;14427:14;14723:3;14716:10;;14124:608;;;14000:732;;;;:::o;14738:373::-;14881:4;14919:2;14908:9;14904:18;14896:26;;14968:9;14962:4;14958:20;14954:1;14943:9;14939:17;14932:47;14996:108;15099:4;15090:6;14996:108;:::i;:::-;14988:116;;14738:373;;;;:::o;15117:963::-;15214:6;15222;15230;15238;15246;15295:3;15283:9;15274:7;15270:23;15266:33;15263:120;;;15302:79;;:::i;:::-;15263:120;15422:1;15447:53;15492:7;15483:6;15472:9;15468:22;15447:53;:::i;:::-;15437:63;;15393:117;15549:2;15575:53;15620:7;15611:6;15600:9;15596:22;15575:53;:::i;:::-;15565:63;;15520:118;15677:2;15703:53;15748:7;15739:6;15728:9;15724:22;15703:53;:::i;:::-;15693:63;;15648:118;15833:2;15822:9;15818:18;15805:32;15864:18;15856:6;15853:30;15850:117;;;15886:79;;:::i;:::-;15850:117;15999:64;16055:7;16046:6;16035:9;16031:22;15999:64;:::i;:::-;15981:82;;;;15776:297;15117:963;;;;;;;;:::o;16100:553::-;16158:8;16168:6;16218:3;16211:4;16203:6;16199:17;16195:27;16185:122;;16226:79;;:::i;:::-;16185:122;16339:6;16326:20;16316:30;;16369:18;16361:6;16358:30;16355:117;;;16391:79;;:::i;:::-;16355:117;16505:4;16497:6;16493:17;16481:29;;16559:3;16551:4;16543:6;16539:17;16529:8;16525:32;16522:41;16519:128;;;16566:79;;:::i;:::-;16519:128;16100:553;;;;;:::o;16659:529::-;16730:6;16738;16787:2;16775:9;16766:7;16762:23;16758:32;16755:119;;;16793:79;;:::i;:::-;16755:119;16941:1;16930:9;16926:17;16913:31;16971:18;16963:6;16960:30;16957:117;;;16993:79;;:::i;:::-;16957:117;17106:65;17163:7;17154:6;17143:9;17139:22;17106:65;:::i;:::-;17088:83;;;;16884:297;16659:529;;;;;:::o;17194:1079::-;17325:6;17333;17341;17349;17357;17406:2;17394:9;17385:7;17381:23;17377:32;17374:119;;;17412:79;;:::i;:::-;17374:119;17532:1;17557:53;17602:7;17593:6;17582:9;17578:22;17557:53;:::i;:::-;17547:63;;17503:117;17687:2;17676:9;17672:18;17659:32;17718:18;17710:6;17707:30;17704:117;;;17740:79;;:::i;:::-;17704:117;17853:80;17925:7;17916:6;17905:9;17901:22;17853:80;:::i;:::-;17835:98;;;;17630:313;18010:2;17999:9;17995:18;17982:32;18041:18;18033:6;18030:30;18027:117;;;18063:79;;:::i;:::-;18027:117;18176:80;18248:7;18239:6;18228:9;18224:22;18176:80;:::i;:::-;18158:98;;;;17953:313;17194:1079;;;;;;;;:::o;18279:329::-;18338:6;18387:2;18375:9;18366:7;18362:23;18358:32;18355:119;;;18393:79;;:::i;:::-;18355:119;18513:1;18538:53;18583:7;18574:6;18563:9;18559:22;18538:53;:::i;:::-;18528:63;;18484:117;18279:329;;;;:::o;18614:118::-;18701:24;18719:5;18701:24;:::i;:::-;18696:3;18689:37;18614:118;;:::o;18738:222::-;18831:4;18869:2;18858:9;18854:18;18846:26;;18882:71;18950:1;18939:9;18935:17;18926:6;18882:71;:::i;:::-;18738:222;;;;:::o;18966:116::-;19036:21;19051:5;19036:21;:::i;:::-;19029:5;19026:32;19016:60;;19072:1;19069;19062:12;19016:60;18966:116;:::o;19088:133::-;19131:5;19169:6;19156:20;19147:29;;19185:30;19209:5;19185:30;:::i;:::-;19088:133;;;;:::o;19227:468::-;19292:6;19300;19349:2;19337:9;19328:7;19324:23;19320:32;19317:119;;;19355:79;;:::i;:::-;19317:119;19475:1;19500:53;19545:7;19536:6;19525:9;19521:22;19500:53;:::i;:::-;19490:63;;19446:117;19602:2;19628:50;19670:7;19661:6;19650:9;19646:22;19628:50;:::i;:::-;19618:60;;19573:115;19227:468;;;;;:::o;19701:474::-;19769:6;19777;19826:2;19814:9;19805:7;19801:23;19797:32;19794:119;;;19832:79;;:::i;:::-;19794:119;19952:1;19977:53;20022:7;20013:6;20002:9;19998:22;19977:53;:::i;:::-;19967:63;;19923:117;20079:2;20105:53;20150:7;20141:6;20130:9;20126:22;20105:53;:::i;:::-;20095:63;;20050:118;19701:474;;;;;:::o;20181:1109::-;20287:6;20295;20303;20311;20319;20327;20376:3;20364:9;20355:7;20351:23;20347:33;20344:120;;;20383:79;;:::i;:::-;20344:120;20503:1;20528:53;20573:7;20564:6;20553:9;20549:22;20528:53;:::i;:::-;20518:63;;20474:117;20630:2;20656:53;20701:7;20692:6;20681:9;20677:22;20656:53;:::i;:::-;20646:63;;20601:118;20758:2;20784:53;20829:7;20820:6;20809:9;20805:22;20784:53;:::i;:::-;20774:63;;20729:118;20886:2;20912:53;20957:7;20948:6;20937:9;20933:22;20912:53;:::i;:::-;20902:63;;20857:118;21042:3;21031:9;21027:19;21014:33;21074:18;21066:6;21063:30;21060:117;;;21096:79;;:::i;:::-;21060:117;21209:64;21265:7;21256:6;21245:9;21241:22;21209:64;:::i;:::-;21191:82;;;;20985:298;20181:1109;;;;;;;;:::o;21296:165::-;21436:17;21432:1;21424:6;21420:14;21413:41;21296:165;:::o;21467:366::-;21609:3;21630:67;21694:2;21689:3;21630:67;:::i;:::-;21623:74;;21706:93;21795:3;21706:93;:::i;:::-;21824:2;21819:3;21815:12;21808:19;;21467:366;;;:::o;21839:419::-;22005:4;22043:2;22032:9;22028:18;22020:26;;22092:9;22086:4;22082:20;22078:1;22067:9;22063:17;22056:47;22120:131;22246:4;22120:131;:::i;:::-;22112:139;;21839:419;;;:::o;22264:171::-;22404:23;22400:1;22392:6;22388:14;22381:47;22264:171;:::o;22441:366::-;22583:3;22604:67;22668:2;22663:3;22604:67;:::i;:::-;22597:74;;22680:93;22769:3;22680:93;:::i;:::-;22798:2;22793:3;22789:12;22782:19;;22441:366;;;:::o;22813:419::-;22979:4;23017:2;23006:9;23002:18;22994:26;;23066:9;23060:4;23056:20;23052:1;23041:9;23037:17;23030:47;23094:131;23220:4;23094:131;:::i;:::-;23086:139;;22813:419;;;:::o;23238:180::-;23286:77;23283:1;23276:88;23383:4;23380:1;23373:15;23407:4;23404:1;23397:15;23424:194;23464:4;23484:20;23502:1;23484:20;:::i;:::-;23479:25;;23518:20;23536:1;23518:20;:::i;:::-;23513:25;;23562:1;23559;23555:9;23547:17;;23586:1;23580:4;23577:11;23574:37;;;23591:18;;:::i;:::-;23574:37;23424:194;;;;:::o;23624:442::-;23773:4;23811:2;23800:9;23796:18;23788:26;;23824:71;23892:1;23881:9;23877:17;23868:6;23824:71;:::i;:::-;23905:72;23973:2;23962:9;23958:18;23949:6;23905:72;:::i;:::-;23987;24055:2;24044:9;24040:18;24031:6;23987:72;:::i;:::-;23624:442;;;;;;:::o;24072:181::-;24212:33;24208:1;24200:6;24196:14;24189:57;24072:181;:::o;24259:366::-;24401:3;24422:67;24486:2;24481:3;24422:67;:::i;:::-;24415:74;;24498:93;24587:3;24498:93;:::i;:::-;24616:2;24611:3;24607:12;24600:19;;24259:366;;;:::o;24631:419::-;24797:4;24835:2;24824:9;24820:18;24812:26;;24884:9;24878:4;24874:20;24870:1;24859:9;24855:17;24848:47;24912:131;25038:4;24912:131;:::i;:::-;24904:139;;24631:419;;;:::o;25056:180::-;25196:32;25192:1;25184:6;25180:14;25173:56;25056:180;:::o;25242:366::-;25384:3;25405:67;25469:2;25464:3;25405:67;:::i;:::-;25398:74;;25481:93;25570:3;25481:93;:::i;:::-;25599:2;25594:3;25590:12;25583:19;;25242:366;;;:::o;25614:419::-;25780:4;25818:2;25807:9;25803:18;25795:26;;25867:9;25861:4;25857:20;25853:1;25842:9;25838:17;25831:47;25895:131;26021:4;25895:131;:::i;:::-;25887:139;;25614:419;;;:::o;26039:148::-;26141:11;26178:3;26163:18;;26039:148;;;;:::o;26193:174::-;26333:26;26329:1;26321:6;26317:14;26310:50;26193:174;:::o;26373:402::-;26533:3;26554:85;26636:2;26631:3;26554:85;:::i;:::-;26547:92;;26648:93;26737:3;26648:93;:::i;:::-;26766:2;26761:3;26757:12;26750:19;;26373:402;;;:::o;26781:390::-;26887:3;26915:39;26948:5;26915:39;:::i;:::-;26970:89;27052:6;27047:3;26970:89;:::i;:::-;26963:96;;27068:65;27126:6;27121:3;27114:4;27107:5;27103:16;27068:65;:::i;:::-;27158:6;27153:3;27149:16;27142:23;;26891:280;26781:390;;;;:::o;27177:156::-;27317:8;27313:1;27305:6;27301:14;27294:32;27177:156;:::o;27339:400::-;27499:3;27520:84;27602:1;27597:3;27520:84;:::i;:::-;27513:91;;27613:93;27702:3;27613:93;:::i;:::-;27731:1;27726:3;27722:11;27715:18;;27339:400;;;:::o;27745:807::-;28079:3;28101:148;28245:3;28101:148;:::i;:::-;28094:155;;28266:95;28357:3;28348:6;28266:95;:::i;:::-;28259:102;;28378:148;28522:3;28378:148;:::i;:::-;28371:155;;28543:3;28536:10;;27745:807;;;;:::o;28558:177::-;28698:29;28694:1;28686:6;28682:14;28675:53;28558:177;:::o;28741:366::-;28883:3;28904:67;28968:2;28963:3;28904:67;:::i;:::-;28897:74;;28980:93;29069:3;28980:93;:::i;:::-;29098:2;29093:3;29089:12;29082:19;;28741:366;;;:::o;29113:419::-;29279:4;29317:2;29306:9;29302:18;29294:26;;29366:9;29360:4;29356:20;29352:1;29341:9;29337:17;29330:47;29394:131;29520:4;29394:131;:::i;:::-;29386:139;;29113:419;;;:::o;29538:178::-;29678:30;29674:1;29666:6;29662:14;29655:54;29538:178;:::o;29722:366::-;29864:3;29885:67;29949:2;29944:3;29885:67;:::i;:::-;29878:74;;29961:93;30050:3;29961:93;:::i;:::-;30079:2;30074:3;30070:12;30063:19;;29722:366;;;:::o;30094:419::-;30260:4;30298:2;30287:9;30283:18;30275:26;;30347:9;30341:4;30337:20;30333:1;30322:9;30318:17;30311:47;30375:131;30501:4;30375:131;:::i;:::-;30367:139;;30094:419;;;:::o;30519:180::-;30567:77;30564:1;30557:88;30664:4;30661:1;30654:15;30688:4;30685:1;30678:15;30705:634;30926:4;30964:2;30953:9;30949:18;30941:26;;31013:9;31007:4;31003:20;30999:1;30988:9;30984:17;30977:47;31041:108;31144:4;31135:6;31041:108;:::i;:::-;31033:116;;31196:9;31190:4;31186:20;31181:2;31170:9;31166:18;31159:48;31224:108;31327:4;31318:6;31224:108;:::i;:::-;31216:116;;30705:634;;;;;:::o;31345:180::-;31393:77;31390:1;31383:88;31490:4;31487:1;31480:15;31514:4;31511:1;31504:15;31531:320;31575:6;31612:1;31606:4;31602:12;31592:22;;31659:1;31653:4;31649:12;31680:18;31670:81;;31736:4;31728:6;31724:17;31714:27;;31670:81;31798:2;31790:6;31787:14;31767:18;31764:38;31761:84;;31817:18;;:::i;:::-;31761:84;31582:269;31531:320;;;:::o;31857:141::-;31906:4;31929:3;31921:11;;31952:3;31949:1;31942:14;31986:4;31983:1;31973:18;31965:26;;31857:141;;;:::o;32028:874::-;32131:3;32168:5;32162:12;32197:36;32223:9;32197:36;:::i;:::-;32249:89;32331:6;32326:3;32249:89;:::i;:::-;32242:96;;32369:1;32358:9;32354:17;32385:1;32380:166;;;;32560:1;32555:341;;;;32347:549;;32380:166;32464:4;32460:9;32449;32445:25;32440:3;32433:38;32526:6;32519:14;32512:22;32504:6;32500:35;32495:3;32491:45;32484:52;;32380:166;;32555:341;32622:38;32654:5;32622:38;:::i;:::-;32682:1;32696:154;32710:6;32707:1;32704:13;32696:154;;;32784:7;32778:14;32774:1;32769:3;32765:11;32758:35;32834:1;32825:7;32821:15;32810:26;;32732:4;32729:1;32725:12;32720:17;;32696:154;;;32879:6;32874:3;32870:16;32863:23;;32562:334;;32347:549;;32135:767;;32028:874;;;;:::o;32908:429::-;33085:3;33107:92;33195:3;33186:6;33107:92;:::i;:::-;33100:99;;33216:95;33307:3;33298:6;33216:95;:::i;:::-;33209:102;;33328:3;33321:10;;32908:429;;;;;:::o;33343:178::-;33483:30;33479:1;33471:6;33467:14;33460:54;33343:178;:::o;33527:366::-;33669:3;33690:67;33754:2;33749:3;33690:67;:::i;:::-;33683:74;;33766:93;33855:3;33766:93;:::i;:::-;33884:2;33879:3;33875:12;33868:19;;33527:366;;;:::o;33899:419::-;34065:4;34103:2;34092:9;34088:18;34080:26;;34152:9;34146:4;34142:20;34138:1;34127:9;34123:17;34116:47;34180:131;34306:4;34180:131;:::i;:::-;34172:139;;33899:419;;;:::o;34324:332::-;34445:4;34483:2;34472:9;34468:18;34460:26;;34496:71;34564:1;34553:9;34549:17;34540:6;34496:71;:::i;:::-;34577:72;34645:2;34634:9;34630:18;34621:6;34577:72;:::i;:::-;34324:332;;;;;:::o;34662:181::-;34802:33;34798:1;34790:6;34786:14;34779:57;34662:181;:::o;34849:366::-;34991:3;35012:67;35076:2;35071:3;35012:67;:::i;:::-;35005:74;;35088:93;35177:3;35088:93;:::i;:::-;35206:2;35201:3;35197:12;35190:19;;34849:366;;;:::o;35221:419::-;35387:4;35425:2;35414:9;35410:18;35402:26;;35474:9;35468:4;35464:20;35460:1;35449:9;35445:17;35438:47;35502:131;35628:4;35502:131;:::i;:::-;35494:139;;35221:419;;;:::o;35646:117::-;35755:1;35752;35745:12;35769:98;35853:6;35848:3;35843;35830:30;35769:98;;;:::o;35903:537::-;36031:3;36052:86;36131:6;36126:3;36052:86;:::i;:::-;36045:93;;36162:66;36154:6;36151:78;36148:165;;;36232:79;;:::i;:::-;36148:165;36344:4;36336:6;36332:17;36322:27;;36359:43;36395:6;36390:3;36383:5;36359:43;:::i;:::-;36427:6;36422:3;36418:16;36411:23;;35903:537;;;;;:::o;36446:674::-;36687:4;36725:2;36714:9;36710:18;36702:26;;36774:9;36768:4;36764:20;36760:1;36749:9;36745:17;36738:47;36802:118;36915:4;36906:6;36898;36802:118;:::i;:::-;36794:126;;36967:9;36961:4;36957:20;36952:2;36941:9;36937:18;36930:48;36995:118;37108:4;37099:6;37091;36995:118;:::i;:::-;36987:126;;36446:674;;;;;;;:::o;37126:174::-;37266:26;37262:1;37254:6;37250:14;37243:50;37126:174;:::o;37306:366::-;37448:3;37469:67;37533:2;37528:3;37469:67;:::i;:::-;37462:74;;37545:93;37634:3;37545:93;:::i;:::-;37663:2;37658:3;37654:12;37647:19;;37306:366;;;:::o;37678:419::-;37844:4;37882:2;37871:9;37867:18;37859:26;;37931:9;37925:4;37921:20;37917:1;37906:9;37902:17;37895:47;37959:131;38085:4;37959:131;:::i;:::-;37951:139;;37678:419;;;:::o;38103:180::-;38151:77;38148:1;38141:88;38248:4;38245:1;38238:15;38272:4;38269:1;38262:15;38289:163;38429:15;38425:1;38417:6;38413:14;38406:39;38289:163;:::o;38458:366::-;38600:3;38621:67;38685:2;38680:3;38621:67;:::i;:::-;38614:74;;38697:93;38786:3;38697:93;:::i;:::-;38815:2;38810:3;38806:12;38799:19;;38458:366;;;:::o;38830:419::-;38996:4;39034:2;39023:9;39019:18;39011:26;;39083:9;39077:4;39073:20;39069:1;39058:9;39054:17;39047:47;39111:131;39237:4;39111:131;:::i;:::-;39103:139;;38830:419;;;:::o;39255:97::-;39314:6;39342:3;39332:13;;39255:97;;;;:::o;39358:93::-;39395:6;39442:2;39437;39430:5;39426:14;39422:23;39412:33;;39358:93;;;:::o;39457:107::-;39501:8;39551:5;39545:4;39541:16;39520:37;;39457:107;;;;:::o;39570:393::-;39639:6;39689:1;39677:10;39673:18;39712:97;39742:66;39731:9;39712:97;:::i;:::-;39830:39;39860:8;39849:9;39830:39;:::i;:::-;39818:51;;39902:4;39898:9;39891:5;39887:21;39878:30;;39951:4;39941:8;39937:19;39930:5;39927:30;39917:40;;39646:317;;39570:393;;;;;:::o;39969:60::-;39997:3;40018:5;40011:12;;39969:60;;;:::o;40035:142::-;40085:9;40118:53;40136:34;40145:24;40163:5;40145:24;:::i;:::-;40136:34;:::i;:::-;40118:53;:::i;:::-;40105:66;;40035:142;;;:::o;40183:75::-;40226:3;40247:5;40240:12;;40183:75;;;:::o;40264:269::-;40374:39;40405:7;40374:39;:::i;:::-;40435:91;40484:41;40508:16;40484:41;:::i;:::-;40476:6;40469:4;40463:11;40435:91;:::i;:::-;40429:4;40422:105;40340:193;40264:269;;;:::o;40539:73::-;40584:3;40539:73;:::o;40618:189::-;40695:32;;:::i;:::-;40736:65;40794:6;40786;40780:4;40736:65;:::i;:::-;40671:136;40618:189;;:::o;40813:186::-;40873:120;40890:3;40883:5;40880:14;40873:120;;;40944:39;40981:1;40974:5;40944:39;:::i;:::-;40917:1;40910:5;40906:13;40897:22;;40873:120;;;40813:186;;:::o;41005:543::-;41106:2;41101:3;41098:11;41095:446;;;41140:38;41172:5;41140:38;:::i;:::-;41224:29;41242:10;41224:29;:::i;:::-;41214:8;41210:44;41407:2;41395:10;41392:18;41389:49;;;41428:8;41413:23;;41389:49;41451:80;41507:22;41525:3;41507:22;:::i;:::-;41497:8;41493:37;41480:11;41451:80;:::i;:::-;41110:431;;41095:446;41005:543;;;:::o;41554:117::-;41608:8;41658:5;41652:4;41648:16;41627:37;;41554:117;;;;:::o;41677:169::-;41721:6;41754:51;41802:1;41798:6;41790:5;41787:1;41783:13;41754:51;:::i;:::-;41750:56;41835:4;41829;41825:15;41815:25;;41728:118;41677:169;;;;:::o;41851:295::-;41927:4;42073:29;42098:3;42092:4;42073:29;:::i;:::-;42065:37;;42135:3;42132:1;42128:11;42122:4;42119:21;42111:29;;41851:295;;;;:::o;42151:1403::-;42275:44;42315:3;42310;42275:44;:::i;:::-;42384:18;42376:6;42373:30;42370:56;;;42406:18;;:::i;:::-;42370:56;42450:38;42482:4;42476:11;42450:38;:::i;:::-;42535:67;42595:6;42587;42581:4;42535:67;:::i;:::-;42629:1;42658:2;42650:6;42647:14;42675:1;42670:632;;;;43346:1;43363:6;43360:84;;;43419:9;43414:3;43410:19;43397:33;43388:42;;43360:84;43470:67;43530:6;43523:5;43470:67;:::i;:::-;43464:4;43457:81;43319:229;42640:908;;42670:632;42722:4;42718:9;42710:6;42706:22;42756:37;42788:4;42756:37;:::i;:::-;42815:1;42829:215;42843:7;42840:1;42837:14;42829:215;;;42929:9;42924:3;42920:19;42907:33;42899:6;42892:49;42980:1;42972:6;42968:14;42958:24;;43027:2;43016:9;43012:18;42999:31;;42866:4;42863:1;42859:12;42854:17;;42829:215;;;43072:6;43063:7;43060:19;43057:186;;;43137:9;43132:3;43128:19;43115:33;43180:48;43222:4;43214:6;43210:17;43199:9;43180:48;:::i;:::-;43172:6;43165:64;43080:163;43057:186;43289:1;43285;43277:6;43273:14;43269:22;43263:4;43256:36;42677:625;;;42640:908;;42250:1304;;;42151:1403;;;:::o;43560:146::-;43657:6;43652:3;43647;43634:30;43698:1;43689:6;43684:3;43680:16;43673:27;43560:146;;;:::o;43736:317::-;43834:3;43855:71;43919:6;43914:3;43855:71;:::i;:::-;43848:78;;43936:56;43985:6;43980:3;43973:5;43936:56;:::i;:::-;44017:29;44039:6;44017:29;:::i;:::-;44012:3;44008:39;44001:46;;43736:317;;;;;:::o;44059:333::-;44182:4;44220:2;44209:9;44205:18;44197:26;;44269:9;44263:4;44259:20;44255:1;44244:9;44240:17;44233:47;44297:88;44380:4;44371:6;44363;44297:88;:::i;:::-;44289:96;;44059:333;;;;;:::o;44398:180::-;44538:32;44534:1;44526:6;44522:14;44515:56;44398:180;:::o;44584:366::-;44726:3;44747:67;44811:2;44806:3;44747:67;:::i;:::-;44740:74;;44823:93;44912:3;44823:93;:::i;:::-;44941:2;44936:3;44932:12;44925:19;;44584:366;;;:::o;44956:419::-;45122:4;45160:2;45149:9;45145:18;45137:26;;45209:9;45203:4;45199:20;45195:1;45184:9;45180:17;45173:47;45237:131;45363:4;45237:131;:::i;:::-;45229:139;;44956:419;;;:::o;45381:79::-;45420:7;45449:5;45438:16;;45381:79;;;:::o;45466:157::-;45571:45;45591:24;45609:5;45591:24;:::i;:::-;45571:45;:::i;:::-;45566:3;45559:58;45466:157;;:::o;45629:256::-;45741:3;45756:75;45827:3;45818:6;45756:75;:::i;:::-;45856:2;45851:3;45847:12;45840:19;;45876:3;45869:10;;45629:256;;;;:::o;45891:175::-;46031:27;46027:1;46019:6;46015:14;46008:51;45891:175;:::o;46072:366::-;46214:3;46235:67;46299:2;46294:3;46235:67;:::i;:::-;46228:74;;46311:93;46400:3;46311:93;:::i;:::-;46429:2;46424:3;46420:12;46413:19;;46072:366;;;:::o;46444:419::-;46610:4;46648:2;46637:9;46633:18;46625:26;;46697:9;46691:4;46687:20;46683:1;46672:9;46668:17;46661:47;46725:131;46851:4;46725:131;:::i;:::-;46717:139;;46444:419;;;:::o;46869:98::-;46920:6;46954:5;46948:12;46938:22;;46869:98;;;:::o;46973:168::-;47056:11;47090:6;47085:3;47078:19;47130:4;47125:3;47121:14;47106:29;;46973:168;;;;:::o;47147:373::-;47233:3;47261:38;47293:5;47261:38;:::i;:::-;47315:70;47378:6;47373:3;47315:70;:::i;:::-;47308:77;;47394:65;47452:6;47447:3;47440:4;47433:5;47429:16;47394:65;:::i;:::-;47484:29;47506:6;47484:29;:::i;:::-;47479:3;47475:39;47468:46;;47237:283;47147:373;;;;:::o;47526:1053::-;47849:4;47887:3;47876:9;47872:19;47864:27;;47901:71;47969:1;47958:9;47954:17;47945:6;47901:71;:::i;:::-;47982:72;48050:2;48039:9;48035:18;48026:6;47982:72;:::i;:::-;48101:9;48095:4;48091:20;48086:2;48075:9;48071:18;48064:48;48129:108;48232:4;48223:6;48129:108;:::i;:::-;48121:116;;48284:9;48278:4;48274:20;48269:2;48258:9;48254:18;48247:48;48312:108;48415:4;48406:6;48312:108;:::i;:::-;48304:116;;48468:9;48462:4;48458:20;48452:3;48441:9;48437:19;48430:49;48496:76;48567:4;48558:6;48496:76;:::i;:::-;48488:84;;47526:1053;;;;;;;;:::o;48585:141::-;48641:5;48672:6;48666:13;48657:22;;48688:32;48714:5;48688:32;:::i;:::-;48585:141;;;;:::o;48732:349::-;48801:6;48850:2;48838:9;48829:7;48825:23;48821:32;48818:119;;;48856:79;;:::i;:::-;48818:119;48976:1;49001:63;49056:7;49047:6;49036:9;49032:22;49001:63;:::i;:::-;48991:73;;48947:127;48732:349;;;;:::o;49087:176::-;49227:28;49223:1;49215:6;49211:14;49204:52;49087:176;:::o;49269:366::-;49411:3;49432:67;49496:2;49491:3;49432:67;:::i;:::-;49425:74;;49508:93;49597:3;49508:93;:::i;:::-;49626:2;49621:3;49617:12;49610:19;;49269:366;;;:::o;49641:419::-;49807:4;49845:2;49834:9;49830:18;49822:26;;49894:9;49888:4;49884:20;49880:1;49869:9;49865:17;49858:47;49922:131;50048:4;49922:131;:::i;:::-;49914:139;;49641:419;;;:::o;50066:180::-;50114:77;50111:1;50104:88;50211:4;50208:1;50201:15;50235:4;50232:1;50225:15;50252:179;50392:31;50388:1;50380:6;50376:14;50369:55;50252:179;:::o;50437:366::-;50579:3;50600:67;50664:2;50659:3;50600:67;:::i;:::-;50593:74;;50676:93;50765:3;50676:93;:::i;:::-;50794:2;50789:3;50785:12;50778:19;;50437:366;;;:::o;50809:419::-;50975:4;51013:2;51002:9;50998:18;50990:26;;51062:9;51056:4;51052:20;51048:1;51037:9;51033:17;51026:47;51090:131;51216:4;51090:131;:::i;:::-;51082:139;;50809:419;;;:::o;51234:167::-;51374:19;51370:1;51362:6;51358:14;51351:43;51234:167;:::o;51407:366::-;51549:3;51570:67;51634:2;51629:3;51570:67;:::i;:::-;51563:74;;51646:93;51735:3;51646:93;:::i;:::-;51764:2;51759:3;51755:12;51748:19;;51407:366;;;:::o;51779:419::-;51945:4;51983:2;51972:9;51968:18;51960:26;;52032:9;52026:4;52022:20;52018:1;52007:9;52003:17;51996:47;52060:131;52186:4;52060:131;:::i;:::-;52052:139;;51779:419;;;:::o;52204:751::-;52427:4;52465:3;52454:9;52450:19;52442:27;;52479:71;52547:1;52536:9;52532:17;52523:6;52479:71;:::i;:::-;52560:72;52628:2;52617:9;52613:18;52604:6;52560:72;:::i;:::-;52642;52710:2;52699:9;52695:18;52686:6;52642:72;:::i;:::-;52724;52792:2;52781:9;52777:18;52768:6;52724:72;:::i;:::-;52844:9;52838:4;52834:20;52828:3;52817:9;52813:19;52806:49;52872:76;52943:4;52934:6;52872:76;:::i;:::-;52864:84;;52204:751;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"4037400","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_ROLE()":"375","MINTER_ROLE()":"418","SUPER_ADMIN_ROLE()":"419","balanceOf(address,uint256)":"infinite","balanceOfBatch(address[],uint256[])":"infinite","baseMetadataURI()":"infinite","batchBurnFrom(address,uint256[],uint256[])":"infinite","burnFrom(address,uint256,uint256)":"infinite","grantAdminRole(address)":"infinite","grantMinterRole(address)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isApprovedForAll(address,address)":"infinite","owner()":"infinite","pause()":"infinite","paused()":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","safeBatchMint(address,uint256[],uint256[],bytes)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeMint(address,uint256,uint256,bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setBaseMetadataURI(string)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite","unpause()":"infinite","uri(uint256)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","MINTER_ROLE()":"d5391393","SUPER_ADMIN_ROLE()":"4460bdd6","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","baseMetadataURI()":"5b2bd79e","batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5","grantAdminRole(address)":"c634b78e","grantMinterRole(address)":"3dd1eb61","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeMint(address,uint256,uint256,bytes)":"5cfa9297","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setBaseMetadataURI(string)":"7e518ec8","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseMetadataURI\",\"type\":\"string\"}],\"name\":\"BaseMetadataURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"BaseMetadataURISet(string)\":{\"params\":{\"baseMetadataURI\":\"The new base metadata URI.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"the account granted with the role.\",\"operator\":\"the initiator of the grant.\",\"role\":\"the granted role.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"the account losing the role.\",\"operator\":\"the initiator of the revocation, or identical to `account` for a renouncement.\",\"role\":\"the revoked or renounced role.\"}},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"params\":{\"from\":\"The previous tokens owner.\",\"ids\":\"The transferred tokens identifiers.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new tokens owner.\",\"values\":\"The amounts of tokens.\"}},\"TransferSingle(address,address,address,uint256,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"id\":\"The transferred token identifier.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new token owner.\",\"value\":\"The amount of token.\"}},\"URI(string,uint256)\":{\"params\":{\"id\":\"The token identifier.\",\"value\":\"The token metadata URI.\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"The identifier to retrieve the balance of.\",\"owner\":\"The account to retrieve the balance of.\"},\"returns\":{\"balance\":\"The balance of `id` owned by account `owner`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `ids` have different lengths.\",\"params\":{\"ids\":\"The identifiers to retrieve the balance of.\",\"owners\":\"The addresses of the token holders\"},\"returns\":{\"balances\":\"The balances of `ids` owned by accounts `owners`.\"}},\"baseMetadataURI()\":{\"returns\":{\"baseURI\":\"The base metadata URI.\"}},\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"_0\":\"whether `account` has `role`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"Address of the operator.\",\"owner\":\"Address of the authorisation giver.\"},\"returns\":{\"approvedForAll\":\"True if the operator is approved, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"pause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is paused.Emits a {Paused} event.\"},\"paused()\":{\"returns\":{\"_0\":\"isPaused The paused state of the contract.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current tokens owner.\",\"ids\":\"Identifiers of the tokens to transfer.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to transfer.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current token owner.\",\"id\":\"Identifier of the token to transfer.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to approve the operator, false to revoke its approval.\",\"operator\":\"Address of the operator.\"}},\"setBaseMetadataURI(string)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {BaseMetadataURISet} event.\",\"params\":{\"baseURI\":\"The base metadata URI.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"unpause()\":{\"details\":\"Reverts if the sender is not the contract owner.Reverts if the contract is not paused.Emits an {Unpaused} event.\"},\"uri(uint256)\":{\"details\":\"URIs are defined in RFC 3986.The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".The uri function SHOULD be used to retrieve values if no event was emitted.The uri function MUST return the same value as the latest event for an _id if it was emitted.The uri function MUST NOT be used to check for the existence of a token as it is possible for  an implementation to return a valid string even if the token does not exist.\",\"returns\":{\"metadataURI\":\"The URI associated to the token.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"BaseMetadataURISet(string)\":{\"notice\":\"Emitted when the base token metadata URI is updated.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"Paused()\":{\"notice\":\"Emitted when the pause is triggered.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when a role is granted.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when a role is revoked or renounced.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"notice\":\"Emitted when a batch of tokens is transferred.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when some token is transferred.\"},\"URI(string,uint256)\":{\"notice\":\"Emitted optionally when a token metadata URI is set.\"},\"Unpaused()\":{\"notice\":\"Emitted when the pause is lifted.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Retrieves the balance of `id` owned by account `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Retrieves the balances of `ids` owned by accounts `owners`.\"},\"baseMetadataURI()\":{\"notice\":\"Gets the base metadata URI.\"},\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Retrieves the approval status of an operator for a given owner.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely transfers a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Safely transfers some token.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enables or disables an operator's approval.\"},\"setBaseMetadataURI(string)\":{\"notice\":\"Sets the base metadata URI.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"},\"uri(uint256)\":{\"notice\":\"Retrieves the URI for a given token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DemoNFT.sol\":\"DemoNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xad30286210b6693b212a323037dde404939d7745e4578ee1a899cce60b3aa216\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when a role is granted.\\n    /// @param role the granted role.\\n    /// @param account the account granted with the role.\\n    /// @param operator the initiator of the grant.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when a role is revoked or renounced.\\n    /// @param role the revoked or renounced role.\\n    /// @param account the account losing the role.\\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if the sender does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xbf8f619858115dc1f3d4a3214a651753a3a3ba4e53b0837a03054ae471e10410\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96af8a6ddb3c9f1649d7ce512cd9cb87f643cea11ca100c857aac087a839272\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./libraries/PauseStorage.sol\\\";\\nimport {PauseBase} from \\\"./base/PauseBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Pausing mechanism (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract Pause is PauseBase, ContractOwnership {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial pause state.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    constructor(bool isPaused) {\\n        PauseStorage.layout().constructorInit(isPaused);\\n    }\\n}\\n\",\"keccak256\":\"0x8fa8023486d561e0a2941485e1d02d9db3f899f143c7f8a6ab0643beeb3258de\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {PauseStorage} from \\\"./../libraries/PauseStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Pausing mechanism (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PauseBase is Context {\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the pause is triggered.\\n    event Paused();\\n\\n    /// @notice Emitted when the pause is lifted.\\n    event Unpaused();\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool) {\\n        return PauseStorage.layout().paused();\\n    }\\n}\\n\",\"keccak256\":\"0x771539326a06f752e7fe6bca3e1f36668749a158bef6e9107e8502d16abe9fd1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Paused} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        require(s.isPaused, \\\"Pause: not paused\\\");\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        require(!s.isPaused, \\\"Pause: paused\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb10c9dfe4535fea92eb0975b33171b65bdb955d997771cb1abf7adb4d27d4756\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC1155Storage} from \\\"./libraries/ERC1155Storage.sol\\\";\\nimport {ERC1155Base} from \\\"./base/ERC1155Base.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155 is ERC1155Base, InterfaceDetection {\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155.\\n    constructor() {\\n        ERC1155Storage.init();\\n    }\\n}\\n\",\"keccak256\":\"0x1bfdcf2b4e1fcca4de2d1b5cbe942ed6b058d3067b1c7abec230ec9f326a876a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC1155Storage} from \\\"./libraries/ERC1155Storage.sol\\\";\\nimport {ERC1155BurnableBase} from \\\"./base/ERC1155BurnableBase.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155Burnable is ERC1155BurnableBase {\\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Burnable\\n    constructor() {\\n        ERC1155Storage.initERC1155Burnable();\\n    }\\n}\\n\",\"keccak256\":\"0x2b5cbff4206ce4a691da0f85256de705d685f51de51821f4f1c9343dd08c6bb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC1155Storage} from \\\"./libraries/ERC1155Storage.sol\\\";\\nimport {TokenMetadataWithBaseURIStorage} from \\\"./../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\\\";\\nimport {ERC1155MetadataURIWithBaseURIBase} from \\\"./base/ERC1155MetadataURIWithBaseURIBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: MetadataURIPerToken (immutable version).\\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155MetadataURIWithBaseURI is ERC1155MetadataURIWithBaseURIBase, ContractOwnership {\\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\\n\\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155MetadataURI\\n    constructor() {\\n        ERC1155Storage.initERC1155MetadataURI();\\n    }\\n}\\n\",\"keccak256\":\"0x9a3cbb7039610ae65f7b466e55ea3f72cbe560a775e7ef2a74bdbc5144e51f8e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC1155Storage} from \\\"./libraries/ERC1155Storage.sol\\\";\\nimport {ERC1155MintableBase} from \\\"./base/ERC1155MintableBase.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155Mintable is ERC1155MintableBase, AccessControl {\\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Mintable\\n    constructor() {\\n        ERC1155Storage.initERC1155Mintable();\\n    }\\n}\\n\",\"keccak256\":\"0xd661158628ee63e7452e96203b3ac03c0f8e0e0993a021c0d639442cb8928562\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC1155Base is Context, IERC1155 {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n\\n    /// @inheritdoc IERC1155\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\\n        ERC1155Storage.layout().safeTransferFrom(_msgSender(), from, to, id, value, data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external virtual override {\\n        ERC1155Storage.layout().safeBatchTransferFrom(_msgSender(), from, to, ids, values, data);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        ERC1155Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool approvedForAll) {\\n        return ERC1155Storage.layout().isApprovedForAll(owner, operator);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function balanceOf(address owner, uint256 id) external view virtual override returns (uint256 balance) {\\n        return ERC1155Storage.layout().balanceOf(owner, id);\\n    }\\n\\n    /// @inheritdoc IERC1155\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view virtual override returns (uint256[] memory balances) {\\n        return ERC1155Storage.layout().balanceOfBatch(owners, ids);\\n    }\\n}\\n\",\"keccak256\":\"0xf59b067620f7905751fe9353e0416ca8eeb9d6ebd705f36b0366f81f44897cc9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155BurnableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\nabstract contract ERC1155BurnableBase is Context, IERC1155Burnable {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n\\n    /// @inheritdoc IERC1155Burnable\\n    function burnFrom(address from, uint256 id, uint256 value) external virtual override {\\n        ERC1155Storage.layout().burnFrom(_msgSender(), from, id, value);\\n    }\\n\\n    /// @inheritdoc IERC1155Burnable\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external virtual override {\\n        ERC1155Storage.layout().batchBurnFrom(_msgSender(), from, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xcbe7df476ad6f481222ab3f37350196b238a6be163c79f6f3a6b4f175cfec4f0\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {TokenMetadataWithBaseURIStorage} from \\\"./../../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard (proxiable version), optional extension: Metadata URI (proxiable version).\\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract ERC1155MetadataURIWithBaseURIBase is Context, IERC1155MetadataURI {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when the base token metadata URI is updated.\\n    /// @param baseMetadataURI The new base metadata URI.\\n    event BaseMetadataURISet(string baseMetadataURI);\\n\\n    /// @notice Sets the base metadata URI.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {BaseMetadataURISet} event.\\n    /// @param baseURI The base metadata URI.\\n    function setBaseMetadataURI(string calldata baseURI) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenMetadataWithBaseURIStorage.layout().setBaseMetadataURI(baseURI);\\n    }\\n\\n    /// @notice Gets the base metadata URI.\\n    /// @return baseURI The base metadata URI.\\n    function baseMetadataURI() external view returns (string memory baseURI) {\\n        return TokenMetadataWithBaseURIStorage.layout().baseMetadataURI();\\n    }\\n\\n    /// @inheritdoc IERC1155MetadataURI\\n    function uri(uint256 id) external view override returns (string memory metadataURI) {\\n        return TokenMetadataWithBaseURIStorage.layout().tokenMetadataURI(id);\\n    }\\n}\\n\",\"keccak256\":\"0xea9e3ab829fdaafb384b57755feee1fa2ba04effb28393603dc975e732f11712\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/base/ERC1155MintableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../../access/libraries/AccessControlStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\n/// @dev Note: This contract requires AccessControl.\\nabstract contract ERC1155MintableBase is Context, IERC1155Mintable {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n\\n    /// @inheritdoc IERC1155Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\\n        ERC1155Storage.layout().safeMint(sender, to, id, value, data);\\n    }\\n\\n    /// @inheritdoc IERC1155Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external virtual override {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\\n        ERC1155Storage.layout().safeBatchMint(sender, to, ids, values, data);\\n    }\\n}\\n\",\"keccak256\":\"0xb5cc941581921eb5d0691c07b67ac4e4a675264c135e9614843e1af24359bc36\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x4ab0841db578e8b6495bfbdfece80f2692484d37092de27c722d168cf4f4ccb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90d39e3b427b139a97509cfe5ae52532624f512824986216790c2dfebf6a5b27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0x6ac05ca5f43999532bff5242335123fe49cf776a5000a3b88acffc2a2d79be88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        require(to != address(0), \\\"ERC1155: transfer to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _transferToken(s, from, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        require(to != address(0), \\\"ERC1155: mint to address(0)\\\");\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _mintToken(s, to, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.isContract()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == ids.length && length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        require(length == values.length, \\\"ERC1155: inconsistent arrays\\\");\\n        require(_isOperatable(s, from, sender), \\\"ERC1155: non-approved sender\\\");\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                _burnToken(s, from, ids[i], values[i]);\\n            }\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        require(operator != sender, \\\"ERC1155: self-approval for all\\\");\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        require(owner != address(0), \\\"ERC1155: balance of address(0)\\\");\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        require(length == ids.length, \\\"ERC1155: inconsistent arrays\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                balances[i] = s.balanceOf(owners[i], ids[i]);\\n            }\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 fromBalance = s.balances[id][from];\\n                uint256 newFromBalance = fromBalance - value;\\n                require(newFromBalance < fromBalance, \\\"ERC1155: insufficient balance\\\");\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    require(newToBalance > toBalance, \\\"ERC1155: balance overflow\\\");\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                require(newBalance > balance, \\\"ERC1155: balance overflow\\\");\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][from];\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC1155: insufficient balance\\\");\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \\\"ERC1155: transfer rejected\\\");\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        require(\\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\\n            \\\"ERC1155: transfer rejected\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x026857b389e369ca3a362b622df3d99feb9e04a52595994930a77719c4aa7049\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary TokenMetadataWithBaseURIStorage {\\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\\n    using Strings for uint256;\\n\\n    struct Layout {\\n        string baseURI;\\n    }\\n\\n    bytes32 public constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadataWithBaseURI.storage\\\")) - 1);\\n\\n    event BaseMetadataURISet(string baseMetadataURI);\\n\\n    /// @notice Sets the base metadata URI.\\n    /// @dev Emits a {BaseMetadataURISet} event.\\n    /// @param baseURI The base metadata URI.\\n    function setBaseMetadataURI(Layout storage s, string calldata baseURI) internal {\\n        s.baseURI = baseURI;\\n        emit BaseMetadataURISet(baseURI);\\n    }\\n\\n    /// @notice Gets the base metadata URI.\\n    /// @return baseURI The base metadata URI.\\n    function baseMetadataURI(Layout storage s) internal view returns (string memory baseURI) {\\n        return s.baseURI;\\n    }\\n\\n    /// @notice Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identfier.\\n    /// @param id The token identifier.\\n    /// @return tokenURI The token metadata URI as the concatenation of the base metadata URI and the token identfier.\\n    function tokenMetadataURI(Layout storage s, uint256 id) internal view returns (string memory tokenURI) {\\n        return string(abi.encodePacked(s.baseURI, id.toString()));\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x59ef2fafcf83742310ac25c160903f89baff367af24471a12b1b38179df9b81f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/DemoNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ERC1155} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {ERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Mintable.sol\\\";\\nimport {ERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155Burnable.sol\\\";\\nimport {ERC1155MetadataURIWithBaseURI} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Pause} from \\\"@animoca/ethereum-contracts/contracts/lifecycle/Pause.sol\\\";\\nimport {PauseStorage} from \\\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC1155Storage} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/libraries/ERC1155Storage.sol\\\";\\n\\ncontract DemoNFT is\\n    ERC1155,\\n    ERC1155Mintable,\\n    ERC1155Burnable,\\n    Pause,\\n    ERC1155MetadataURIWithBaseURI\\n{\\n    bytes32 public constant SUPER_ADMIN_ROLE = \\\"super_admin\\\";\\n    bytes32 public constant ADMIN_ROLE = \\\"admin\\\";\\n\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    constructor() Pause(false) ContractOwnership(msg.sender) {\\n        AccessControlStorage.layout().grantRole(\\n            SUPER_ADMIN_ROLE,\\n            _msgSender(),\\n            _msgSender()\\n        );\\n        AccessControlStorage.layout().grantRole(\\n            ADMIN_ROLE,\\n            _msgSender(),\\n            _msgSender()\\n        );\\n    }\\n\\n    function safeMint(\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual override {\\n        PauseStorage.layout().enforceIsNotPaused();\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\\n        ERC1155Storage.layout().safeMint(sender, to, id, value, data);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override {\\n        require(\\n            AccessControlStorage.layout().hasRole(\\n                SUPER_ADMIN_ROLE,\\n                _msgSender()\\n            ),\\n            \\\"ORNF: not super admin\\\"\\n        );\\n        ContractOwnershipStorage.layout().transferOwnership(\\n            _msgSender(),\\n            newOwner\\n        );\\n    }\\n\\n    function grantAdminRole(address account) external virtual {\\n        address operator = _msgSender();\\n        require(\\n            AccessControlStorage.layout().hasRole(\\n                SUPER_ADMIN_ROLE,\\n                _msgSender()\\n            ),\\n            \\\"ORNF: not super admin\\\"\\n        );\\n        AccessControlStorage.layout().grantRole(ADMIN_ROLE, account, operator);\\n    }\\n\\n    function grantMinterRole(address account) external virtual {\\n        address operator = _msgSender();\\n        require(\\n            AccessControlStorage.layout().hasRole(ADMIN_ROLE, _msgSender()),\\n            \\\"ORNF: not admin\\\"\\n        );\\n        AccessControlStorage.layout().grantRole(MINTER_ROLE, account, operator);\\n    }\\n}\\n\",\"keccak256\":\"0x74ec3aa69e020d9bad4ccf8ca7e6f5d70fdf475a4a31ac1a457b30370101fe20\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"BaseMetadataURISet(string)":{"notice":"Emitted when the base token metadata URI is updated."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"Paused()":{"notice":"Emitted when the pause is triggered."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when a role is granted."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when a role is revoked or renounced."},"TransferBatch(address,address,address,uint256[],uint256[])":{"notice":"Emitted when a batch of tokens is transferred."},"TransferSingle(address,address,address,uint256,uint256)":{"notice":"Emitted when some token is transferred."},"URI(string,uint256)":{"notice":"Emitted optionally when a token metadata URI is set."},"Unpaused()":{"notice":"Emitted when the pause is lifted."}},"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Retrieves the balance of `id` owned by account `owner`."},"balanceOfBatch(address[],uint256[])":{"notice":"Retrieves the balances of `ids` owned by accounts `owners`."},"baseMetadataURI()":{"notice":"Gets the base metadata URI."},"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isApprovedForAll(address,address)":{"notice":"Retrieves the approval status of an operator for a given owner."},"owner()":{"notice":"Gets the address of the contract owner."},"pause()":{"notice":"Pauses the contract."},"paused()":{"notice":"Gets the paused state of the contract."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Safely transfers a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Safely transfers some token."},"setApprovalForAll(address,bool)":{"notice":"Enables or disables an operator's approval."},"setBaseMetadataURI(string)":{"notice":"Sets the base metadata URI."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"unpause()":{"notice":"Unpauses the contract."},"uri(uint256)":{"notice":"Retrieves the URI for a given token."}},"version":1}}}}}}